<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程(50)</title>
      <link href="/posts/d48430c3.html"/>
      <url>/posts/d48430c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>线程指进程中的一个执行场景，也就是执行流程，那么进程和线程有什么区别呢?</p><ul><li>每个进程是一个应用程序，都有独立的内存空间</li><li>同一个进程中的线程共享其进程中的内存和资源</li><li>(共享的内存是堆内存和方法区内存，栈内存不共享，每个线程有自己属于自己栈内存)</li></ul></li><li><p>什么是进程？</p><p> 一个进程对应一个应用程序。例如：在 Windows操作系统启动Word就表示启动了一个进程。在java的开发环境下启动JVM，就表示启动了一个进程。现代的计算机都是支持多进程的，在同一个操作系统中，可以同时启动多个进程。</p></li><li><p>多进程有什么用？</p><ul><li>单进程计算机只能做一件事情。例：玩电脑，一边玩游戏(游戏进程)一边听音乐(音乐进程)。</li><li>对于单核计算机来讲，在同一个时间点上，游戏进程和音乐进程是同时在运行吗?不是。因为计算机的CPU只能在某个时间点上做一件事。计算机能以极快的速度来回切换线程，使得用户认为计算机运行两个线程。</li></ul></li><li><p>什么是线程？</p><ul><li>线程是一个进程中的执行场景。一个进程可以启动多个线程。<br>  <img src="https%EF%BC%9A//xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="java多线程"></li></ul></li><li><p>多线程有什么作用?</p><ul><li>多线程不是为了提高执行速度，而是提高应用程序的使用率。</li><li>线程和线程共享“堆内存和方法区内存”，栈内存是独立的，一个线程个栈。<br>  <img src="https%EF%BC%9A//xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="java线程生命周期"></li></ul></li><li><p>注：在此之前学过的都是单线程的程序！</p></li><li><p>java线程的创建与启动：</p><ul><li><p>继承Thread类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继承Thread类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多态父类型引用指向子类型对象</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processor-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现Runnable接口(推荐使用)</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现Runnable接口(推荐使用)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processor2-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="线程的调度与控制"><a href="#线程的调度与控制" class="headerlink" title="线程的调度与控制"></a>线程的调度与控制</h2><p>通常我们的计算机只有一个CPU，CPU在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。在单CPU的机器上线程不是并行运行的，只有在多个CPU上线程才可以并行运行。Java虚拟机要负责线程的调度，取得CPU的使用权目前有两种调度模型：分时调度模型和抢占式调度模型，Java使用抢占式调度模型。分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片抢占式调度模型：优先让优先级高的线程使用CPU(<strong>优先级高的线程获取的CPU时间片相对多一些</strong>)，<strong>如果线程的优先级相同，那么会随机选择一个</strong>。</p><ul><li><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建线程第二种方式(推荐写法)：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processor2-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>线程优先级主要分三种：MAX_PRIORITY(最高级);MIN_PRIORITY(最低级);NORM_PRIORITY(标准)默认。注：最高：10、标准：5、最低：1。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程的优先级</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 优先级分为：1-10</span>        <span class="token comment" spellcheck="true">// 最小、标准、最大优先值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --> 1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --> 5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --> 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认优先级都为5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改前"</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改前"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->6</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程优先级</span>        t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后"</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->6</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor4</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程堵塞"><a href="#线程堵塞" class="headerlink" title="线程堵塞"></a>线程堵塞</h2><h3 id="使用sleep-方法堵塞线程"><a href="#使用sleep-方法堵塞线程" class="headerlink" title="使用sleep()方法堵塞线程"></a>使用sleep()方法堵塞线程</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.Thread.sleep(毫秒)</span><span class="token comment" spellcheck="true">// 2.sleep是一个静态方法</span><span class="token comment" spellcheck="true">// 3.该方法的作用是：阻塞当前的线程腾出CPU，让给其他线程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"------>"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建Thread</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor5</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"------>"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="yield-方法让给同一个优先级的线程让位。但是让位时间不固定。"><a href="#yield-方法让给同一个优先级的线程让位。但是让位时间不固定。" class="headerlink" title="yield()方法让给同一个优先级的线程让位。但是让位时间不固定。"></a>yield()方法让给同一个优先级的线程让位。但是让位时间不固定。</h3><p>注：<strong>yield()方法与sleep()方法相同，都是静态方法。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest09</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread09</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Thread09</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是20整数时候，让位给main线程</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-方法合并线程"><a href="#join-方法合并线程" class="headerlink" title="join()方法合并线程"></a>join()方法合并线程</h3><p>注：1.此方法是个成员方法。<br>        2.此方法在哪个线程，就跟哪个线程调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重命名线程名称</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动t线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t线程与主线程合并</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor10</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中断堵塞"><a href="#中断堵塞" class="headerlink" title="中断堵塞"></a>中断堵塞</h2><h3 id="使用interrupt-方法异常中断堵塞"><a href="#使用interrupt-方法异常中断堵塞" class="headerlink" title="使用interrupt()方法异常中断堵塞"></a>使用interrupt()方法异常中断堵塞</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 中断线程睡眠</span><span class="token comment" spellcheck="true">// 让t线程中从堵塞状态中断：使用异常中断线程堵塞</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程延迟5秒后打断t线程的堵塞</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 终端对t线程的堵塞</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor7</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 注：用异常强制中断睡眠，睡眠以下的语句不会执行！</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正常方法中断堵塞"><a href="#正常方法中断堵塞" class="headerlink" title="正常方法中断堵塞"></a>正常方法中断堵塞</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread08 thread08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread08<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        thread08<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开关</span>        <span class="token comment" spellcheck="true">/*        * 以上程序执行过程：        * 创建线程并命名为t线程        * 主线程睡眠5秒钟，在5S中内CPU时间片均为t线程的,但是t线程每次执行需要1S，所以到最后        * 一秒钟时候，主线程结束堵塞，t线程被主线程关闭.*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Thread08</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声名t线程开关，默认此线程是开启的.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// t</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每次执行延迟1S</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果t线程关闭则直接return</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><blockquote><p>引入：</p><p>异步编程模型</p><p>同步编程模型</p><p>例：t1和t2线程：</p><p>异步编程模型：t1线程执行t1的,t2线程执行t2的,两个线程之间谁也不等谁。</p><p>同步编程模型：t1线程和七线程执行,当t线程必须等t线程执行结束之后,线程才能执行,这是同步编程模型。</p><p>什么时候要同步呢?为什么要引入线程同步呢?</p><p>1.为了数据的安全，尽管应用程序的使用率降低，但是为了保证数据是安全的，必须加入线程同步机制</p><p>线程同步机制使程序变成了(等同)单线程。</p><p>2.什么条件下要使用线程同步?</p><p>第一：必须是多线程环境</p><p>第二：多线程环境共享同一个数据</p><p>第三：共享的数据涉及到修改操作</p><p>以下程序演示取款例子。</p><p>多线程同时对同一个账户进行取款操作，会出现什么问题?</p><p>答：会出现余额数据没有及时更新而导致数据不安全.</p></blockquote><h3 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个对象</span>        Account account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Porcessor</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Porcessor</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 延迟执行t2线程</span><span class="token comment" spellcheck="true">/*        try {            Thread.sleep(1000);        } catch (InterruptedException e) {            e.printStackTrace();        }*/</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 取款流程</span><span class="token keyword">class</span> <span class="token class-name">Porcessor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建对象</span>    Account account<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">Porcessor</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取款1000.0成功，余额："</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象账户</span><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 账户名称</span>    <span class="token keyword">private</span> String actno<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 账户余额</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span>String actno<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setActno</span><span class="token punctuation">(</span>String actno<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对外提供一个取款方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把需要同步的代码，放到同步语句块中</span>        <span class="token comment" spellcheck="true">// 写法一</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 使用synchronized关键字将当前对象(this)使用对象锁</span>            <span class="token keyword">double</span> after <span class="token operator">=</span> balance <span class="token operator">-</span> money<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 延迟</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 更新余额</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 写法二</span>    <span class="token comment" spellcheck="true">// 把需要同步的代码，放到取款方法中</span><span class="token comment" spellcheck="true">/*    public synchronized void withdraw(double money) {       // 使用synchronized关键字将当前对象(this)使用对象锁        double after = balance - money;        // 延迟        try {            Thread.sleep(1000);        } catch (InterruptedException e) {            e.printStackTrace();        }        // 更新余额        this.setBalance(after);    }*/</span>    <span class="token comment" spellcheck="true">/*以上两种方法哪种更好？    * 第一种方法更好；因为相比第二种方法第一种方法对需要同步的数据更加精准，极大的缩减的运行时间*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类锁"><a href="#类锁" class="headerlink" title="类锁"></a>类锁</h3><p>当synchronized修饰静态方法时候，线程执行到此方法的时候会找类锁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 类锁* 以下程序m2方法会等m1方法执行完毕在执行m2方法吗?* 答：不会因为以下程序的synchronized修饰的是静态方法* 而修饰静态方法当线程执行到此处会直接使用类锁，与类锁无关* 所以m2不会等待m1方法，但是由于主线程含有睡眠所以m1会优先执行*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest13</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Myclass2 myclass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor13</span><span class="token punctuation">(</span>myclass2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor13</span><span class="token punctuation">(</span>myclass2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor13</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Myclass2 myClass2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Processor13</span><span class="token punctuation">(</span>Myclass2 myClass2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myClass2 <span class="token operator">=</span> myClass2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myClass2<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myClass2<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Myclass2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当synchronized修饰静态方法时候，线程执行到此方法的时候会找类锁.</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 死锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Myclass5</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Myclass6</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Myclass5</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Object o1<span class="token punctuation">;</span>    Object o2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Myclass5</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o2 <span class="token operator">=</span> o2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Myclass6</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Object o1<span class="token punctuation">;</span>    Object o2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Myclass6</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o2 <span class="token operator">=</span> o2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 守护线程* 当其他所有的用户线程结束，则守护线程退出* 守护线程一般都是无限循环的* 例：GC(垃圾回收)就是线程守护*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest15</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将用户线程设置为守护线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor15</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计定时器"><a href="#计定时器" class="headerlink" title="计定时器"></a>计定时器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定时器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest16</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建定时器</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        Timer t <span class="token operator">=</span> null<span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd HH:mm:ss SSSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-10-8 23:48:00 0000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor16</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流(49)</title>
      <link href="/posts/c8a62631.html"/>
      <url>/posts/c8a62631.html</url>
      
        <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><ol><li></li></ol><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><ol><li></li></ol><h2 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h2><ol><li></li></ol><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ol><li></li></ol><h2 id="数据字节流"><a href="#数据字节流" class="headerlink" title="数据字节流"></a>数据字节流</h2><ol><li></li></ol><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ol><li></li></ol><h2 id="写入-写出流"><a href="#写入-写出流" class="headerlink" title="写入/写出流"></a>写入/写出流</h2><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for增强(48)</title>
      <link href="/posts/95735d7.html"/>
      <url>/posts/95735d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="for增强"><a href="#for增强" class="headerlink" title="for增强"></a>for增强</h1><h2 id="关于for增强："><a href="#关于for增强：" class="headerlink" title="关于for增强："></a>关于for增强：</h2><ol><li><p>语法：</p><blockquote><p>for(类型 变量: 数组名/变量名){}</p></blockquote></li><li><p>集合想要使用for增强必须使用泛型,如果不使用泛型的话for类型中声名Object。</p></li><li><p>for增强没有下标，for循环有下标。</p></li><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建int类型数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">342</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for增强</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>i1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意：a变量是集合/数组中的每个元素，而不是每循环一次的值</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!!!!!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        SortedSet<span class="token operator">&lt;</span>Test01<span class="token operator">></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test01 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test01 t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token string">"Array"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test01 t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token string">"Teat"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 集合添加元素</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Test01 a<span class="token operator">:</span>s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Test01<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age1<span class="token operator">></span>age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age1<span class="token operator">&lt;</span>age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Test01</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Test01 test01 <span class="token operator">=</span> <span class="token punctuation">(</span>Test01<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> test01<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> test01<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Test01{"</span> <span class="token operator">+</span>                <span class="token string">"a='"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型初步(47)</title>
      <link href="/posts/d00d884d.html"/>
      <url>/posts/d00d884d.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型初步"><a href="#泛型初步" class="headerlink" title="泛型初步"></a>泛型初步</h1><blockquote><p>泛型能更早的发现错误，如类型转换错误，通常在运行期才会发现，如果使用泛型，那么在编译期将会发现，通常错误发现的越早，越容易调试，越容易减少成本。(泛型与包装类型一样都是编译阶段触发)</p></blockquote><ol><li><p>为什么可以引入泛型？</p><ol><li>可以统一集合中的数据类型。</li><li>可以减少将之类型的转换。</li></ol></li><li><p>泛型的优缺点？</p><ul><li>优点：统一类型，减少强制类型转换。</li><li>缺点：类型太统一。</li></ul></li><li><p>以下程序若没有使用泛型，有什么缺点？</p><ul><li>如果集合不使用泛型，则集合中的元素不统一,在大量集合遍历时候，只可以拿出Object类型，</li><li>需要做大量的强制类型转换，太麻烦。</li><li>示例代码01：</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个集合使用泛型</span>        SortedSet<span class="token operator">&lt;</span>Manager<span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Manager<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"MAkEE"</span><span class="token punctuation">,</span><span class="token number">4080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"ARRAY"</span><span class="token punctuation">,</span><span class="token number">8090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个迭代器使用泛型，并遍历集合内的数据</span>        Iterator<span class="token operator">&lt;</span>Manager<span class="token operator">></span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Manager<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Manager o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> wage1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wage<span class="token punctuation">;</span>        <span class="token keyword">int</span> wage2 <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getWage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wage1<span class="token operator">></span>wage2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wage1<span class="token operator">&lt;</span>wage2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Manager manager <span class="token operator">=</span> <span class="token punctuation">(</span>Manager<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> wage <span class="token operator">==</span> manager<span class="token punctuation">.</span>wage <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> manager<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> wage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工资</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> wage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> wage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Manager{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", wage="</span> <span class="token operator">+</span> wage <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWage</span><span class="token punctuation">(</span><span class="token keyword">int</span> wage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义泛型</p><blockquote><p>以下程序因为Test类中规定只能传入相同数据类型，当测试类String类型出入则后期不可以传入其他数据类型.这样可以规范数据类的统一，方便同时调用。</p></blockquote><ul><li><p>示例代码02：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义泛型</span>        Test<span class="token operator">&lt;</span>String<span class="token operator">></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合排序类Comparable和Comparator区别小结(46)</title>
      <link href="/posts/26f930be.html"/>
      <url>/posts/26f930be.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合排序类Comparable和Comparator区别小结"><a href="#集合排序类Comparable和Comparator区别小结" class="headerlink" title="集合排序类Comparable和Comparator区别小结"></a>集合排序类Comparable和Comparator区别小结</h1><h2 id="Comparable简介"><a href="#Comparable简介" class="headerlink" title="Comparable简介"></a>Comparable简介</h2><p>　　Comparable是排序接口。若一个类实现了Comparable接口，就意味着该类支持排序。实现了Comparable接口的类的对象的列表或数组可以通过Collections.sort或Arrays.sort进行自动排序。注意：Comparable须实现compareTo方法。<br>测试代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义类</span>        Map m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set s <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object k <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"---->"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现compareTo方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> o1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token keyword">int</span> o2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person2<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token operator">==</span><span class="token number">02</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token operator">></span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Person2{"</span> <span class="token operator">+</span>                    <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Comparator简介"><a href="#Comparator简介" class="headerlink" title="Comparator简介"></a>Comparator简介</h2><p>　　Comparator是比较接口，我们如果需要控制某个类的次序，而该类本身不支持排序(即没有实现Comparable接口)，那么我们就可以建立一个“该类的比较器”来进行排序，这个“比较器”只需要实现Comparator接口即可。也就是说，我们可以通过实现Comparator来新建一个比较器，然后通过这个比较器对类进行排序。注意：Comparator须实现compare方法。<br>测试代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set s <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object k <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"---->"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person2{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person2Sort</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person2<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person2<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age1<span class="token operator">==</span>age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age1 <span class="token operator">></span> age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类"><a href="#注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类" class="headerlink" title="注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类"></a>注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collections集合工具类(45)</title>
      <link href="/posts/c7f0b346.html"/>
      <url>/posts/c7f0b346.html</url>
      
        <content type="html"><![CDATA[<h1 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h1><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建List集合</span>        List a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为集合中添加元素</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token comment" spellcheck="true">// 在for中创建迭代器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span><span class="token operator">+</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用Collections集合工具类为ArrayList集合排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token comment" spellcheck="true">// 在for中创建迭代器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span><span class="token operator">+</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上方法使用Collections类中的sort排序方法,都是使用的包装类型,而包装类型</span>        <span class="token comment" spellcheck="true">// SUN公司都实现了:</span>        <span class="token comment" spellcheck="true">// 1.Comparable类中compareTo方法，注(形参只需要一个，另一个直接调用当前类的对象)</span>        <span class="token comment" spellcheck="true">// 2.Comparator中compare方法</span>        List a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i2 <span class="token operator">=</span> a2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 自定义类如果需要排序必须实现以上两种方法其中一种</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">></span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PersonSort</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">></span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map集合(44)</title>
      <link href="/posts/dc777660.html"/>
      <url>/posts/dc777660.html</url>
      
        <content type="html"><![CDATA[<h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><ol><li><p>HashMap集合创建及常用方法</p><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 关于Map集合中的常用方法： * void clear(); 清空Map * boolean isEmpty();判断该集合是否为空 * int size(); 获取Map中的键值对的个数 * * Object put(Object key,Object value); 向集合中添加键值对 * * boolean containsKey(Object key); 判断Map中是否包含这样的key * boolean containsValue(Object value); 判断Map中是否包含这样的value * * set entrySet(); 返回此映射中包含的映射关系的Set视图 * * Object remove(Object key); 通过key将键值对删除 * * Set keySet(); 获取Map中所有的key * Collection values(); 获取Map集合中所有的value * * 注意：存储在Map集合Key部分的元素需要同时重写hashCaode+equals方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Map集合</span>        Map persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//HashMap中默认初始化容量是16，默认加载因子是0.75</span>        <span class="token comment" spellcheck="true">// 存储键值对</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"Cook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"Map1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.判断键值对的个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"persons键值对个数为："</span><span class="token operator">+</span>persons<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：Map中的键值对是无需不可重复的</span>        <span class="token comment" spellcheck="true">// 2.判断集合中是否包含这样的key</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -->true</span>        <span class="token comment" spellcheck="true">// 3.判断集合中是否包含这样的value</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> false</span>        <span class="token comment" spellcheck="true">// 结论：Map中如果key重复了，则value则采用后者"覆盖"前者value的方式存储</span>        <span class="token comment" spellcheck="true">// 4.通过key获取value值</span>        String key <span class="token operator">=</span> <span class="token string">"4"</span><span class="token punctuation">;</span>        Object value <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// --> Map1</span>        <span class="token comment" spellcheck="true">// 5.通过key删除键值对</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"persons删除键值对个数为："</span><span class="token operator">+</span>persons<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"···················"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.获取所有的value</span>        Collection values <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"···················"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7.获取所有的key</span>        Set keys <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i2 <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下程序演示了如何遍历Map集合</span>            Object k <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 8.获取映射关系的Set视图</span>        Set s <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i3 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下程序演示了如何遍历Map集合</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Properties集合创建及常用方法</p><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * Hashtable默认初始化容量是11，默认加载因子是0.75 * Java.util.Properties; 也是由key和value组成的，但是key和value都是字符串类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        Properties p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span><span class="token string">"oracle.jdbc.driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"scott"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意:</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"passworld"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取:通过key值获取value</span>        String v1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v2 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v3 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"passworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TreeSet集合(43)</title>
      <link href="/posts/b08de21f.html"/>
      <url>/posts/b08de21f.html</url>
      
        <content type="html"><![CDATA[<h1 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h1><ol><li><p>TreeSet特点:无需不可重复但是可以按照元素的大写进行排序<br> 示例代码01：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建TressSet集合</span>        SortedSet ss1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动装箱 Integer类型装箱</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> ss1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建迭代器</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 0</span>            <span class="token comment" spellcheck="true">// 1</span>            <span class="token comment" spellcheck="true">// 111</span>            <span class="token comment" spellcheck="true">// 222</span>            <span class="token comment" spellcheck="true">// 555</span>            <span class="token comment" spellcheck="true">// 9999</span>            <span class="token comment" spellcheck="true">// 输出以上顺序</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建TressSet集合</span>        SortedSet ss2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        String tm1 <span class="token operator">=</span> <span class="token string">"2020-01-30"</span><span class="token punctuation">;</span>        String tm2 <span class="token operator">=</span> <span class="token string">"2021-03-20"</span><span class="token punctuation">;</span>        String tm3 <span class="token operator">=</span> <span class="token string">"2025-10-5"</span><span class="token punctuation">;</span>        String tm4 <span class="token operator">=</span> <span class="token string">"2026-06-30"</span><span class="token punctuation">;</span>        String tm5 <span class="token operator">=</span> <span class="token string">"2029-02-30"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建格式化日期对象</span>        SimpleDateFormat s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q3 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q4 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm4<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q5 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i2 <span class="token operator">=</span> ss2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建迭代器</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果直接写以下方法，不保险，因为如果传过来的不是Date类型则会直接报错</span>            <span class="token comment" spellcheck="true">// System.out.println(o instanceof Student);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Date d <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span>o<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 2020-01-30</span>                <span class="token comment" spellcheck="true">// 2021-03-20</span>                <span class="token comment" spellcheck="true">// 2025-10-05</span>                <span class="token comment" spellcheck="true">// 2026-06-30</span>                <span class="token comment" spellcheck="true">// 2029-03-02</span>                <span class="token comment" spellcheck="true">// 输出以上顺序</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>TreeSet实现自动排序原理：</p><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建TressSet自动排序01</span><span class="token comment" spellcheck="true">/** * Sortedset集合存储元素实现自动排序原因：被存储的元素实现了Comparable接口， * SUN编写 TreeSet集合在添加元素的时候，会调用compareTo方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortedSetTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建TressSet集合</span>        SortedSet s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        Student5 a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student5 a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student5 a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student5 a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建迭代器</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * 以上程序报错：ClassCastException //类转换错误             * SortedSet集合存储元素可以自动排序的原理：             * 因为被存储的元素集合实现了Comparavle接口，SUN编写了TreeSet集合在添加元素的时候，             * 会调用compareTo方法进行比较，在包装类型中都已实现了Comparavle但是在自定义对象中             * 如果未实现Comparavle接口的方法，会在Comparable&lt;? super K> k = (Comparable&lt;?             *  super K>) key;强转失败从而报错。             */</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student5</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student5</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现Comparable接口中的方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Student5<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编写一个比较规则</span>        <span class="token keyword">return</span> age1 <span class="token operator">-</span> age2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student5{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例代码02：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 总结自动排序： * 自动排序实现的原理： * 当TreeSet集合添加元素时，如果元素不重复则自动会排序，在TreeSet内部强转成Comparator * 自动调用compareTo方法或在创建集合比较器进行排序. * 注：当自定义创建对象时候，使用TreeSet或其他自动排序集合时候需要实现以上两种的任意一种方法，以实现自动排序 * 1.实现类直接实现Comparable接口并实现compareTo方法：缺点：一旦实现Comparable不再是原来的类 * 2.直接创建一个类在这个类种实现Comparator接口中compare方法，然后在创建TreeSet或其他自动排序集合时 * 将参数直接创建该类对象即可.此方法可以实现代码的复用，值得推荐！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortedSetTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        SortedSet so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        Shoe s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">12.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shoe s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">14.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shoe s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shoe s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> so<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Shoe</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Shoe{"</span> <span class="token operator">+</span>                <span class="token string">"price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> price1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Shoe<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>        <span class="token keyword">double</span> price2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Shoe<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>price1<span class="token operator">==</span>price2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>price1<span class="token operator">></span>price2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set集合(42)</title>
      <link href="/posts/77133371.html"/>
      <url>/posts/77133371.html</url>
      
        <content type="html"><![CDATA[<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><h2 id="Set集合存储过程："><a href="#Set集合存储过程：" class="headerlink" title="Set集合存储过程："></a>Set集合存储过程：</h2><ol><li><p>Hashset底层实际上是一个 HashMap， HashMap底层采用了哈希表数据结构。</p></li><li><p>哈希表又叫做散列表，哈希表底层是一个数组，这个数组中每一个元素是一个单向链表。每个单向链表都有一个独一无二的hash值，代表数组的下标。在某个单向链表中的每一个节点上的hash值是相等的，hash值实际上是key调用 hashcode方法，在通过” hash function”转换成的值。<br> 3.如何向哈希表中添加元素:<br> 先调用被存储的key的hashcode方法，经过某个算法得出hash值，如果在这个哈希表中不存在这个hash值，则直接加入元素。如果该hash值已经存在，继续调用key之间的equals方法，如果 equals方法返回 false，则将该元素添加。如果equals方法返回true，则放弃添加该元素。</p></li></ol><ul><li>示例代码01：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建HashSet集合</span>        Set h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h集合中元素个数有："</span><span class="token operator">+</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>深入Hashset数组<br> 示例代码02：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个HashSet集合</span>        Set employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"256"</span><span class="token punctuation">,</span><span class="token string">"KED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"256"</span><span class="token punctuation">,</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 3839054</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e6<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 3839054</span>        <span class="token comment" spellcheck="true">// e3与e6对象添加到HashSet中去，调用hashCode方法返回结果一样，HashSet会进一步调用equals</span>        <span class="token comment" spellcheck="true">// 方法来进行比较是否相同，如果相同则放弃添加，如果不相同则添加。</span>        Employee e4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"308"</span><span class="token punctuation">,</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"Monk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        <span class="token comment" spellcheck="true">// 因为以上添加的两个对象重复但是调用hashCode()方法不一样，不符合业务逻辑,</span>        <span class="token comment" spellcheck="true">// 所以需要重写hashCode方法。</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e3<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e4<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e5<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据现实的业务逻辑得知:该公司的员工编号是：1000-9999</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 编号</span>    String no<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String no<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Employee employee <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> employee<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> employee<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List集合(41)</title>
      <link href="/posts/37befa3e.html"/>
      <url>/posts/37befa3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><h2 id="list集合的特点："><a href="#list集合的特点：" class="headerlink" title="list集合的特点："></a>list集合的特点：</h2><ul><li><p>有序性可重复，有序，存进去什么顺序，取出来还是这个顺序取出。</p></li><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java">        List l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token comment" spellcheck="true">// 创建迭代器</span>        Iterator a1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深入List集合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 深入List集合</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        List l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建元素</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add方法</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在下标为2的地方添加元素</span>        <span class="token comment" spellcheck="true">// 使用Array方法遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用get方法获取每次下表的元素</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"迭代方法遍历元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用迭代方法遍历</span>        Iterator l3 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection集合(40)</title>
      <link href="/posts/92d95fa5.html"/>
      <url>/posts/92d95fa5.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li><p>集合概念：</p><ul><li>集合是Java中提供的一种容器，可以用来存储多个数据 。</li><li>数组的长度是固定的。集合的长度是可变的   。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。  </li></ul></li><li><p>集合框架：</p><ul><li>集合按照其存储结构可以分为两大类，分别是单列集合java.util.Collection和双列集合java.util.Map。</li><li>java.util.Collection特点：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是java.util.List和java.util.Set。其中，List的特点是元素有序、元素可重复。Set的特点是元素无序，而且不可重复。List接口的主要实现类有java.util.ArrayList和java.util.LinkedList，Set接口的<br>  主要实现类有java.util.HashSet和java.util.TreeSet。  </li><li>java.util.Map特点：中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。  </li></ul><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BECollection.png" alt="Collection"></p><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BEMap.png" alt="Map"></p></li><li><p>Collection常用方法：</p><ul><li><p>add(Object element); 向集合中添加元素</p></li><li><p>size(); 获取集合中的个数</p></li><li><p>boolean isEmpty(); 判断集合中是否有元素</p></li><li><p>clear(); 清空集合</p></li><li><p>toArray(); 将集合转换成数组</p></li><li><p>Iterator iterator(); 获取集合所依赖的迭代器对象</p></li><li><p>boolean contains(Object o); 判断集合中是否包含某个元素</p></li><li><p>boolean remove(Object o); 删除集合中某个元素</p></li><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java">          <span class="token comment" spellcheck="true">// * add(Object element); 向集合中添加元素</span>        <span class="token comment" spellcheck="true">// * size(); 获取集合中的个数</span>        <span class="token comment" spellcheck="true">// * boolean isEmpty(); 判断集合中是否有元素</span>        <span class="token comment" spellcheck="true">// * clear(); 清空集合</span>        <span class="token comment" spellcheck="true">// * toArray(); 将集合转换成数组</span>        <span class="token comment" spellcheck="true">// 1.创建一个集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 多态</span>        <span class="token comment" spellcheck="true">// 2.添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其中10使用了JDK5.0中的自动装箱，将10转换成了Integer引用类型</span>        <span class="token comment" spellcheck="true">// Integer i = new Integer(10); // 以上等同于这条语句</span>        Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取集合中的元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1集合中的元素个数为："</span><span class="token operator">+</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断集合中是否有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --》 false</span>        <span class="token comment" spellcheck="true">//4.将集合转换为数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.清空集合</span>        c1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --》 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>示例代码02：</p><pre class="line-numbers language-java"><code class="language-java">          <span class="token comment" spellcheck="true">// Iterator iterator(); 获取集合所依赖的迭代器对象</span>        <span class="token comment" spellcheck="true">// 创建ArrayList集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加对象</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 自动装箱</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 自动装箱</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 自动装箱</span>        <span class="token comment" spellcheck="true">// 创建迭代器</span>        Iterator i1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多态--夫类型接口引用子类型(迭代器)对象</span>        <span class="token comment" spellcheck="true">/*         * 迭代/遍历         * 1.不需要关系底层调用的是哪个迭代器，当前集合创建的集合是什么集合底层调取相应的迭代器         * 2.迭代器是面向接口的编程         * 3.例：ArrayList集合所依赖的迭代器是是java.util.ArrayList$Itr         *   例：LinkedList集合所依赖的迭代器是java.util.LinkedList$ListItr         */</span>        <span class="token comment" spellcheck="true">// while遍历</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"while遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Object o <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 自动拆箱</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for遍历</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"for遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o2 <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例代码03：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// boolean contains(Object o); 判断集合中是否包含某个元素</span>        <span class="token comment" spellcheck="true">// 创建ArrayList集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// contains()比较</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> true</span>        <span class="token comment" spellcheck="true">/**         * 以上方法为什么返回true?         * 答：contains()方法的内部是使用的Integer的equals()，而Integer类重写了Object中的equals()         * 方法，所以最后比较的是i1与集合c1中的value值，所以返回true         */</span>        <span class="token comment" spellcheck="true">// Student使用contains()比较：</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20212000</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20212000</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(c1.contains(s2)); // --> false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 重写后true</span>        <span class="token comment" spellcheck="true">/**         * 以上方法为什么返回true?         * 答：contains()方法的内部是使用的Object中的equals()，而Object类中的equals()方法默认比较的是引用地址是否相同         * 所以返回false，但是与实际业务逻辑冲突所以在Student中重写equals()方法.         */</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写equals()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> id <span class="token operator">==</span> student<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例代码03：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * boolean remove(Object o); 删除集合中某个元素 * 注意： * remove和contains方法都需要集合中的元素重写equals方法 * 因为Object中的equals方法比较内存地址，在现实的业务逻辑当中不能比较内存地址，应该比较内容 */</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 0</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Javk"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Javk"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 0</span>        <span class="token comment" spellcheck="true">// 深入remove方法</span>        <span class="token comment" spellcheck="true">/**         * 问：迭代器中的remove方法与集合中自带的remove方法有什么不同？         */</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建迭代器</span>        Iterator a1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用迭代器中的remove方法删除</span>        <span class="token comment" spellcheck="true">/*while (a1.hasNext()) {  // next()如果迭代具有更多元素，则返回 true            a1.next();  // 游标下移            a1.remove();// 删除当前元素        }*/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --》 0</span>        <span class="token comment" spellcheck="true">// 使用集合中的remove方法删除</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用集合中的remove方法删除元素</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --》 Error: ConcurrentModificationException</span>        <span class="token comment" spellcheck="true">/**         * 报错原因：迭代器中remove中的方法与集合中remove方法区别：         * 1.如果需要批量删除集合中的元素的话，调用集合中的remove方法删除了集合中的元素，但是循环是使用的未删除之前的         * 集合元素，这样会使迭代器中记录集合元素不是最新的.所以每删除一个都需要重新定义迭代器，从而保证迭代器中的元素         * 与集合元素相同.所以这种方法不能用         * 2.迭代器中的remove方法可以实时记录当前集合删除多少元素从而实时更新游标，这种方式值得推荐         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>s</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类型(39)</title>
      <link href="/posts/a52b6dff.html"/>
      <url>/posts/a52b6dff.html</url>
      
        <content type="html"><![CDATA[<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><blockquote><p>引入：定义一个方法，该方法的作用是计算两个int类型数据的商，如果计算成功则该方法返回1，如果执行失败则该方法返回0程序执行成功，但是该程序会存在风险：</p><p>分析:存在什么风险?<br>程序中的问题能在编译阶段解决的，绝对不会放在运行期解决。所以下程序可以引入枚举类型”。</p></blockquote><ol><li>什么情况下使用枚举类型：</li></ol><p>  不重复且有限的元素使用枚举类型</p><p>  例子：</p><p>  1、一周有多少天？</p><p>  7天。像这样固定不变的一组数据，如果我们的程序有需要用到这“7天”的相关信息，例如：发工资分为工作日和周末，可以考虑使用枚举类型。</p><p>  2、太阳系有多少个行星？</p><p>  8个。当我们需要计算每个行星的表面重力的时候，像这样我们需要用到固定不变的一组信息中的每一个元素携带了不同的信息，可以考虑使用枚举类型。 </p><p>  3、计算器中的基础运算符。</p><p>   加减乘除。像这样我们需要用到固定不变的一组信息中的每一个元素都决定了不同的行为的时候，可以考虑使用枚举类型。</p><p>  4、web请求返回的状态。</p><p>  比如：error为-1，success为0，未登录为-9等可以设为枚举类型。</p><ol start="2"><li>示例代码： </li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * 定义一个方法，该方法的作用是计算两个int类型数据的商，如果计算成功则该方法返回1，如果执行失败则该方法返回0程序执行成功，但是该程序会存在风险：     * 分析:存在什么风险?     * 程序中的问题能在编译阶段解决的，绝对不会放在运行期解决。所以以下程序可以引入枚举类型"。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 分析:存在什么风险?</span>        <span class="token comment" spellcheck="true">// 程序中的问题能在编译阶段解决的，绝对不会放在运行期解决。所以下程序可以引入枚举类型"。</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成功</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 失败</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上程序如果执行成功则返回1，如果没返回则返回0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EnumTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成功</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span>FALL<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 失败</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上程序如果执行成功则返回1，如果没返回则返回0</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：声名类型是枚举名称而不是枚举类型</span>        Result result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span>Result<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span>Result<span class="token punctuation">.</span>FALL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Result<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个枚举类型；</span>    <span class="token comment" spellcheck="true">// 规范要求：必须全部大写</span>    SUCCESS<span class="token punctuation">,</span>FALL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—随机数(38)</title>
      <link href="/posts/368f5c93.html"/>
      <url>/posts/368f5c93.html</url>
      
        <content type="html"><![CDATA[<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><ol><li><p>java.util.Random;示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        Random r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择0-101之间的数字</span>        <span class="token comment" spellcheck="true">// 循环生成5个随机数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>exercise：生成5个不重复的数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生成【1-5】个不重复的随机数</span>        Random r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> r2<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"___________________________________"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">contains</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"||||||||||||||||||||||||||||||||||||||"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i1<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> i1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—数字类(37)</title>
      <link href="/posts/a2f5d052.html"/>
      <url>/posts/a2f5d052.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用类—数字类"><a href="#常用类—数字类" class="headerlink" title="常用类—数字类"></a>常用类—数字类</h1><ol><li><p>DecimalFormat类型示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * java.text.DecimalFormat; * 数字格式化元素： * # 任意字符 * , 千分位 * . 小数点 * 0 不够补零 */</span>        <span class="token comment" spellcheck="true">// 练习一：</span>        <span class="token comment" spellcheck="true">// 创建数字格式化对象并加入千分位</span>        DecimalFormat df1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始格式化</span>        <span class="token comment" spellcheck="true">// Number-->String</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 123,456</span>        <span class="token comment" spellcheck="true">// 练习二：</span>        <span class="token comment" spellcheck="true">// 加入千分位并保留两位小数</span>        DecimalFormat df2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###.##"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始格式化</span>        <span class="token comment" spellcheck="true">// Number-->String</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234567.123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 1,234,567.12</span>        <span class="token comment" spellcheck="true">// 练习二：</span>        <span class="token comment" spellcheck="true">// 加入千分位并保留四位小数，并且不够补零</span>        DecimalFormat df3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###.0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始格式化</span>        <span class="token comment" spellcheck="true">// Number-->String</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>df3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234567.123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 1,234,567.1230</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>BigDecimal类型示例代码：</p></li></ol><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * java.math.BigDecimal;         * 该类型的数据精确度极高,适合做财务软件         * 财务软件中 double 类型精确度太低         */</span>        <span class="token comment" spellcheck="true">// 创建BigDecimal对象</span>        BigDecimal v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：以上v1与v2都是引用数据数据类型，所以无法直接进行数字运算</span>        BigDecimal v3 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—日期类(36)</title>
      <link href="/posts/89ec6322.html"/>
      <url>/posts/89ec6322.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用类—日期类"><a href="#常用类—日期类" class="headerlink" title="常用类—日期类"></a>常用类—日期类</h1><ol><li><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 常用类—日期类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// currentTimeMillis()方法获取自1970年1月1日00时00分00秒000毫秒到当前的毫秒数</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前时间</span>        Date nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> Tue Sep 21 15:08:10 CST 2021</span>        <span class="token comment" spellcheck="true">// 以上输出结果说明，Java.Util.Date类已经重写了toString()方法</span>        <span class="token comment" spellcheck="true">// 输出结果对于中国人来说不太容易理解，可以使用java.text.SimpleDateFormat用来格式化日期对象并返回-->String</span>        <span class="token comment" spellcheck="true">/* 日期格式(注大小写)：         * y 年         * M 月         * d 日         * H 小时         * m 分         * s 秒         * S 毫秒         */</span>        <span class="token comment" spellcheck="true">// Date --> String</span>        <span class="token comment" spellcheck="true">// 1.创建一个日期格式化对象</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.开始格式化日期对象</span>        String strTime1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTime1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 2021年09月21日 15:21:31 736</span>        <span class="token comment" spellcheck="true">// String --> Date</span>        <span class="token comment" spellcheck="true">// 获取特定的日期</span>        <span class="token comment" spellcheck="true">// 1.创建一个格式化对象</span>        SimpleDateFormat sdf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意:格式化日期对象不可以随便写，需要与字符串格式相符。</span>        <span class="token comment" spellcheck="true">// 2.将String转化成Date对象</span>        String s1 <span class="token operator">=</span> <span class="token string">"2020-09-21 15:29:00 000"</span><span class="token punctuation">;</span>        Date t <span class="token operator">=</span> sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> Mon Sep 21 15:29:00 CST 2020</span>        <span class="token comment" spellcheck="true">// 1000毫秒是自1970年1月1日00:00:00 GMT的毫秒数</span>        Date t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 分配 Date对象并初始化它以表示自标准基准时间（称为“纪元”）以来的指定毫秒数，即1970年1月1日00:00:00 GMT。</span>        <span class="token comment" spellcheck="true">// 格式化日期对象</span>        SimpleDateFormat sdf3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy,MM,dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 北京属于东八区 所以比CST时区早八小时</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --》 1970,01,01 08:00:01 000</span>        <span class="token comment" spellcheck="true">// 获取当前时间的前十分钟</span>        Date t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2021,09,21 15:38:30 116</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>练习：获取2008 8 8 是星期几？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取系统当前的日期</span>        Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查看当前日历下"星期几"</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 6</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查看当前几号</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 24</span>        <span class="token comment" spellcheck="true">// 练习获取2008 8 8 是星期几？</span>        <span class="token comment" spellcheck="true">// 获取2008 8 8日期</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String strTime<span class="token operator">=</span><span class="token string">"2008-08-08"</span><span class="token punctuation">;</span>            Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 6</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动装箱/自动拆箱(35)</title>
      <link href="/posts/b894bec6.html"/>
      <url>/posts/b894bec6.html</url>
      
        <content type="html"><![CDATA[<h1 id="自动装箱-自动拆箱"><a href="#自动装箱-自动拆箱" class="headerlink" title="自动装箱/自动拆箱"></a>自动装箱/自动拆箱</h1><ol><li><p>自动装箱相关概念：</p><ul><li>自动装箱/拆箱是程序编译阶段的一个概念，与程序的运行无关，<br>  也就是说即使你编写的是Integer i3 = 200;在程序运行时还是Integer i3 = new Integer(200);两者创建手法相等。</li><li>自动拆箱与装箱主要目的是为了程序猿的方便编写程序。</li><li>在使用自动装箱时如果是Integer类型且在：-128~127范围内创建的对象，在程序运行创建时直接调用方法区中的”整形常量池”中数字，而不会在创建对象，也就是说：Integer i1 = 10; 与 Integer i2 = 10; 最后对比(i1==i2)出来的是true，但是不使用自动装箱。直接手动装箱不管在不在范围内都是(Integer i2 = new (Integer (10); Integer i3 = new (Integer (10); i2==i3)会直接返回false</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 包装类型的自动装箱(auto_boxing)、自动拆箱(auto_unboxing)</span>        <span class="token comment" spellcheck="true">// JDK5.0以后的版本可以直接使用自动装箱/拆箱，可以不用new一个对象出来调用了</span>        <span class="token comment" spellcheck="true">// JDK5.0之前的：</span>        <span class="token comment" spellcheck="true">// int ---> Integer 装箱</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0之前的装箱："</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// integer ---> Int 拆箱</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0之前的拆箱："</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JDK5.0之后的</span>        <span class="token comment" spellcheck="true">// int ---> Integer 自动装箱</span>        Integer i3 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0的自动装箱："</span> <span class="token operator">+</span> i3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// integer ---> Int 自动拆箱</span>        <span class="token keyword">int</span> i4 <span class="token operator">=</span> i3<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0的自动拆箱："</span> <span class="token operator">+</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 深入了解自动装箱拆箱</span>        <span class="token comment" spellcheck="true">// 手动装箱</span>        Integer i7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7<span class="token operator">==</span>i8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> false</span>        <span class="token comment" spellcheck="true">// Integer重写了equals方法，使得在Integer中比较的是两者的数值并非内存地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> true</span>        <span class="token comment" spellcheck="true">// 自动装箱</span>        <span class="token comment" spellcheck="true">// 如果不超出范围值的话是搜索整型常量池中数值，然后对比i5与i6的相应数值，因为两者都是从整形常量池中创建出来的，自然是true</span>        Integer i5 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        Integer i6 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5<span class="token operator">==</span>i6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> true</span>        <span class="token comment" spellcheck="true">// 自动装箱超出范围</span>        <span class="token comment" spellcheck="true">// 如果超出范围值的话是程序在堆内存创建对象，然后直接对比i9与i10的内存地址，结果内存地址不一样返回false</span>        Integer i9 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>        Integer i10 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i9<span class="token operator">==</span>i10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer常用方法(34)</title>
      <link href="/posts/627e0986.html"/>
      <url>/posts/627e0986.html</url>
      
        <content type="html"><![CDATA[<h1 id="Integer常用方法"><a href="#Integer常用方法" class="headerlink" title="Integer常用方法"></a>Integer常用方法</h1><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// int --> Integer</span>        <span class="token comment" spellcheck="true">// 基本类型-->引用数据类型</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Integer --> int</span>        <span class="token comment" spellcheck="true">// 引用数据类型-->基本数据类型</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重要: parseInt(String s) 将字符串参数解析为带符号的十进制整数。</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 26</span>        <span class="token comment" spellcheck="true">// 重要：parseDouble(String s) 返回一个新 double初始化为指定的代表的值 String ，如通过执行 valueOf类的方法 Double 。</span>        <span class="token keyword">double</span> price <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 4.0</span>        <span class="token comment" spellcheck="true">// 其他类型值转换性质同理</span>        <span class="token comment" spellcheck="true">// 进制之间转换</span>        <span class="token comment" spellcheck="true">// 十进制二进制转换</span>        String s1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 1010</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 十进制十六进制转换</span>        String s2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 十进制八进制转换</span>        String s3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 12</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int --> Integer</span>        Integer q1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String --> Integer</span>        Integer q2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 1234</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总结：关于三种类转换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总结：关于三种类转换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.int --> Integer</span>        Integer w1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.Integer --> int</span>        <span class="token keyword">int</span> w2 <span class="token operator">=</span> w1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.String --> Integer</span>        Integer w3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.Integer --> String</span>        String s4 <span class="token operator">=</span> w3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.String --> int</span>        <span class="token keyword">int</span> w4 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.int --> String</span>        String s5 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包装类型(33)</title>
      <link href="/posts/46b5ab92.html"/>
      <url>/posts/46b5ab92.html</url>
      
        <content type="html"><![CDATA[<h1 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h1><h2 id="Java中八种基本数据对应的包装类型"><a href="#Java中八种基本数据对应的包装类型" class="headerlink" title="Java中八种基本数据对应的包装类型"></a>Java中八种基本数据对应的包装类型</h2><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类型</th><th align="center">包装名称</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">java.lang.Byte;</td><td align="center">字节型</td></tr><tr><td align="center">short</td><td align="center">java.lang.short;</td><td align="center">短整型</td></tr><tr><td align="center">long</td><td align="center">java.lang.Long;</td><td align="center">长整型</td></tr><tr><td align="center">int</td><td align="center">java.lang.Integer;</td><td align="center">整形</td></tr><tr><td align="center">float</td><td align="center">java.lang.Float;</td><td align="center">单精度浮点数</td></tr><tr><td align="center">double</td><td align="center">java.lang.Double;</td><td align="center">双精度浮点数</td></tr><tr><td align="center">boolean</td><td align="center">java.lang.Boolean;</td><td align="center">布尔类型</td></tr><tr><td align="center">char</td><td align="center">java.lang.Character;</td><td align="center">字符型</td></tr></tbody></table><h2 id="继承关系结构图："><a href="#继承关系结构图：" class="headerlink" title="继承关系结构图："></a>继承关系结构图：</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="继承关系结构图"></p><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">///需求:规定m1方法可以接收java中任何一种数据类型</span>    <span class="token comment" spellcheck="true">//m1方法如果想接收byte类型的数据,可以将byte类型先包装成java.1ang,Byte;再传递参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里Boolean重写了Object的o.toString()方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用常用的布尔构造函数创建对象</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用java.lang.Boolean;包装类型转换成引用类型</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象类型传到形参中</span>        <span class="token function">m1</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ===> true</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringBuffer和StringBuilder(32)</title>
      <link href="/posts/4aba4abd.html"/>
      <url>/posts/4aba4abd.html</url>
      
        <content type="html"><![CDATA[<h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><blockquote><ol><li><p>Java.lang.StringBuffer和Java.lang.StringBuilder是什么？</p><p> 答：是一个字符串缓冲区</p></li><li><p>工作原理</p><p> 预先在内存中申请一块空间,以容纳字符序列,如果预留的空间不够用,则进行自动扩容,以容纳更多字符序列</p></li><li><p>Java.lang.StringBuffer和Java.lang.StringBuilder 和 String最大的区别是什么？</p><p> 答：String是不可变得字符序列,存储字符串常量池中</p><p> ​        StringBuffer底层是一个char数组,但是该char数组是可变的并且可以自动扩容</p></li><li><p>StringBuffer 和 StringBuilder的默认初始化容量是16</p><ul><li>最好在创建 stringBuffer之前,预测 StringBuffer的存储字符数量</li></ul><ul><li><pre><code> 然后再创建 stringBuffer的时候采用指定初始化容量的方式创建StringBuffer</code></pre></li><li><pre><code> 为了减少底层数组的拷贝。提高效率</code></pre></li></ul></li><li><p>在使用字符串拼接时使用String类型会消耗很大内存，可以使用StringBuffer和StringBuilder来进行字符串的拼接</p></li><li><p>StringBuffer和StringBuilder的区别？</p><ul><li><pre><code> stringBuffer是线程安全的。(可以在多线程的环境下使用不会出现问题.)</code></pre></li><li><pre><code> stringBui1der是非线程安全的。(在多线程环境下使用可能出现问题.)</code></pre></li></ul></li></ol></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">            <span class="token comment" spellcheck="true">// 创建字符串缓冲区对象</span>            StringBuffer s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认初始化=16</span>            <span class="token comment" spellcheck="true">// 可以向StringBuffer中追加字符串</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sport"</span><span class="token punctuation">,</span><span class="token string">"PhysicalEducation"</span><span class="token punctuation">,</span><span class="token string">"Sleep"</span><span class="token punctuation">,</span><span class="token string">"Food"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》Sport,PhysicalEducation,Sleep,Food</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="StringBuffer和StringBuilder的区别"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—String类(31)</title>
      <link href="/posts/e67e1481.html"/>
      <url>/posts/e67e1481.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用类—String类"><a href="#常用类—String类" class="headerlink" title="常用类—String类"></a>常用类—String类</h1><blockquote><p>String类是<strong>不可变</strong>类，也就是说String对象声名后，将<strong>不可修改</strong></p></blockquote><ol><li><p>字符串一旦创建不可再改变，即：”abc”字符一旦创建不可在变成”abcd”<br>  注意：上面说的不可变，是指字符串不可变，但是引用可以重新指向其他字符串。</p></li><li><p>为了提升字符串的访问效率，在程序中使用了“缓存”技术，所以在Java中所有使用”双引号”<br>  括起来的字符串命令都会在”字符串常量池”中创建一份，字符串常量池在方法区中被存储。</p></li><li><p>使用String的时候我们应该注意的问题：尽量不要做字符串频繁的拼接操作，因为字符串一且创建不可改变，只要频繁拼接，就会在<strong>字符串常量池</strong>中创建大量的字符串对象，给垃圾回收带来问题。</p><p> 示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        String a1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String a2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上判断==>true，但是字符类型不推荐以上判断因为遇到以下判断就不是true了；</span>        String a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token operator">==</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上方法==>false，因为一旦创建对象后，引用对象地址指向了不同的内存地址所以不存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals()方法判断==>"</span><span class="token operator">+</span>a3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串常量池</span>        String b1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String b2<span class="token operator">=</span><span class="token string">"cba"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// b1首先会去字符串常量池中搜索是否存在abc，然后如果没有会在字符常量符中存储</span>        <span class="token comment" spellcheck="true">// b2首先会去字符串常量池中搜索是否存在abc，因为存在所以直接提取使用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token operator">+</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一般不推荐以上方法，因为字符串连接会大大降低字符串的"缓存"技术，因为因为字符串           // 一且创建不可改变，只要频繁拼接，就会在字符串常量池中创建大量的字符串对象，给垃</span>        <span class="token comment" spellcheck="true">//圾回收带来问题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以下代码会创建几个对象：</p><pre class="line-numbers language-java"><code class="language-java">    String b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   答：以上对象总共创建了三个对象，<strong>方法区字符串常用池：1个；堆内存: 2个</strong></p></li><li><p>String构造方法</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 字符串常用构造方法</span>        <span class="token comment" spellcheck="true">// 1.</span>        String a1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.</span>        String a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将字符类型转换成阿斯克码值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>abcd</span>        <span class="token comment" spellcheck="true">// 4.</span>        String a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>bc</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'国'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String a5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.</span>        String a6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a6<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串常用方法</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// String常用方法</span>        <span class="token comment" spellcheck="true">// 1. charAt(int index) 返回指定索引处的 char值。</span>        String q1 <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> q2 <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 中</span>        <span class="token comment" spellcheck="true">// 2. endsWith(String suffix) 测试此字符串是否以指定的后缀结尾。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> false</span>        <span class="token comment" spellcheck="true">// 3. indexOf(String str) 返回指定子字符串第一次出现的字符串中的索引。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abcJava"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 3</span>        <span class="token comment" spellcheck="true">// 4. equalsIgnoreCase(String anotherString) 将此String与另一个String比较，忽略了大小写。 如果两个字符串具有相同的长度并且两个字符串中的相应字符等于忽略大小写，则认为它们是相等的忽略大小写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 true</span>        <span class="token comment" spellcheck="true">// 5.  getBytes(String charsetName) 使用命名的字符集将此 String编码为字节序列，将结果存储到新的字节数组中。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q4 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q4<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回阿斯克码值：97 98 99 100</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 6. indexOf(int ch) 返回指定字符第一次出现的字符串中的索引。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.ClassTest.java"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 0</span>        <span class="token comment" spellcheck="true">// 7. lastIndexOf(int ch, int fromIndex) 返回指定字符最后一次出现的字符串中的索引，从指定的索引开始向后搜索。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.ClassTest.java"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 15</span>        <span class="token comment" spellcheck="true">// 8.  length() 返回此字符串的长度。</span>        <span class="token comment" spellcheck="true">// 注意：数组的length是属性，而字符类型的length()是方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"qwr"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>3</span>        <span class="token comment" spellcheck="true">// 9. replaceAll(String regex, String replacement) 将给定替换的给定 regular expression匹配的此字符串的每个子字符串替换。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.Class.Test.Animal.java"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> qwe.Class.Test.Animal.qwe</span>        <span class="token comment" spellcheck="true">// 10. split(String regex, int limit)</span>        String myTime <span class="token operator">=</span> <span class="token string">"2002,03,09"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> myTime2 <span class="token operator">=</span> myTime<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myTime2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myTime2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2002 03 09</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 11. startsWith(String prefix) 测试此字符串是否以指定的前缀开头。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"/abc/efg/hij/"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 true</span>        <span class="token comment" spellcheck="true">// 12.  substring(int beginIndex) 返回一个字符串，该字符串是此字符串的子字符串。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc//efg/hij/"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">/</span>efg<span class="token operator">/</span>hij<span class="token operator">/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc//efg/hij/"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">></span> efg        <span class="token comment" spellcheck="true">//13. toCharArray() 将此字符串转换为新的字符数组。</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c2 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ==> abcd</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 14. toUpperCase() 使用默认语言环境的规则将此 String所有字符转换为大写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ==> ABC</span>        <span class="token comment" spellcheck="true">// 15. toLowerCase() 使用默认语言环境的规则将此 String所有字符转换为小写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ==> abc</span>        <span class="token comment" spellcheck="true">// 16.  trim() 返回一个字符串，其值为此字符串，删除了所有前导和尾随空格，其中space被定义为其代码点小于或等于 'U+0020' （空格字符）的任何字符。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"    a   b   c     "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 17. valueOf(Object obj) 返回 Object参数的字符串表示形式。</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// java.lang.Object@3b6eb2ec内存地址</span>        Object o2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以下输出会不会报空指针异常？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会,因为并不是直接调用 tostring方法, string. valueof( Object)这个方法对空值进行处理了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 null</span>        <span class="token comment" spellcheck="true">// System.out.println(o2.toString()); // 会出现空指针异常：NullPointerException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays工具集(30)</title>
      <link href="/posts/5e6fc76a.html"/>
      <url>/posts/5e6fc76a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays工具集"><a href="#Arrays工具集" class="headerlink" title="Arrays工具集"></a>Arrays工具集</h1><blockquote><ul><li>Arrays是cun公司提供的一个工具集</li><li>该工具主要针对的是数组的操作</li><li>例如：排序/二分等…</li></ul></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二分查找</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12的下标为："</span><span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的常用算法(29)</title>
      <link href="/posts/6298d4a8.html"/>
      <url>/posts/6298d4a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的常用算法"><a href="#数组的常用算法" class="headerlink" title="数组的常用算法"></a>数组的常用算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 冒泡排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> a2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分法查找-折半查找"><a href="#二分法查找-折半查找" class="headerlink" title="二分法查找(折半查找)"></a>二分法查找(折半查找)</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开始下标</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束下标</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>begin<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 中间下标</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组(28)</title>
      <link href="/posts/a17b6fcd.html"/>
      <url>/posts/a17b6fcd.html</url>
      
        <content type="html"><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><ul><li><p>创建静态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历二维数组及二维数组的length的用法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的第一个一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的第一个一维数组中的元素</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二维数组中的一维数组中的第一个元素为："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的最后一个一维数组中的最后一个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个二维数组中的最后一个一维数组中的最后一个元素为："</span><span class="token operator">+</span>a1<span class="token punctuation">[</span>a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a1<span class="token punctuation">[</span>a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"```````````````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token comment" spellcheck="true">// 以下循环控制的是纵向</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下循环控制的是横向</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每次循环循环没个二维数组中的一维数组的每个元素</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历完一维数组后换行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li><p>创建动态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种创建一个动态数组方法：</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上创建的动态数组的意思是：每个二维数组最多创建二个一维数组</span>        <span class="token comment" spellcheck="true">//                         每个一维数组最多创建四个元素</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"```````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种创建一个动态数组方法：</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维数组(27)</title>
      <link href="/posts/a49053be.html"/>
      <url>/posts/a49053be.html</url>
      
        <content type="html"><![CDATA[<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><p>​    数组中存储元素的类型是统一的，每一个元素在内存中所占的空间大小是相同的，知道数组的首元素的内存地址，要查找的元素只知道下标就可以快速的计算出偏移量，通过首元素内存地址加上偏移量快速计算出要查找元素的内存地址，通过内存地址快速定位该元素，所以数组查找元素的效率较高随机的对数组进行增删元素，当增加的元素的时候，为了保证数组中元素在空间存储上是有序的，所以被添加元素位置后面的所有元素都要向后移动删除元素也是，后面所有的元素要向前移动。所以数组的增删元素的效率很低</p><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><ul><li>创建静态数组语法：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 声名一个int类型的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span>，<span class="token number">200</span>，<span class="token number">300</span>，<span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个boolean类型的数组</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">true</span>，<span class="token boolean">false</span>，<span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个String类型的数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> a3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"qqq"</span>，<span class="token string">"www"</span>，<span class="token string">"eee"</span>，<span class="token string">"rrr"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个byte类型的数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个char类型的数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span>，<span class="token string">'b'</span>，<span class="token string">'c'</span>，<span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个object类型的数组</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a6 <span class="token operator">=</span> <span class="token punctuation">{</span>o1，o2，o3，o4<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>遍历数组及数组的length的用法：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span>，<span class="token number">4</span>，<span class="token number">3</span>，<span class="token number">2</span>，<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组length的用法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中第一个元素为："</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>in<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中最后一个元素为："</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>in<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组的修改：</span>        in<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"````````````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组：</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>in<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组的元素依次为:"</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li>动态初始化一维数组，会先在堆内存中分配这个数组，并且数组中每一个元素都采用默认值。</li></ul><table><thead><tr><th align="center">数据类型</th><th align="center">数据类型</th><th align="center">数据类型</th><th>数据类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">short</td><td align="center">int</td><td>long</td><td align="center">0</td></tr><tr><td align="center">float</td><td align="center">double</td><td align="center"></td><td></td><td align="center">0.0</td></tr><tr><td align="center">boolean</td><td align="center"></td><td align="center"></td><td></td><td align="center">false</td></tr><tr><td align="center">引用类型</td><td align="center"></td><td align="center"></td><td></td><td align="center">null</td></tr></tbody></table><ul><li><p>创建动态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 动态声明一个int类型的数组，最多可以存储i个元素</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 赋值 例如上面声名i个则最多可以创建i个元素</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建对象动态数组：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建对象动态数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// a2[i].toString();</span>            <span class="token comment" spellcheck="true">// Exception in thread "main" java.lang.NullPointerException</span>            <span class="token comment" spellcheck="true">// 空指针异常</span>            Object o <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 使用a2[i].toString();与System.out.println(o);抛出异常的区别：             * 1.使用a2[i].toString();抛出空指针异常             * 2.System.out.println(o);直接抛出null是因为println()底层代码中有一个             * return (obj == null) ? "null" : obj.eoString();             * 所以使用第二种方法不会抛出Error             */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>什么时候使用动态初始化，什么时候使用静态初始化?</p><ol><li>无论是动态初始化还是静态初始化，最终的内存分布都是一样的。</li><li>如果在创建数组的时候，知道数组中应该存储什么数据，这个时候当然采用静态初始化方式，如果在创建数组的时候，无法预测到数组中存储什么数据，只是先开辟空间，则使用动态初始化方式。</li></ol></li><li><p>数组的拷贝</p><p>  语法：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>数据源<span class="token punctuation">,</span>源数组的开始下标<span class="token punctuation">,</span>目标数组<span class="token punctuation">,</span>目标数组的开始下标<span class="token punctuation">,</span>拷贝长度<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数据源是指拷贝的数据源，目标数组是指的是拷贝的指定数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.arraycopy(数据源,源数组的开始下标,目标数组,目标数组的开始下标,拷贝长度);</span>        <span class="token comment" spellcheck="true">// 数据源是指拷贝的数据源，目标数组是指的是拷贝的指定数组</span>         System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>dest<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常-方法的覆盖(26)</title>
      <link href="/posts/4cf7d7a5.html"/>
      <url>/posts/4cf7d7a5.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常-方法的覆盖"><a href="#异常-方法的覆盖" class="headerlink" title="异常-方法的覆盖"></a>异常-方法的覆盖</h1><blockquote><p>重写的方法不能比父类重写的方法更宽泛。</p></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法一(错误方法)</span><span class="token comment" spellcheck="true">/*public class ErrorTest06 {    public void m1() throws FileNotFoundException {        System.out.println("父类方法");    }}class a extends ErrorTest06 {    public void m1() throws IOException {        System.out.println("子类方法");    }    public static void main(String[] args) {        public static void main(String[] args) {            try {                m1();            }catch (FileNotFoundException e) {                e.printStackTrace();            }        }        //        // java: javase2.day02.javareview02.a中的m1()无法覆盖javase2.day02.javareview02.ErrorTest06中的m1()        // 被覆盖的方法未抛出java.io.IOException        //    }}*/</span><span class="token comment" spellcheck="true">// 方法二(正确方法)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token keyword">extends</span> <span class="token class-name">ErrorTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义异常(25)</title>
      <link href="/posts/842032b.html"/>
      <url>/posts/842032b.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>自定义异常通常继承于 Exception或 RuntimeException,到底继承那个应该看具体情况来定。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理继承图"></p><ol><li><p>编译时异常,直接继承 Exception。</p><blockquote><p> (Exception)编译时异常：</p><ul><li>程序正确，但因为外在的环境条件不满足引发。例如：用户错误及I/O问题—-程序试图打开一个并不存在的远程Socket端口。</li><li>这不是程序本身的逻辑错误，而很可能是远程机器名字错误(用户拼写错误)。对商用软件系统，程序开发者必须考虑并处理这个问题。</li><li>Java编译器强制要求处理这类异常，如果不捕获这类异常，程序将不能被编译。</li></ul></blockquote></li><li><p>运行时异常,直接继承 RuntimeException。</p></li></ol><blockquote><p>(RuntimeException)运行时异常：</p><ul><li> 这意味着程序存在bug，如数组越界，0被除，入参不满足规范…..这类异常需要更改程序来避免，Java编译器强制要求处理这类异常。</li></ul></blockquote><p>实例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest05</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 顾客相关的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalNameException  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 完成注册</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建异常对象</span>            IllegalNameException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalNameException</span><span class="token punctuation">(</span><span class="token string">"用户名位数不能少于7位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 手动抛出异常对象</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalNameException</span><span class="token punctuation">(</span><span class="token string">"用户名位数不能少于7位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            throw new IllegalNameException("用户名位数不能少于7位");</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 代码如果执行到这里，则用户名是合法的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册成功！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ErrorTest05Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟注册</span>        <span class="token comment" spellcheck="true">// 假如用户提供用户名如下</span>        String userName <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册</span>        ErrorTest05 s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorTest05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalNameException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IllegalNameException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 编译时异常</span><span class="token comment" spellcheck="true">//class IllegalNameException extends RuntimeException { // 运行时异常</span>    <span class="token comment" spellcheck="true">// 定义异常一般提供两个构造方法</span>    <span class="token keyword">public</span> <span class="token function">IllegalNameException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">IllegalNameException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final、 finalize和 finally(24)</title>
      <link href="/posts/27802474.html"/>
      <url>/posts/27802474.html</url>
      
        <content type="html"><![CDATA[<h1 id="final、-finalize和-finally区别"><a href="#final、-finalize和-finally区别" class="headerlink" title="final、 finalize和 finally区别"></a>final、 finalize和 finally区别</h1><h2 id="final：java中的关键字，修饰符。"><a href="#final：java中的关键字，修饰符。" class="headerlink" title="final：java中的关键字，修饰符。"></a>final：java中的关键字，修饰符。</h2><p>用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</p><h2 id="finalize：java的一种异常处理机制。"><a href="#finalize：java的一种异常处理机制。" class="headerlink" title="finalize：java的一种异常处理机制。"></a>finalize：java的一种异常处理机制。</h2><p>finalize()是在对象内存回收前被调用一次异常处理语句，属于异常处理语句结构的一部分，表示总是执行。</p><h2 id="finally：中的一个方法名。"><a href="#finally：中的一个方法名。" class="headerlink" title="finally：中的一个方法名。"></a>finally：中的一个方法名。</h2><p>Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档中的is-a、is-like-a、has-a(22)</title>
      <link href="/posts/3c26ee52.html"/>
      <url>/posts/3c26ee52.html</url>
      
        <content type="html"><![CDATA[<h1 id="文档中的is-a、is-like-a、has-a"><a href="#文档中的is-a、is-like-a、has-a" class="headerlink" title="文档中的is-a、is-like-a、has-a"></a>文档中的is-a、is-like-a、has-a</h1><h2 id="is-a"><a href="#is-a" class="headerlink" title="is-a"></a>is-a</h2><ul><li>指的是类与类之间的继承关系</li></ul><h2 id="is-like-a"><a href="#is-like-a" class="headerlink" title="is-like-a"></a>is-like-a</h2><ul><li>指的是接口与类之间的泛化关系(实现关系)</li></ul><h2 id="has-a"><a href="#has-a" class="headerlink" title="has-a"></a>has-a</h2><ul><li>指的是类与变量/方法之间的关联关系</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error异常信息(23)</title>
      <link href="/posts/72d577b3.html"/>
      <url>/posts/72d577b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Error异常信息"><a href="#Error异常信息" class="headerlink" title="Error异常信息"></a>Error异常信息</h1><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理"></p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><ol><li><p>作用：如果在构造方法声明位置上使用 throws(向上抛)，则谁被调用需要使用throws或者try catch。</p></li><li><p>注意：throws只能往上报但是不能解决根本问题</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 异常     * throws 和 try catch     * throws：     * 1.如果在构造方法声明位置上使用 throws(向上抛)则谁调用它谁就要解决这个问题或者继续往上抛出才可以运行，     * 2.严格意义上来说throws不能够解决error报错，throws只能网上报但是不能够解决根本问题     * try catch：     * 1.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C://txt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * FileInputstream构造方法声明位置上使用 throws(向上抛)        * java: 未报告的异常错误java.io.FileNotFoundException; 必须对其进行捕获或声明以便抛出        */</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以继续往下执行~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * 在程序运行过程中发生了 FilNotFoundException类型的异常        * JVM为我们创建了一个FilNotFoundException类型的对象        * 该对象中携带以下的信息。        * 负责将该对象的信息打印到控制台并且JVM停掉了程序的运行        *   Exception in thread "main" java.io.FileNotFoundException: C:\txt.txt (系统找不到指定的文件。)            at java.base/java.io.FileInputStream.open0(Native Method)            at java.base/java.io.FileInputStream.open(FileInputStream.java:219)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:157)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:112)            at javase2.day02.javareview02.ErrorTest01.m3(ErrorTest01.java:23)            at javase2.day02.javareview02.ErrorTest01.m2(ErrorTest01.java:20)            at javase2.day02.javareview02.ErrorTest01.m1(ErrorTest01.java:17)            at javase2.day02.javareview02.ErrorTest01.main(ErrorTest01.java:30)        */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><ol><li><p>catch可以写多个,但是必须从上到下,从小到大捕捉，不然会报异常。</p></li><li><p>如果在try语句块中首次出现异常则在try语句块中后面语句不在执行。</p></li><li><p>catch的参数变量中的Object的toString方法重写了，不是一个存储地址，而是一个字符串。</p></li><li><p>语法：</p></li></ol><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">try</span> <span class="token punctuation">{</span>      可能出现异常的代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>      处理异常代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>      处理异常代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//       情况一.</span>        <span class="token comment" spellcheck="true">/*try {            FileInputStream fis = new FileInputStream("abc");            // 以上FileInputStreamerror属于FileNotFoundException错误            fis.read();            // 以上fis.read()属于IOException错误            // 因为FileNotFoundException属于IOException的子类            // 如果解决一个问题则会报错：            // java: 未报告的异常错误java.io.IOException; 必须对其进行捕获或声明以便抛出        } catch (FileNotFoundException e) {            System.out.println("执行1111");        } catch (IOException e) {            System.out.println("执行2222");        }*/</span><span class="token comment" spellcheck="true">//       情况二.</span>        <span class="token comment" spellcheck="true">/*try {            FileInputStream fis = new FileInputStream("abc");            // 以上FileInputStreamerror属于FileNotFoundException错误            // 注意：FileNotFoundException属于IOException的子类            fis.read();            // 以上fis.read()属于IOException错误        } catch (IOException e) {            System.out.println("执行2222");        } catch (FileNotFoundException e) {            System.out.println("执行1111");        }*/</span>        <span class="token comment" spellcheck="true">/*         * 报错：java: 已捕获到异常错误java.io.FileNotFoundException         * catch只能从小(子类)到大(父类)处理异常         * 如果从大(父类)到小(子类)会报错         * */</span><span class="token comment" spellcheck="true">//       情况三.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在try语句块中首次出现异常则在try语句块中后面语句不在执行~</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行2222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 报错：java: 已捕获到异常错误java.io.FileNotFoundException         * catch只能从小(子类)到大(父类)处理异常         * 如果从大(父类)到小(子类)会报错         * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="throws与try-catch区别："><a href="#throws与try-catch区别：" class="headerlink" title="throws与try catch区别："></a>throws与try catch区别：</h2><ol><li>（throws）实际例子：小王是公司小职员因操作不当让公司赔了100W，则小王给项目经理报，而项目经理给部门经理报，部门经理给董事长报，董事长宣布公司破产。其中：部门经理知道后将此事一直未的到解决直到报给董事长（JVM）就相当于直接报给JVM虚拟机停止运行。</li><li>（try catch）实际例子：小王是公司小职员因操作不当让公司赔了100W，则小王给项目经理报，而项目经理知道后给部门经理报，部门经理知道后将此事解决了，则不需要往上级报了只需要继续工作即可。其中：部门经理知道后将此事解决就是try catch</li></ol><h2 id="getMessage-与-printStackTrace-方法"><a href="#getMessage-与-printStackTrace-方法" class="headerlink" title="getMessage() 与 printStackTrace()方法"></a>getMessage() 与 printStackTrace()方法</h2><ol><li><p>取得异常描述信息：getMessage()</p></li><li><p>取得异常的堆栈信息(<strong>比较适合于程序调试阶段</strong>)：printStackTrace()</p></li><li><p>代码示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c://txt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            * java.io.FileNotFoundException: c:\txt.txt (系统找不到指定的文件。)            at java.base/java.io.FileInputStream.open0(Native Method)            at java.base/java.io.FileInputStream.open(FileInputStream.java:219)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:157)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:112)            at javase2.day02.javareview02.ErrorTest03.main(ErrorTest03.java:10)            * */</span>            <span class="token comment" spellcheck="true">//以下输出的是上面printStackTrace错误信息的一部分</span>            String s <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c:\txt.txt (系统找不到指定的文件。)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Wrold！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="finllay语句块"><a href="#finllay语句块" class="headerlink" title="finllay语句块"></a>finllay语句块</h2><ol><li><p>finally语句块可以直接和try语句块联用。try… finally…</p></li><li><p>try…catch…finally…也可以</p></li><li><p>在finally语句块中的代码是一定会执行的</p></li><li><p>在实际开发应用场景：finally语句块是一定会执行的,所以通常在程序中为了保证某资源一定会释放，所以一般在finally语句块中释放资源。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 情况一</span>        <span class="token comment" spellcheck="true">/*try {            System.out.println("执行结果1~~");            return;        }finally {            System.out.println("执行结果2~~");        }*/</span>        <span class="token comment" spellcheck="true">/*         * 以上程序的执行顺序：         * 1. 先执行try语句块中的System         * 2. 在执行finally语句块中的System         * 3. 最后执行try语句块中的return结束main方法         * 注意：一旦出现return则该方法自动关闭，除特殊情况如：finally语句块         */</span>        <span class="token comment" spellcheck="true">// 情况二</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*以上程序的执行顺序：         * 1. 初始化i变量         * 2. 执行try语句中的i = 10 并将i变量存储给temp变量         * 3. return temp变量         * 4. 执行finally中的i++         */</span>        <span class="token comment" spellcheck="true">/*            int i = 0;            try{                i = 10;                int temp = i;                return temp;            }finally {                i++;            }        */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致自己的一封信</title>
      <link href="/posts/b585e161.html"/>
      <url>/posts/b585e161.html</url>
      
        <content type="html"><![CDATA[<h2 id="致自己的一封信"><a href="#致自己的一封信" class="headerlink" title="致自己的一封信"></a>致自己的一封信</h2><p>亲爱的：</p><p>你好！    </p><p>​      时光飞逝，转眼间，自己已即将步入大二了，即将成为一名临近毕业的大学生，想想上一次还在憧憬大学的美好生活而现在已经过了一半，二年后的现在的你非常感谢二年前的你，因为你在二年前的对编程的坚持不懈，对编程的不放弃，在高中后，对编程充满热爱的你，如愿以偿上到自己所热爱的专业：软件工程，所以再次，在这里，感谢你一直以来的坚持不懈！所以决定给在给自己迷茫、焦虑、找不到生活与学习方向时写一封信，谨此激励自己，不管如何，这里还是有些话想对你说：</p><ol><li><p>关于学业👨‍🎓</p><p>两年前你以一个极差的成绩进入到一所自己失望的大学，但是庆幸的是你痛下决心要接本，在这里想告诉你的是不要回头，坚持往前走，哪怕前路生无可恋这也是当初你自己选的路，都是成年人了要学会承担自己做的每个决定，这一路你可以哭、可以奔溃、但是绝不能回头。不论人生的任何时候，你都要一直努力和自律。不要因为一时的努力而感动了自己，这个世界上不缺乏努力的人，努力是生活的常态而不是一时的兴起。努力学习和自律成就更好的自己，在大学期间拿到更多的证书，得到更多的实习机会，成为更优秀的自己，不必太过于在意他人的目光，希望你要学会<strong>忍受孤独，因为能登上山顶的人很少</strong>。“努力奔跑是为了追上那个曾经被寄予厚望的自己。”<strong>愿你的成熟不是被迫，学着笑而不语，学着承认不相信，学着接受不尽人意。</strong>我知道，你是个急性子，但请慢慢来，不着急。</p></li><li><p>关于家人👨‍👧‍👦<br> 你一定要孝敬你的父母。因为有他们的存在你才有了现在的生活，他们辛勤的付出，只为你能拥有快乐幸福。不论身处何地都要与他们经常联系，与他们沟通交流，多多关心他们。不要等到在未来的一天，他们苍颜白发，你才想起他们的好，希望你永远的理解他们，他们把最好的都给我们，我也应当全力付出对他们好，他们和我血浓于水，所以一定要好好对待他们，可能有时候与父母会有一些分歧，但请你一定不要像以前那样不耐烦，学会体会他们对你爱的表达方式。</p></li><li><p>关于爱情👩‍❤‍👨</p><p> 知道你遇到几次挫败的爱情，但你要始终相信只是因为你没有遇到动心的女生。世界这么大，爱情之事就是可遇不可求。愿你经历过人间桑桑最后觉得世间一定会有一个值得自己去呵护爱护的女孩子，要知道任何一个优秀的人从来不缺优秀的追随者，这个时代不乏有许多优秀的女孩子，只是自己还没遇到而已，所以要努力、要优秀、要不负众望。</p></li><li><p>关于生活🌃</p><p> 我知道你一直是一个会照顾自己的人，但在这里还是要啰嗦几句：</p><p> <strong>作息</strong>：希望你在以后的日子里能够少熬夜，保持每天都在晚上11:00之前睡觉（除非特殊情况），一个好的睡眠不仅可以有效的解决你整个人的精神状态，还能提高自己学习的专注力。</p><p> <strong>生活</strong>：你Get到了一些技能，比如拿到了驾照，同时也开始记账，这在一定程度上还是帮助你节省了一些不必要的开支。也开始尝试着每天制定学习计划，这样让你以后学习中能够有明确地目标。</p><p> <strong>饮食</strong>：俗话说身体是革命的本钱，所以所有的基础都是在照顾好自己的基础上，我知道你是一个不喜欢吃早饭的人，但是在以后日子希望你能吃早饭，因为你不可以这么自私，你已经长大了，要知道以后父母还是需要你的，所以即使不为别人也要替自己父母想想，不要让他们担心你。</p><p> <strong>运动</strong>：知道你一直以来都是一个千年老宅男，但是有时候还是要出去运动运动，因为一个人的学习与事业是否成功的前提都是要有一个好的身体，所以即使自己在忙也要出去适当的运动运动。</p></li><li><p>关于兴趣爱好方面👨‍💻</p><p>编程：从高中时候你就对编程一发不可收拾，我知道你不仅对编程是热爱更是以后要从事的相关IT行业，所以，一定要对自己要求严格些，不能像以前那样毛毛躁躁，什么    HTML、JavaScript、Java都懂一点点基本的，你要开始学会静下心来从熟练一门语言再到另一门语言，我知道你一直以来都羡慕互联网大佬们所做的项目，但请你相信只要你坚持下来他们有的你也一定可以！！！</p><p>绘画、设计：一直以来你的绘画与设计都是背编程所耽误，主要原因是专接本以及编程事情比较多的原因，你一直没能静下心来好好绘画和设计、希望等你上岸后能慢慢拾起你的爱好。</p></li><li><p>关于性格🎯</p><p>一直以来你也算比较了解自己，曾经也问了很多人你这个人怎样？这个问题，所以二十多年来也相对来说比较了解自己在这里不妨我说一说：</p><p>做事太急躁，总想着快速到达自己想要的高度，但是有些事情不是你着急所有的就一下能完成，所以做事的时候多思考一步，分类汇总，然后把做事的标准明确好，确保每天都能把自己设定好的目标完成。</p><p>说话有时候不过脑子这个缺点其实你一直未曾改变，在这里引用一句《小窗幽记·集醒篇》所记的”多读两句书，少说一句话，读得两行书，说得几句话。“所以少说话，多读书才是你现在主要做的事情。</p><p>做成点作品太容易自傲：可以理解你现在的年纪太急于炫耀，但是还是时刻要谨记：天外有天人外有人，学会自谦。比你优秀的大佬多多了，所以时刻牢记。</p><p>打开某个软件打算做一件事经常性被其他事务所吸引，时刻提醒自己当前在做什么别轻易分心。</p><p>在做事情没有做完之前，一定不要轻易张扬出去。因为一旦没有成功，不但事情没有完成，还会让自己的同学和朋友取笑！所以时刻谨记先行，其言而后从之~~</p></li></ol><p>​      愿你在最无趣无力的日子仍对世界保持好奇，撑不住了就去睡一觉。等等再说，世界很大，随时都会绽放奇迹。生活无需向任何人知会，就把坏心情强加给我们，然后又自作主张的收起，抛给我们一天彩虹或阴云。但也教会我们认清一些无法辨明的人事，不再坚持和固执。宽宥人生，迷茫和努力的时间，考量了我们承受与隐忍的能力，生命也因此变得厚重。这也许就是“经历”的意义所在。只是错误的命题再怎么证明也不会对！</p><p>​      最后，愿你奋力拼搏，去感受世间百态，愿你内心平静而强大，活的恣意潇洒；愿你在这鲜活而张扬的年纪，坦言不枉此生。切记一点：不忘初心，方得始终。不觉写了这么多，希望你别把”它们“变成空话，未来是什么样的就交给未来的自己回答吧，但别忘了自己最初的梦想。</p><p>祝：</p><p>一生久安，岁月无扰！</p><p>2021年08月24日</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习/生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决git push 443超时</title>
      <link href="/posts/6204da2e.html"/>
      <url>/posts/6204da2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="解决git-push-pull-clone操作时的443错误-GitHub无法访问问题"><a href="#解决git-push-pull-clone操作时的443错误-GitHub无法访问问题" class="headerlink" title="解决git push/pull/clone操作时的443错误/GitHub无法访问问题"></a>解决git push/pull/clone操作时的443错误/GitHub无法访问问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近从学校回到家打算使用家里的台式机来学习，但是下载完<code>Git</code>时候，使用git push发现总是等待长时间之后会返回Failed to connect to github.com port 443: Operation timed out错误，然后全程懵逼，不管git push/pull还是git clone都是全程超时(一脸懵逼)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>经过这两天的搜索终于从网上搜索到几种办法，在这里记录下，同时也分享给需要的小伙伴：</p><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><p>这种情况是自己没有代理(科学上网)，可以使用UsbEAm Hosts Editor这款软件修改DNS地址选择最低的延迟从而达到可以访问GITHUB的目的(前提是<strong>Git没有设置代理！！！Git没有设置代理！！！Git没有设置代理！！！重要事情说三遍</strong>~ . ~，如果设置代理用下面命令行取消Git代理即可)</p><p>UsbEAm Hosts Editor<a href="https://www.dogfight360.com/blog/475/">下载地址</a></p><p>【附使用教程】UsbEAm Hosts Editor<a href="https://jingyan.baidu.com/article/eae07827e9bef65eec5485fc.html">使用教程</a></p><p>使用教程和以上教程类似，只需要选择Github即可，选择低延迟的DNS</p><p>修改完毕使用CMD命令 ipconfig /flushdns 刷新下本地DNS缓存数据 （需要管理员权限）</p><h3 id="情况二："><a href="#情况二：" class="headerlink" title="情况二："></a>情况二：</h3><p>这种情况与上面情况类似，但是不需要UsbEAm Hosts Editor软件,但是需要手动修改DNS</p><p><a href="https://juejin.cn/post/6844904193170341896">参考文档</a></p><h3 id="情况三："><a href="#情况三：" class="headerlink" title="情况三："></a>情况三：</h3><p>这种情况是自己有代理(科学上网)自己可以查询下本机的代理端口(不知道自己代理端口的建议谷歌搜索教程这里不再叙述了)，然后给Git设置代理端口如下命令：</p><blockquote><p>设置Git全局代理</p></blockquote><p>以下是设置socks端口命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global http.proxy 'socks5://127.0.0.1:1080' // 1080替换成自己本机socks的端口名git config --global https.proxy 'socks5://127.0.0.1:1080' // 1080替换成自己本机socks的端口名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是设置http/s端口命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global http.proxy 'http://127.0.0.1:1080' // 1080替换成自己本机http的端口名git config --global https.proxy 'http://127.0.0.1:1080' // 1080替换成自己本机https的端口名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是删除全局代理命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global --unset http.proxygit config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是查看全局是否设置代理(如果没设置则不显示)</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global --get http.proxygit config --global --get https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="总结：以上三种情况结合自身而定，有时候git-push-pull-clone不上去有可能是网络问题，可以试试换下网络是否可以使用。"><a href="#总结：以上三种情况结合自身而定，有时候git-push-pull-clone不上去有可能是网络问题，可以试试换下网络是否可以使用。" class="headerlink" title="总结：以上三种情况结合自身而定，有时候git push/pull/clone不上去有可能是网络问题，可以试试换下网络是否可以使用。"></a>总结：以上三种情况结合自身而定，有时候git push/pull/clone不上去有可能是网络问题，可以试试换下网络是否可以使用。</h3>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二上学期目标</title>
      <link href="/posts/86c777df.html"/>
      <url>/posts/86c777df.html</url>
      
        <content type="html"><![CDATA[<h1 id="大二上学期目标🏳️‍🌈"><a href="#大二上学期目标🏳️‍🌈" class="headerlink" title="大二上学期目标🏳️‍🌈"></a>大二上学期目标🏳️‍🌈</h1><h3 id="一-专业知识📘"><a href="#一-专业知识📘" class="headerlink" title="一. 专业知识📘"></a>一. 专业知识📘</h3><ol><li><p>JavaSE基础(147节课每天学5节课，30天学完) (9月份学完)</p></li><li><p>MySQL数据库 (10月份学完)</p><ul><li>Mysql</li><li>jdbc：Java语言连接数据库。（使用java语言对数据库中数据进行增删改查等操作。）</li></ul></li><li><p>JavaWeb和Web前端(10月学完)</p></li><li><p>JavaWeb后端</p></li></ol><ul><li>Servlet</li><li>JSP</li></ul><ol start="4"><li>Javaweb项目实战和SSM(11月份学完)<ol><li>Web前端<ul><li>HTML</li><li>CSS</li><li>JavaScript</li><li>AJAX</li><li>JQuery</li></ul></li><li>Javaweb项目实战 </li></ol><ul><li>基于Servlet + JSP + MySQL + JDBC + HTML + CSS + JavaScript + JQuery + AJAX能做一个Web项目。 </li></ul><ol start="3"><li>SSM框架</li></ol><ul><li>MyBatis</li><li>Spring</li><li>SpringMVC</li></ul><ol start="4"><li>SSH（有时间就学） </li><li>互联网分布式开发</li></ol></li><li>学习算法和刷力扣(12月学完)</li></ol><h3 id="二-专业知识📘"><a href="#二-专业知识📘" class="headerlink" title="二. 专业知识📘"></a>二. 专业知识📘</h3><ol><li><p>数学</p><ul><li><p>高数暑假班(线上班)</p></li><li><p>日常刷题</p></li><li><p>尚学：周六日上课</p></li></ul></li><li><p>英语：</p><ol><li><p>词汇：(每天必背)</p><ul><li>高中背完复习</li><li>日常单词20个/天</li></ul></li><li><p>语法：(待定)</p><ul><li><p>尚学：周六日上课</p></li><li><p>线上有课就学(看情况学)</p></li></ul></li></ol></li><li><p>微机原理与接口（含汇编语言）(10)</p><ul><li>学暑假班微机原理课程</li></ul></li><li><p>C语言(待定)</p><ol><li> C 语言程序的结构</li><li> 数据类型及其运算</li><li> 顺序结构程序设计</li><li> 选择结构程序设计</li><li> 循环结构程序设计</li><li> 数组</li><li> 函数</li><li> 预处理命令4</li><li> 指针</li><li> 结构体与共用体</li><li> 位运算</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习/生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和类之间的关系(21)</title>
      <link href="/posts/83141a13.html"/>
      <url>/posts/83141a13.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-类与类之间的关系"><a href="#Java-类与类之间的关系" class="headerlink" title="Java 类与类之间的关系"></a>Java 类与类之间的关系</h1><h2 id="一、继承关系"><a href="#一、继承关系" class="headerlink" title="一、继承关系"></a>一、继承关系</h2><p><strong>继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。</strong> 在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="继承关系"></p><h2 id="二、实现关系"><a href="#二、实现关系" class="headerlink" title="二、实现关系"></a>二、实现关系</h2><p><strong>实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。</strong> 在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png" alt="实现关系"></p><h2 id="三、依赖关系"><a href="#三、依赖关系" class="headerlink" title="三、依赖关系"></a>三、依赖关系</h2><p><strong>简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。</strong> 比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，为类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p><h2 id="四、关联关系"><a href="#四、关联关系" class="headerlink" title="四、关联关系"></a>四、关联关系</h2><p>关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。<strong>表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</strong> 在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="关联关系"></p><h2 id="五、聚合关系"><a href="#五、聚合关系" class="headerlink" title="五、聚合关系"></a>五、聚合关系</h2><p><strong>聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</strong> 比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="聚合关系"></p><h2 id="六、组合关系"><a href="#六、组合关系" class="headerlink" title="六、组合关系"></a>六、组合关系</h2><p><strong>组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，</strong> 比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="组合关系"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类总结(20)</title>
      <link href="/posts/d76d1ee1.html"/>
      <url>/posts/d76d1ee1.html</url>
      
        <content type="html"><![CDATA[<h1 id="内部类总结"><a href="#内部类总结" class="headerlink" title="内部类总结"></a>内部类总结</h1><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ol><li><p>概述：</p><ul><li>静态内部类可以等同看作静态方法/变量</li></ul></li><li><p>作用：</p><ul><li>静态内部类可以访问它的外部类中的私有属性和方法</li></ul></li><li><p>总结:</p><ul><li>静态内部类里面可以直接访问外部类的静态数据，但<strong>无法</strong>直接访问成员变量及方法</li><li>静态内部类可以添加修饰符public、protected、缺省</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name <span class="token operator">=</span> <span class="token string">"我是一个成员变量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String a1 <span class="token operator">=</span> <span class="token string">"我是一个静态常量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声名一个静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">static1</span><span class="token punctuation">{</span>        String c<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态内部类里面的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态内部类里面的成员方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态变量</span>            <span class="token comment" spellcheck="true">// System.out.println(name);   // 成员变量编译报错 --------> java: 无法从静态上下文中引用非静态 变量 name</span>            <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>            <span class="token comment" spellcheck="true">// sum(1,2); // 成员方法编译报错 --------> java: 无法从静态上下文中引用非静态 方法 sum(int,int)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StaticClass<span class="token punctuation">.</span>static1<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>        <span class="token comment" spellcheck="true">// StaticClass.static1.c2();   // 静态方法 --------> java: 无法从静态上下文中引用非静态 方法 c2()</span>        StaticClass<span class="token punctuation">.</span>static1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态内部类方法测试</span>        <span class="token comment" spellcheck="true">// 创建静态内部类</span>        StaticClass<span class="token punctuation">.</span>static1 e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticClass<span class="token punctuation">.</span>static1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>概述：</p><ul><li>成员内部类可以等同看作成员方法/变量</li></ul><p>作用：</p><ul><li>成员内部类可以访问它的外部类中的私有属性和方法</li></ul><p>总结：</p><ul><li>成员内部类可以直接访问外部类的所有属性和方法</li><li>成员内部类<strong>不可以有静态声名</strong>(包括所有含有static的关键字)</li><li>成员内部类可以添加修饰符public、protected、缺省</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MembersClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name <span class="token operator">=</span> <span class="token string">"我是一个成员变量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String a1 <span class="token operator">=</span> <span class="token string">"我是一个静态常量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声名一个成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">static1</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// public static int num = 10; // 静态变量编译报错： ---> 'static' 仅允许在常量变量声明中使用</span>        String c<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token comment" spellcheck="true">// 成员方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个成员内部类的成员方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量</span>            <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>            <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建外部类对象</span>        MembersClass e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembersClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MembersClass<span class="token punctuation">.</span>static1 e2 <span class="token operator">=</span> e1<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">static1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 测试</span>        e2<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"这是一个成员内部类的成员变量"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        e2<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>作用：</p><ul><li>局部内部类的使用保证全局方法和变量不会被污染从而运行出错</li></ul><p>总结：</p><ul><li>局部内部类只在当前方法中有效</li><li>在JDK8及以上版本中，可以不使用final修饰，但是也不可以二次赋值，如果局部变量被内部类访问，那么该局部变量相当于自动使用了final修饰</li><li>局部内部类中不能定义 static 成员</li><li>局部内部类中还可以包含内部类，但是这些内部类也不能使用访问控制修饰符（public、private 和 protected）和 static 修饰符修饰</li><li>在局部内部类中可以访问外部类的所有成员</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalClass</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">11000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">b1</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 外部方法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 外部方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// a = 100; // 编译报错 ----> java: 从内部类引用的本地变量必须是最终变量或实际上的最终变量</span>        b1 local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        local<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LocalClass localClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localClass<span class="token punctuation">.</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>概述：</p><ul><li>匿名内部类：其实就是一个匿名子类对象</li><li>格式：new 父类or接口（）{子类内容}</li></ul><p>总结：</p><ul><li>匿名内部类优点：可以少定义一个类</li></ul><ul><li>匿名内部类缺点：无法重复利用</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i</span><span class="token punctuation">(</span>a1 a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种方法：调用a2接口</span>        <span class="token function">i</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种方法：调用m1方法,可以使用匿名内部类</span>        <span class="token function">i</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接口</span><span class="token keyword">interface</span> <span class="token class-name">a1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种方法：实现a1接口</span><span class="token keyword">class</span> <span class="token class-name">a2</span> <span class="token keyword">implements</span> <span class="token class-name">a1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object中方法(19)</title>
      <link href="/posts/8fa6bab.html"/>
      <url>/posts/8fa6bab.html</url>
      
        <content type="html"><![CDATA[<h1 id="Object中方法"><a href="#Object中方法" class="headerlink" title="Object中方法"></a>Object中方法</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><ul><li>object中自带方法有(详见文档)</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/ObjectLang.png" alt="Object方法"></p><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><ol><li><p>返回该对象的字符串表示</p></li><li><p>有时候有的项目SUN公司给的方法不满足于项目需求所以需要重写SUN公司中的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToString</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">ToString</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写SUN公司中的Object.lang中的toString的方法</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"toStrimg"</span> <span class="token operator">+</span> <span class="token string">"[name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">",age： "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">class</span> <span class="token class-name">ToStringTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToString toString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToString</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-->toStrimg[name: 小王,age： 30]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="equals-Object-obj-方法"><a href="#equals-Object-obj-方法" class="headerlink" title="equals(Object obj)方法"></a>equals(Object obj)方法</h2><ol><li><p>指示其他某个对象是否与此对象“相等”。</p></li><li><p>object中的equals方法比较的是内存地址，而在现实的业务逻辑当中,不应该比较内存地址,应该比较内容，所以 Object中的 equals方法也要重写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Equals</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个身份证号</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个姓名</span>    <span class="token comment" spellcheck="true">// constructor</span>    <span class="token keyword">public</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Equals equals1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Equals equals2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>equals1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>equals2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串之间的比较</span>        String a1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1 <span class="token operator">==</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果使用“==”比较字符串返回  ---》 false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// equals方法在Object中比较的是两个内存地址是否相同</span>        <span class="token comment" spellcheck="true">// 但是在String中的equals在String中比较的是内容是否相同(String继承自Object)，</span>        <span class="token comment" spellcheck="true">// 说明String重写了父类(Object)中的equals方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前对象和要比较的对象的内存地址相同，则说明这两个对象是相同的（值也是相同的）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 因为形参中创建的Object中不含有id这个成员变量所以需要父(Object) -----> 子(Equals)向下转型</span>        <span class="token comment" spellcheck="true">// Equals默认继承于Object对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Equals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果这个对象属于Equals这个类</span>            Equals s <span class="token operator">=</span> <span class="token punctuation">(</span>Equals<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> s<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// s.name == this.name (关于字符串类型比较的不是内存地址而是字符串是否相同)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h2><ol><li><p>System.gc() 运行垃圾回收器。</p></li><li><p>finalize()当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalize</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写Object中的finalize方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建要给finalize方法</span>        <span class="token comment" spellcheck="true">// Finalize p = this;</span>        <span class="token comment" spellcheck="true">// 注意: 运行GC不一定回收可以将当前地址引用给其他堆内存中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"垃圾即将被回收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Finalize finalize1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        finalize1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：程序猿只能”建议“GC回收垃圾</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h2><ol><li><p>返回该对象的哈希码值。支持此方法是为了提高哈希表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashCode hashCode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回一个哈希值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCode1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库构成(01)</title>
      <link href="/posts/54faa8bc.html"/>
      <url>/posts/54faa8bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1节：数据库构成"><a href="#第1节：数据库构成" class="headerlink" title="第1节：数据库构成"></a>第1节：数据库构成</h1><ol><li><p>系统数据库<br> 系统数据库是指MySQL安装配置完成之后，系统自动创建的一些数据库。</p><blockquote><p>以下四种都是系统数据库：</p><ol><li>information_schema：主要存储系统中一些数据库对象信息，包括用户信息、字符集信息和分区信息等…</li><li>mysql：主要存储账户信息、权限信息、存储过程和时区信息等…</li><li>performance_schema：主要用于收集数据库服务器性能参数。</li><li>sys：该库通过视图的形式把<strong>information_schema</strong>和<strong>performance_schema</strong>结合起来，查询出更容易理解的数据，帮助DBA快速获取数据库系统的各种数据库的对象信息，使DBA和开发人员能够快速定位性能瓶颈。</li></ol></blockquote></li><li><p>用户数据库<br> 用户数据库是根据用户根据实际需求手动创建的数据库。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用命令(02)</title>
      <link href="/posts/77f55d43.html"/>
      <url>/posts/77f55d43.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2节：数据库常用命令"><a href="#第2节：数据库常用命令" class="headerlink" title="第2节：数据库常用命令"></a>第2节：数据库常用命令</h1><h4 id="常用数据库命令集："><a href="#常用数据库命令集：" class="headerlink" title="常用数据库命令集："></a>常用数据库命令集：</h4><h2 id="创建数据库命令："><a href="#创建数据库命令：" class="headerlink" title="创建数据库命令："></a>创建数据库命令：</h2><ol><li><strong>show databases;</strong><br><br> 查看所有数据库</li><li><strong>create database &lt;数据库名称&gt;;</strong><br><br> 创建数据库</li><li><strong>use &lt;数据库名称&gt;;</strong><br><br> 选择数据库</li><li><strong>drop database &lt;数据库名称&gt;;</strong><br><br> 删除数据库</li><li><strong>create table  &lt;表名&gt;</strong> ( <br><br> 属性名 数据类型 [完整性约束条件],<br><br> 属性名 数据类型 [完整性约束条件],<br><br> ……<br><br> 属性名 数据类型 [完整性约束条件]<br> );<br> 创建数据表格式</li><li>完整性约束条件表：</li></ol><table><thead><tr><th align="center">命令</th><th align="center">约束条件</th></tr></thead><tbody><tr><td align="center">primary key</td><td align="center">主键</td></tr><tr><td align="center">foreign key</td><td align="center">外键</td></tr><tr><td align="center">not null</td><td align="center">非空约束</td></tr><tr><td align="center">unique</td><td align="center">唯一性约束</td></tr><tr><td align="center">auto_increment</td><td align="center">自增</td></tr><tr><td align="center">default</td><td align="center">默认值</td></tr><tr><td align="center">unsigned</td><td align="center">无符号约束</td></tr></tbody></table><p>功能性解释：</p><table><thead><tr><th align="center">约束条件</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">primary key</td><td align="center">主键，也称主码，用于标识表中的唯一的一条记录。一张表中只能有一个主键，并且主键值不能为空。</td></tr><tr><td align="center">foreign key</td><td align="center">在关系数据库中数据表之间是由关系来联系彼此的，一张数据表中的某个字段可能是另外一张数据表中的主键 ，为这个字段设置外键约束，就可以将这两个表关联在一起。设置外键约束的主要作用是保证数据的完整性。</td></tr><tr><td align="center">not null</td><td align="center">设置非空约束的作用是在规定的字段值内不能为空，用户在向数据表中插入数据时，如果设置非空约束的字段没有指定值，系统就会报错。</td></tr><tr><td align="center">unique</td><td align="center">当数据表中某个字段不允许重复时，可以使用唯一性约束，当用户在设置了唯一性约束的字段中插入的数据与数据表中已存在的数据相同时，系统会报错。</td></tr><tr><td align="center">auto_increment</td><td align="center">在向数据表中插入数据时，如果用户希望每天记录的”编号”自动生成，并且按照顺序排列，可以为该字段添加自增约束。</td></tr><tr><td align="center">default</td><td align="center">当向数据表中插入一条数据时，如果没有为某个字段赋值，那么系统就会将其值设置为null，如果为字段设置默认约束，则系统将默认值(null)插入到此字段中。</td></tr><tr><td align="center">unsigned</td><td align="center">规定此列所存储的数据不为负数。</td></tr></tbody></table><ol><li><strong>describe &lt;表名&gt;;</strong><br> 查看表结构</li><li>show create table &lt;表名&gt; \g;<br><br> 查看建表语句</li><li>alter table &lt;旧表名&gt; rename &lt;新表名&gt;;<br><br> 修改表名</li><li>alter table &lt;表名&gt; modify &lt;字段名&gt; &lt;修改数据类型&gt;;<br><br> 修改字段类型</li><li>alter table &lt;表名&gt; change &lt;旧字段名&gt; &lt;新字段名&gt; &lt;此字段的数据类型&gt;;<br><br> 修改字段名</li><li>alter table &lt;表名&gt; add &lt;字段名&gt; &lt;数据类型&gt; &lt;完整性约束条件&gt;;<br><br> 在最后一条添加字段</li><li>alter table &lt;表名&gt; add &lt;字段名&gt; &lt;数据类型&gt; &lt;完整性约束条件&gt; first;<br><br> 在第一行添加字段</li><li>alter table &lt;表名&gt; add &lt;字段名&gt; &lt;数据类型&gt; &lt;完整性约束条件&gt; after &lt;在这个字段之后添加，这里添加字段名&gt;;<br><br> 在指定字段后面添加字段</li><li>alter table &lt;表名&gt; drop &lt;字段名&gt;;<br><br> 删除字段</li><li>alter table &lt;表名&gt; modify &lt;想移动字段名称&gt; &lt;字段数据类型&gt; first;<br><br>移动字段到第一行</li><li>alter table &lt;表名&gt; modify &lt;想移动字段名称&gt; &lt;字段数据类型&gt; after &lt;在这个字段之后添加，这里添加字段名&gt;;<br><br>移动到指定字段之后</li><li>drop table &lt;表名1&gt;,&lt;表名2&gt;,&lt;表名3&gt; ………………..;<br><br>删除没有被关联的表，这里可以一次选多个，也可以选一个</li><li>alter table &lt;表名&gt; drop foreign key &lt;外键名称&gt;;<br><br>删除外键<br><br>如果数据表之间存在外键关联，那么直接删除主表，系统会提示错误信息，这种情况下，需要先删除与它关联的其他的表，在删除主表</li></ol><hr><h2 id="插入数据命令："><a href="#插入数据命令：" class="headerlink" title="插入数据命令："></a>插入数据命令：</h2><ol><li><p>insert into &lt;表名&gt; values (“数据值1”,”数据值2”,”数据值3”,”数据值4”,   ……);<br><br> 不指定具体字段名插入数据</p></li><li><p>insert into &lt;表名&gt; ( 字段名1,字段名2,字段名3,字段名4, …….)<br> values (“数据值1”,”数据值2”,”数据值3”,”数据值4”,   ……),<br>  (“数据值1”,”数据值2”,”数据值3”,”数据值4”,   ……);<br><br> 列出所有字段插入数据，注：上面的字段与下面插入的数据要一一对应</p></li><li><p>insert into &lt;表名&gt; ( 字段名1,字段名2,字段名3,字段名4, …….)<br> values (“数据值1”,”数据值2”,”数据值3”,”数据值4”,   ……),<br>  (“数据值1”,”数据值2”,”数据值3”,”数据值4”,   ……);<br><br> 指定表中字段插入数据&lt;上面字段名可以用户自己指定插入什么数据&gt;</p></li><li><p>insert into &lt;表名1&gt; (字段名1,字段名2,字段名3,字段名4, …….)<br> select ( 字段名1,字段名2,字段名3,字段名4, …….) from &lt;表名2&gt;;<br><br> 将表名2中的数据插入到表名1中的指定字段中去<br> 将其他表中的数据插入到表中</p></li><li><p>update &lt;表名&gt;<br> set &lt;字段名1&gt;=&lt;要修改成指定的数据&gt;,&lt;字段名2&gt;=&lt;要修改成指定的数据&gt; … ;<br><br> 例：update goods set id=0,name=’小明’;<br><br> 修改指定字段所有数据 注：此指令是将所有符合此字段的所有值修改成统一值</p></li><li><p>update &lt;表名&gt;<br> set &lt;字段名1&gt;=&lt;要修改成指定的数据&gt;,&lt;字段名2&gt;=&lt;要修改成指定的数据&gt; …<br> where &lt;指定范围的条件&gt;;<br></p><p> 例如：update goods<br> set id=0,price=20.0 where type=’书籍’;</p><p> 上面的意思是：将goods表中字段书籍中的一天数据中的id等于0，price(价格)等于20.0<br> 修改指定的数据</p></li><li><p>delete from &lt;表名&gt;;<br><br> 删除所有数据</p></li><li><p>delete from &lt;表名&gt; where &lt;指定范围的条件&gt;;<br><br> 例如：delete from goods where id&gt;3;<br> 上面的意思是删除goods表中id&gt;3的数据<br> 删除指定数据</p></li></ol><hr><h2 id="查询数据命令："><a href="#查询数据命令：" class="headerlink" title="查询数据命令："></a>查询数据命令：</h2><ol><li>select * from &lt;表名&gt;;<br>查询所有字段数据</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt;;<br>例如：select name,id from goods;<br><br> 上面的意思是查询goods表中name和id字段的数据<br>   查询指定字段数据</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;指定范围的条件&gt;;<br><br> 例如：select * from goods where id=3;<br><br> 上面的意思是查询goods表中id等于3的数据<br> 查询指定记录</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;指定范围的条件1&gt; and  &lt;指定范围的条件2&gt;;<br>例如：select * from goods id=3 and price&gt;30;<br><br> 上面的意思是查询goods表中id=3且price(价格)大于30的数据<br> and关键字查询，需要符合所有条件才可以返回</li><li>select &lt;乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;指定范围的条件1&gt; or  &lt;指定范围的条件2&gt;;<br>例如：select * from goods id=3 or price&gt;30;<br><br> 上面的意思是查询goods表中id=3或者price(价格)大于30的数据<br> or关键字查询，只需要符合所有条件中的一个条件就可以返回</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;字段名&gt; in (值1,值2,值3…….);<br>例如：select * from goods id in (1,3);<br><br> 上面的意思是查询goods表中id值为1和3的数据<br><br> in关键字查询，指定集合包括在括号中，值与值之间用括号分隔开</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;字段名&gt; is null;<br>例如：select * from goods where price is null;<br><br> 上面的意思是查询goods表中price(价格)为null的数据<br><br> 查询空值</li><li>select distinct &lt;字段名&gt; from &lt;表名&gt;;<br><br> 查询结果不重复</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;字段名&gt; between &lt;值1&gt; and &lt;值2&gt;;<br> <br>例如：select name,price from goods where id between 2.5 and 20;<br><br> 上面的意思是查询goods表中price(价格)2.5到30块钱的数据并且只显示商品名称和价格<br><br>   范围查询</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; where &lt;字段名&gt; like ‘%值1%’;<br>例如：select * from goods where name like ‘%糖%’;<br><br>上面的意思是查询goods表中name(商品名称)含有糖的所有数据<br><br>模糊查询<br><br><strong>通配符：</strong><br><br>‘%’：指可以匹配任何长度的字符，可以是1个也可以是多个<br><br>‘_’：指可以出现在匹配字符的任意位置，并且可以匹配任意数目的字符</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; order by 字段名1,字段名2 …..;<br>例如：select * from goods order by id,num;<br>上面的意思是查询goods表中num与id升序查询<br>排序查询</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; order by 字段名1 desc,字段名2;<br><br>例如：select * from goods order by id,desc,price;<br><br>上面的意思是查询goods表中id字段和price(价格)字段查询<br><br>降序查询(以上是多字符查询，如果只让一个字符降序查询那就直接desc后面加分号即可)</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt; from &lt;表名&gt; limit 起始位置,查询总记录条数;<br><br>例如：select * from goods limit 0,3;<br><br>上面的意思是查询goods表中从第一条查询(数据库默认是从0开始计算的),总共查询出来3条<br><br>限制结果查询</li></ol><h2 id="聚合函数和分组数据记录查询"><a href="#聚合函数和分组数据记录查询" class="headerlink" title="聚合函数和分组数据记录查询"></a>聚合函数和分组数据记录查询</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><h4 id="概括："><a href="#概括：" class="headerlink" title="概括："></a>概括：</h4><ol><li>count()函数计算表中的条数</li><li>sum()函数计算字段值的总和</li><li>avg()函数计算字段值的平均值</li><li>max()函数查询表中字段值的最大值</li><li>min()函数查询表中字段值的最小值</li><li>group_concat()函数显示每种类型包含的商品名称都显示出来</li></ol><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><ol><li>select count(乘号 || 返回记录条数) from 表名;<br><br> 查询表中的条数</li><li>select sum(字段名) from 表名;<br><br> 查询字段值的总和</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt;,avg(字段名) from 表中 group by 分组规则;<br><br> 例如：select type,avg(price) from goods group by type;<br><br> 上面的意思是查询goods表中价格的平均值，只显示type(闪频名称)与平均值，使用type进行分组<br><br> <strong>group by</strong>的意思是用于分组查询</li><li>select max(字段名) from 表名;<br><br> 查询表中字段值的最大值</li><li>select min(字段名) from 表名;<br><br> 查询表中字段值的最小值</li></ol><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ol><li>select &lt; 乘号 || 字段名1,字段名2…….&gt;,聚合函数 from 表名 group by 分组规则;<br>分组查询<br><br> 例如：select type,group_concat(name) from goods group by type;<br><br> 上面的意思是查询goods表中每种<strong>类型</strong>的<strong>商品名称</strong>都显示出来</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt;,聚合函数 from 表名 group by 分组规则 having 过滤规则(可以使用函数来过滤);<br>使用having过滤分组后的数据<br><br> select type,count(<strong>乘号表所有</strong>) from goods group by type having count(<strong>乘号表所有</strong>)&gt;1;<br><br> 上面的意思是将goods表中的记录按照type字段分组并统计每组的数量，(having count(<strong>乘号表所有</strong>)&gt;1)然后只取商品数量大于1的分组</li><li>select &lt; 乘号 || 字段名1,字段名2…….&gt;,聚合函数 from 表名 group by 分组规则1,分组规则2…;<br><br> 使用多个字段进行分组<br><br> 例如：select type,group_concat(name),count(name) from goods group by type,num;<br><br> 上面的意思是将goods表中的记录按照type和num字段进行分组并统计</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据类型(03)</title>
      <link href="/posts/56ca3202.html"/>
      <url>/posts/56ca3202.html</url>
      
        <content type="html"><![CDATA[<h1 id="第3节：数据类型"><a href="#第3节：数据类型" class="headerlink" title="第3节：数据类型"></a>第3节：数据类型</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>mysql支持所有标准sql数值数据类型。  这些类型包括严格数值数据类型(integer、smallint、decimal和numeric)，以及近似数值数据类型(float、real和double precision)。  关键字int是integer的同义词，关键字dec是decimal的同义词。  bit数据类型保存位字段值，并且支持myisam、memory、innodb和bdb表。  作为sql标准的扩展，mysql也支持整数类型tinyint、mediumint和bigint。下面的表显示了需要的每个整数类型的存储和范围。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/mysql.png" alt="数值类型"></p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为datetime、date、timestamp、time和year。每个时间类型有一个有效值范围和一个”零”值，当指定不合法的mysql不能表示的值时使用”零”值。timestamp类型有专有的自动更新特性，将在后面描述。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2.png" alt="日期和时间类型"></p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指char、varchar、binary、varbinary、blob、text、enum和set。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210520230802.png" alt="字符串类型"></p><p>注意：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 char(30) 就可以存储 30 个字符。<br>char 和 varchar 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。<br>binary 和 varbinary 类似于 char 和 varchar，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。<br>blob 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 blob 类型：tinyblob、blob、mediumblob 和 longblob。它们区别在于可容纳存储范围不同。<br>有 4 种 text 类型：tinytext、text、mediumtext 和 longtext。对应的这 4 种 blob 类型，可存储的最大长度不同，可根据实际情况选择。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装及配置(01)</title>
      <link href="/posts/161b8ec9.html"/>
      <url>/posts/161b8ec9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git安装及配置"><a href="#Git安装及配置" class="headerlink" title="Git安装及配置"></a>Git安装及配置</h1><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Git_picture.jpg"></p><h2 id="Git概述："><a href="#Git概述：" class="headerlink" title="Git概述："></a>Git概述：</h2><p>​    Git是一个分布式开发的软件，它是由多人协作共同完成一个项目的软件，同时<strong>Github</strong>也是一个全球最大的开源社区，拥有着丰富的开源项目资源。</p><h2 id="Git个人用处："><a href="#Git个人用处：" class="headerlink" title="Git个人用处："></a>Git个人用处：</h2><ol><li>学会Git以后可以在任何地方，直接调用自己写的Code。</li><li>同时如果后期需要多人开发也可以直接协同开发，不需要后期在学了。</li><li><strong>github</strong>上拥有众多的开源项目，可以自己学习以及实践一些项目。</li></ol><h2 id="GIt安装："><a href="#GIt安装：" class="headerlink" title="GIt安装："></a>GIt安装：</h2><ol><li>安装Git可以直接去官网下载，也可以直接从软件管家中下载。</li><li>安装完毕，直接点击安装Next即可。（ps：我也不懂英文）…</li></ol><h2 id="Git基本配置"><a href="#Git基本配置" class="headerlink" title="Git基本配置"></a>Git基本配置</h2><ol><li><p>新建一个项目，右击点击该项目的文件夹，点击Git Bash Here。</p></li><li><p>新电脑初次打开需要配置Git的邮箱和用户名，用于Git识别此电脑身份。</p></li><li><p>配置邮箱和用户名。</p><ul><li>git config –global user.name ‘用户名称’<br>  设置用户名</li><li>git config –global user.email ‘登录邮箱’<br>  设置邮箱</li><li>git config user.name<br>  查看已用户名</li><li>git config user.email<br>  查看已邮箱</li><li>git config –list<br>  查看Git设置列表</li></ul></li><li><p>配置公私钥</p><ol><li><p>生成密钥命令：</p><p> ssh-keygen -t rsa -C “邮箱@qq.com”<br> 生成公钥</p><p> cat ~/.ssh/id_rsa.pub<br> 查看公钥</p></li><li><p><strong>公钥的作用：</strong></p><p> 很多服务器都是需要认证的，ssh认证是其中的一种。在客户端生成公钥，把生成的公钥添加到服务器，你以后连接服务器就不用每次都输入用户名和密码了。</p><p> 很多git服务器都是用ssh认证方式，你需要把你生成的公钥发送给代码仓库管理员，让他给你添加到服务器上，你就可以通过ssh自由的拉取和提交代码了。</p></li><li><p>配置公/私钥<br> 输入 ssh-keygen -t rsa -C “上面配置的邮箱”执行这条命令会提示文件保存路径，可以直接按Enter，然后提示输入 passphrase（密码），输入两次（可以不输直接按两次Enter），然后会在 .ssh 目录生产两个文件：id_rsa和id_rsa.pub用记事本打开.ssh目录下的id_rsa.pub公钥文件，复制里面的内容；也可以直接在git中输入<strong>cat ~/.ssh/id_rsa.pub</strong>直接查看公钥。</p></li></ol></li><li><p>复制公钥，打开<strong>Github</strong>或者<strong>码云</strong>配置相应的公钥匙。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用(02)</title>
      <link href="/posts/94e2c847.html"/>
      <url>/posts/94e2c847.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基本使用"><a href="#Git基本使用" class="headerlink" title="Git基本使用"></a>Git基本使用</h1><h3 id="个人日常Git的基本使用"><a href="#个人日常Git的基本使用" class="headerlink" title="个人日常Git的基本使用"></a>个人日常Git的基本使用</h3><h3 id="Git之间的关系："><a href="#Git之间的关系：" class="headerlink" title="Git之间的关系："></a>Git之间的关系：</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/1780672-20200222211257892-559749381.png"></p><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><ol><li><p>在<strong>git客户端</strong>或者<strong>CMD命令行</strong>上执行,我们通过命令行进入本地项目目录下，然后执行执行下面的命令，<strong>或</strong>创建已新建好的项目文件，然后再执行下右击项目文件点击打开Git Bash Here，然后执行下面的命令。</p><blockquote><p>git init    初始化git仓库</p><p>(如果发现此项目文件夹下出现一个git的文件<strong>隐藏文件夹</strong>就说明初始化成功了)</p></blockquote></li><li><p>与github仓库连接。</p><blockquote><p>继续在git gash或者CMD命令行上执行以下命令：</p><p>git remote add origin&lt;github/码云项目sh地址&gt;</p><p>(一般这个命令执行成功以后本地仓库的项目便已经同远端仓库的项目保持同步了。不妨登录github/码云上查看)</p></blockquote><p> <strong>注意：前提github/码云</strong>上已经创建远程仓库。</p></li></ol><h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><ul><li>找到你刚才在记录下的远端仓库的地址,或者再次登录以下界面去复制远端仓库地址;</li></ul><blockquote><p>然后执行一下命令行:</p><p>git clone&lt;项目ssh地址&gt;</p><p><strong>注意：使用cmd/git打开使用gitclone，建议已经创建好项目文件或者cmd中已经到本地项目文件地址。</strong></p></blockquote><h2 id="提交文件到暂存区、本地仓库"><a href="#提交文件到暂存区、本地仓库" class="headerlink" title="提交文件到暂存区、本地仓库"></a>提交文件到暂存区、本地仓库</h2><ul><li>将上述步骤完成以后,我们便可以初步使用git了。可以执行以下命令：</li></ul><blockquote><p>git add -u</p><p>将文件的修改、文件的删除，添加到暂存区。<br>git add .</p><p>将文件的修改，文件的新建，添加到暂存区。<br>git add -A</p><p>将文件的修改，文件的删除，文件的新建，添加到暂存区。</p><p><strong>建议使用git add -Ajiany命令</strong></p></blockquote><blockquote><p>git commit 无法退出</p><p>　　i 插入文字的命令。窗口最一开始打开时是不能输入的。按一下 i 就可以开始输入我们的提交信息啦！</p><p>　　输入完了怎么保存退出呢？</p><p>　　先按一下Esc，退出输入状态。</p><p>　　w 保存命令。将我们输入的提交信息保存。保存完之后，</p><p>　　q 退出窗口。就回到我们最开始的命令界面啦。</p><p>git commit -m “提交信息”</p><p><strong>建议使用git commit -m “提交信息”命令</strong></p></blockquote><blockquote><p>git status</p><p>查看<strong>文件/文件夹在工作区，暂存区</strong>的状态</p></blockquote><h2 id="将本地仓库代码提交到github-码云上"><a href="#将本地仓库代码提交到github-码云上" class="headerlink" title="将本地仓库代码提交到github/码云上"></a>将本地仓库代码提交到github/码云上</h2><ul><li>提交代码命令：</li></ul><blockquote><p>git pull origin main<br>拉取到本地main(主分支)</p><p>git push origin main<br>推送到远程仓库main(主分支)</p><p>git pull</p><p>拉取远程仓库代码到本地</p><p>git push</p><p>将本地仓库推送到远程仓库</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本常用命令集(03)</title>
      <link href="/posts/e80658dd.html"/>
      <url>/posts/e80658dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基本常用命令集"><a href="#Git基本常用命令集" class="headerlink" title="Git基本常用命令集"></a>Git基本常用命令集</h1><h2 id="基本常用命令："><a href="#基本常用命令：" class="headerlink" title="基本常用命令："></a>基本常用命令：</h2><p>git init    初始化git仓库</p><p>如果第一次与仓库连接使用以下命令：</p><ol><li>git remote add origin &lt;github远程仓库地址&gt; 将本地仓库与远程仓库连接</li><li> git branch -M main 将主分支名称master修改为main</li><li>git push -u origin main  推送远程仓库</li></ol><p>本地仓库命令：</p><ol><li><p>将所有文件添加到暂存区<br> git add .    </p></li><li><p>提交到本地仓库<br> git commit -m “提交信息”    </p></li><li><p>推送到远程仓库<br> git push</p></li></ol><p>克隆仓库命令：</p><ol><li>克隆当前仓库：<br> git clone &lt;项目ssh地址&gt;    </li><li>克隆所有仓库：<br> 待学习…</li></ol><h2 id="分支常用命令："><a href="#分支常用命令：" class="headerlink" title="分支常用命令："></a>分支常用命令：</h2><ol><li>切换分支 git checkout 分支名</li><li>删除分支 git branch -d 分支名</li><li>查看本地分支 git branch</li><li>查看远程分支 git branch -a</li><li>创建分支 git branch 分支名</li><li>创建+切换分支 git checkout -b</li><li>删除分支 git breach -d 分支名</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git bash 常用命令(05)</title>
      <link href="/posts/bdcfb600.html"/>
      <url>/posts/bdcfb600.html</url>
      
        <content type="html"><![CDATA[<h1 id="git-bash-常用命令"><a href="#git-bash-常用命令" class="headerlink" title="git bash 常用命令"></a>git bash 常用命令</h1><ol><li>cd : change directory的简写，改变目录的意思，就是切换到哪个目录下， 如 cd e:\fff  切换 E 盘下面的fff 目录。<br> 当我们用cd 进入文件夹时,我们可以使用 通配符*, cd f*,  如果E盘下只有一个f开头的文件夹,它就会进入到这个文件夹.</li><li>cd .. 回退到上一个目录。我们在写js,或css时，我们引入文件时，.. 表示的就是上一个目录, 所以 cd .. 回退到上一个目录就很好理解了。注意，cd 和两个点点..之间有一个空格,  </li><li>pwd : print working directory, 打印工作目录，它会显示我们当前所在的目录路径。</li><li>ls: list, 列出当前目录中的所有文件，   只不过ll(两个ll)列出的内容更为详细。</li><li>touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</li><li>rm:  删除一个文件, rm index.js 就会把index.js文件删除.</li><li>mkdir: 新建一个目录,就是新建一个文件夹. 如mkdir src 新建src 文件夹.</li><li>rm -r :  删除一个文件夹， r (recusive 是递归的意思)， 删除用的就是递归，先删除文件夹里面的内容，再删除文件夹。 rm -r src 删除src目录。 </li><li>mv 移动文件, mv index.html src  index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下.</li><li>reset 清屏，把git bash命令窗口中的所有内容清空。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github实用小技巧(04)</title>
      <link href="/posts/93839e01.html"/>
      <url>/posts/93839e01.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github实用小技巧"><a href="#Github实用小技巧" class="headerlink" title="Github实用小技巧"></a>Github实用小技巧</h1><ol><li>使用技巧<ul><li>例如github网址：<a href="https://github.com/Xrebirth/JavaExercise">https://github.com/Xrebirth/JavaExercise</a><br>  在<a href="https://github后面加上1s会变成vscode界面/">https://github后面加上1s会变成vscode界面</a><br>  修改后效果：<a href="https://github1s.com/Xrebirth/JavaExercise">https://github1s.com/Xrebirth/JavaExercise</a><br>  缺点：必须开科学上网才可以访问到。</li></ul></li><li>使用技巧<ul><li><code>待更新...</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(01)</title>
      <link href="/posts/8e57d0cc.html"/>
      <url>/posts/8e57d0cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li>项目名全部小写(小驼峰)</li><li>包名全部小写(小驼峰)</li><li>类名首字母大写(大驼峰)，如果类名由多个单词组成，每个单词的首字母都要大写。<br> 如：public class MyFirstClass{}</li><li>变量名、方法名首字母小写(小驼峰)，如果名称由多个单词组成，每个单词的首字母都要大写。<br> 如：int index=0;<br> public void toString(){}</li><li>常量名全部大写<br> 如：public static final String GAME_COLOR=”RED”;</li><li>所有命名规则必须遵循以下规则：<ul><li>名称只能由字母、数字、下划线、$符号组成</li><li>不能以数字开头</li><li>名称不能使用JAVA中的关键字。</li><li>坚决不允许出现中文及拼音命名。</li></ul></li></ol><h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><ol><li><p><strong>类注释</strong></p><p> 在每个类前面必须加上类注释，注释模板如下：</p><p> /**</p><p> * Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</p><p> * FileName: Test.java</p><p> * 类的详细说明</p><p> *</p><p> * @author 类创建者姓名<br>   * @Date  创建日期</p><p> * @version 1.00</p><p> */</p></li><li><p><strong>属性注释</strong></p><p> 在每个属性前面必须加上属性注释，注释模板如下：</p><p> /** 提示信息 */</p><p> private String strMsg = null;</p></li><li><p><em>方法注释</em>*</p><p> 在每个方法前面必须加上方法注释，注释模板如下：</p><p> /**</p><p> * 类方法的详细使用说明</p><p> *</p><p> * @param 参数1 参数1的使用说明</p><p> * @return 返回结果的说明</p><p> * @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p><p> */</p></li><li><p><strong>构造方法注释</strong></p><p> 在每个构造方法前面必须加上注释，注释模板如下：</p><p> /**</p><p> * 构造方法的详细使用说明</p><p> *</p><p> * @param 参数1 参数1的使用说明</p><p> * @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p><p> */ </p></li><li><p><strong>方法内部注释</strong></p><p> 在方法内部使用单行或者多行注释，该注释根据实际情况添加。</p><p> 如：//背景颜色</p><p> ​    Color bgColor = Color.RED</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package、import的使用(13)</title>
      <link href="/posts/26da222b.html"/>
      <url>/posts/26da222b.html</url>
      
        <content type="html"><![CDATA[<h1 id="package、import的使用"><a href="#package、import的使用" class="headerlink" title="package、import的使用"></a>package、import的使用</h1><h4 id="关于Java语言当中的包机制"><a href="#关于Java语言当中的包机制" class="headerlink" title="关于Java语言当中的包机制"></a>关于Java语言当中的包机制</h4><ol><li><p>包又称为 <code>package</code>，Java中引入 <code>package</code>这种语法机制主要是为了方便程序的管理<br> 不同功能的类被分门别类放到不同的软件包当中,查找比较方便,管理比较方便,易维护</p></li><li><p>定义 package</p><ul><li><p>在Java源程序的第一行上编写package语句。</p></li><li><p>package只能编写一个语句。</p></li><li><p>语法结构:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 包名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>包名的命名规范:</p><ul><li><p>公司域名倒序+项目名+模块名+功能名;</p></li><li><p>采用这种方式重名的几率较低。因为公司域名具有全球唯一性</p></li><li><p>例如：</p><blockquote><p>com.bjpowernode.oauser.service;<br>org.apache.tomcat.core;</p></blockquote></li></ul></li><li><p>包名要求全部小写,包名也是标识符,必须遵守标识符的命名规则</p></li><li><p>一个包将来对应的是一个目录</p></li><li><p>使用package手动编译及运行Java：</p><ul><li><p>使用<code>package</code>机制之后，类名不在是原来的类名了，类名会变成java文件中定义的<code>package</code>路径</p></li><li><p>编译：javac java源文件路径 (在硬盘上生成一个class文件)</p></li><li><p>手动方式创建Java的package设置的目录，将java字节码文件放到java设置的package目录</p></li><li><p>运行：Java package路径</p></li><li><p>另一种方式(编译+运行)</p><ul><li><p>编译：</p><p>  javac -d 编译之后存放的路径 java源文件路径</p></li><li><p>例如：将F:\Hello World.java文件编译到C:\目录下</p><p>  javac -d C:\ F:\Hello World.java</p></li><li><p>java -d . <em>.java</em></p><p>  将当前的路径中*.java(所有含后缀名java文件)编译之后存放到当前文件目录下</p></li><li><p>运行JVM的类加载器ClassLoader默认从当前路径下加载。<br>  保证先切换到com所在的路径在执行</p></li></ul></li></ul></li><li><p><strong>import</strong>的使用</p><ul><li><p>什么时候使用<code>import</code></p><p>  想要调用一个类但是这个类，并且不在同一个包下的时候，需要使用 <code>import</code>进行引入</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承(10)</title>
      <link href="/posts/4a8e21ba.html"/>
      <url>/posts/4a8e21ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ol><li><p>继承是面向对象三大特征之一,三大特征分别是:封装、继承、多态</p></li><li><p>继承”基本”的作用是:代码复用。但是继承最”重要”的作用是:有了继承才有了以后”方法的覆盖”和”多态机制”。</p></li><li><p>继承语法格式:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> c1ass 类名 <span class="token keyword">extends</span> 父类名<span class="token punctuation">{</span>类体 <span class="token operator">=</span> 属性 <span class="token operator">+</span> 方法<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 语法声明类中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java语言当中的继承只支持单继承,一个类不能同时继承很多类,只能继承一个类。在C++中支持多继承。</p></li><li><p>关于继承中的一些术语:</p></li><li><p>B类继承A类,其中:</p><ul><li>A类称为: 父类、基类、超类、 superclass</li><li>B类称为: 子类、派生类、 subclass</li></ul></li><li><p>在java语言当中子类继承父类都继承哪些数据呢?</p><ul><li>私有的不支持继承</li><li>构造方法不支持继承</li><li>其它数据都可以被继承</li></ul></li><li><p>虽然java语言当中只支持单继承,但是一个类也可以间接继承其它类,例如</p><ul><li>C extends B()</li><li>B extends A()</li><li>A extends T()</li><li><strong>c直接继承B类,但是c类间接继承A类。</strong></li></ul></li><li><p>Java语言中假设一个类没有显示的继承任何类,该类默认继承 JavaSE库当中提供的Java.ang. Object类。</p></li><li><p>注意：Java中任何任何一个类都有Object类的特征.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法的覆盖(10.1)</title>
      <link href="/posts/224371bd.html"/>
      <url>/posts/224371bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法的覆盖-override"><a href="#方法的覆盖-override" class="headerlink" title="方法的覆盖(override)"></a>方法的覆盖(override)</h1><ol><li><p>语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在跑步！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 子类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟在飞行！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parrot</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 继承于Bird</span>    <span class="token comment" spellcheck="true">// 继承Bird中的方法</span>    <span class="token comment" spellcheck="true">// 由于Bird继承于Animal但是Bird中自身又重写了action所以Parrot类直接继承于Bird方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹦鹉在学人话..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 以下是直接重写祖类中的方法         */</span>        <span class="token comment" spellcheck="true">// Animal父类中的方法</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bird继承Animal中action方法并重写action方法</span>        Bird bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 以下是间接继承子类中的方法         */</span>        <span class="token comment" spellcheck="true">// 由于Bird继承于Animal但是Bird中自身又重写了action所以Parrot类直接继承于Bird方法</span>        Parrot parrot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parrot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parrot<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法的覆盖又被称为方法重写，英语单词: override【官方的】/overwrite</p></li><li><p>什么时候使用方法重写?</p><ul><li>当父类中的方法已经无法满足当前子类的业务需求,</li><li>子类有必要将父类中继承过来的方法进行重新编写,</li><li>这个重新编写的过程称为方法重写/方法覆盖。</li></ul></li><li><p>什么条件满足之后方法会发生重写呢?【代码满足什么条件之后,就构成方法的覆盖呢?】(❌重点)</p><ul><li><p>方法重写发生在具有继承关系的父子类之间</p></li><li><p>方法重写的时候:</p><p>  <strong>返回值类型相同</strong></p><p>  <strong>方法名相同</strong></p><p>  <strong>形参列表相同</strong></p></li><li><p>访问权限不能更低,可以更高</p></li><li><p>抛出异常不能更多,可以更少。【异常之后才能解释】</p></li></ul></li><li><p>建议方法重写的时候尽量复制粘贴,不要编写,容易出错,导致没有产生覆盖</p></li><li><p>注意：(❌重点)</p><ul><li>私有方法不能继承,所以不能覆盖</li><li>构造方法不能继承,所以不能要盖</li><li>静态方法不存在覆盖【多态之后解释】</li><li>覆盖只针对方法,不谈属性</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问控制权限修饰符(14)</title>
      <link href="/posts/3839c98f.html"/>
      <url>/posts/3839c98f.html</url>
      
        <content type="html"><![CDATA[<h1 id="访问控制权限修饰符"><a href="#访问控制权限修饰符" class="headerlink" title="访问控制权限修饰符"></a>访问控制权限修饰符</h1><ol><li>访问控制权限修饰符来控制元素的访问范围</li><li>访问控制权限修饰符：</li></ol><table><thead><tr><th>修饰符</th><th>权限解释</th></tr></thead><tbody><tr><td>public(公共的)</td><td>表示公共的公开的，可以在任何位置访问</td></tr><tr><td>protected (受保护的)</td><td>相同包内可以访问，子类也可以访问</td></tr><tr><td>缺省(不写修饰符)</td><td>相同包内可以访问</td></tr><tr><td>private(私人的)</td><td>表示私人，只能在本类中访问</td></tr></tbody></table><ol><li><p>访问控制权限修饰符可以修饰类、内部类、变量、方法…..等</p></li><li><p>修饰符的范围：</p><p> public &gt; protected &gt; 缺省(不写修饰符) &gt; public</p></li></ol><p><strong>注意</strong>：类只能采用<strong>public和缺省</strong>的修饰符进行修饰。【<strong>内部类除外</strong>】</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态(Polymorphism)(11)</title>
      <link href="/posts/d97340ca.html"/>
      <url>/posts/d97340ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态(Polymorphism)"></a>多态(Polymorphism)</h1><h3 id="关于java语言当中的多态语法机制-【只是多态的基础语法-多态的作用在后续的例子中讲解。】"><a href="#关于java语言当中的多态语法机制-【只是多态的基础语法-多态的作用在后续的例子中讲解。】" class="headerlink" title="关于java语言当中的多态语法机制:【只是多态的基础语法,多态的作用在后续的例子中讲解。】"></a>关于java语言当中的多态语法机制:【只是多态的基础语法,多态的作用在后续的例子中讲解。】</h3><ol><li><p>Anima1、Cat、Bird三个类之间的关系:<br> Cat继承 Anima<br> Bird维承 Anima<br> Cat和Bird之间没有任何继承关系</p></li><li><p>面向对象三大特征:封装、继承、多态</p></li><li><p>关于多态中涉及到的几个概念:</p></li></ol><ul><li><p>向上转型(upcasting)</p><p>子类型—-&gt;父类型<br>又被称为:自动类型转换。</p><pre class="line-numbers language-java"><code class="language-java">Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 子转父类 向上转型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>向下转型(downcasting)</p><p>父类型—-&gt;子类型<br>又被称为:强制类型转换。【需要加强制类型转换符】</p><pre class="line-numbers language-java"><code class="language-java">Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 父类转子类 向下转型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="4"><li><p>需要记忆:<br> 无论是向上转型还是向下转型,两种类型之间必须要有继承关系。<br> 没有继承关系,程序是无法编译通过的。</p></li><li><p>注意：</p></li><li><p>java程序永远都分为编译阶段和运行阶段。</p></li><li><p>先分析编译阶段,再分析运行阶段,编译无法通过,根本是无法运行的。</p></li><li><p>编译阶段编译器检查a2这个引用的数据类型为 Anima1,由于 Anima1.c1ass</p></li></ol><pre><code>&gt; 字节码当中有move()方法,所以编译通过了。这个过程我们称之为静态绑定,编译阶段绑定。&gt; 只有静态绑定成功之后才有后续的运行。</code></pre><ol start="9"><li><p>在程序运行阶段,JV唯堆内存当中真实创建的对象是cat对象,那么以下程序在运行阶段一定会调用cat对象的move()方法,此时发生了程序的动态绑定,运行阶段绑定。</p></li><li><p>无论是cat类有没有重写move方法,运行阶段一定调用的是cat对象的move方法,因为底层真实对象就是cat对象。</p></li><li><p>父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态/状态,这种机制可以成为一种多态语法机制。</p></li><li><p>instanceof运算符(返回boolean类型)</p></li></ol><pre class="line-numbers language-java"><code class="language-java">        Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 子转父类 向上转型</span>        Dog dog <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 以上会编译报错：cannot be cast to class (cat类不能强制转换为dog类)         * 原因：         * 1. 编译未报错：         *  - 编译检测时候当前Animal里面包含Dog类所以语法正确         * 2. 运行错误报错：         *  - 运行时候由于堆内存中是Cat类由于Cat与Dog不是继承关系，所以无法完成向下转型         * 3. 解决方法：         *  - Sun公司给出了一个运算符叫做：instanceof         *  - 语法：引用 instanceof 类名   --------> 返回值：Boolean          */</span><span class="token comment" spellcheck="true">//         解决办法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 当animal的堆内存中存储的是dog对象时执行</span>            Dog dog <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            animal1<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 当animal的堆内存中存储的是cat对象时执行</span>            Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            animal1<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这样有效的避免了编译报错：cannot be cast to class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li><p>总结：</p></li><li><p>如果创建了一个B对象，且B类继承自A类，如果B类想使用A类中方法</p></li></ol><pre><code> 这种情况使用向上转型(upcasting)</code></pre><ol><li>如果创建了一个B对象，且B类继承自A类，且B类现在已经向上转型了，但是现在向调用子类方法</li></ol><pre><code> 这种情况使用向下转型(downcasting)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super关键字(16)</title>
      <link href="/posts/37e66f1.html"/>
      <url>/posts/37e66f1.html</url>
      
        <content type="html"><![CDATA[<h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><ol><li><p>super不是引用类型,，super中存储的不是内存地址,，super指向的不是父类对象</p></li><li><p>super代表的是前子类对象中的父类型特征</p></li><li><p>什么时候使用 super?<br> 子类和父类中都有某个数据，例如，子类和父类中都有name这个属性<br> 如果要再子类中访问父类中的name属性，需要使用 super</p></li><li><p>super可以用在什么地方？</p><ul><li>可以用在成员方法中，但是<strong>不能用在静态方法中</strong></li><li>super可以用在构造方法中</li></ul></li><li><p>super关键字用在构造方法中:</p><ul><li><p>语法: super(实参);<br>  注意：<strong>super()括号中传入的是实参而不是形参</strong></p></li><li><p>作用：通过子类的构造方法去调用父类的构造方法</p></li><li><p><strong>语法规则（重点）：</strong></p><p>  一个构造方法第一行如果没有this(….);<br>  也没有显示的去调用 super(….);<br>  <strong>系统会默认调用 super();</strong></p><p>  例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bank无参构造函数执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Credit</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为这里既没有this()也没有super()，所以JVM默认执行super()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Credit credit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --------->  Bank无参构造函数执行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Java语言中只要是创建Java对象，那么Object中的无参数构造方法一定会执行<br>  因为所有方法默认继承于Object</p></li><li><p>注意: super(….);的调用只能放在构造方法的第一行</p></li><li><p>super(….);和this(….);不能共存</p></li><li><p><strong>super(….);调用了父类中的构造方法，但是并不会创建父类对象.</strong></p><p>  通过子类的构造方法去调用父类的构造方法，<br>  作用是：给当前子类对象中的<strong>父类型特征赋值</strong>。</p></li><li><p>注意：<strong>调用构造方法不一定是创建对象</strong></p></li></ul></li><li><p>super()的个人理解：</p><ul><li>super()只能在子类的构造函数中使用</li><li>super()给当前子类对象中的父类型特征赋值</li><li>因为父类里面成员方法是私有的所以子类无法无法直接访问</li><li> 如果子类调用父类的成员变量还要new一个空间，费空间</li><li> 但是使用super()可以不用创建父类对象直接<strong>间接赋值</strong>然后直接使用父类get方法访问</li></ul><p> 例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    Credit credit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Credit</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> passWorld<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Credit</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> passWorld<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将id传给父类构造函数，但是父类不会创建对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passWorld <span class="token operator">=</span> passWorld<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassWorld</span><span class="token punctuation">(</span><span class="token keyword">int</span> passWorld<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passWorld <span class="token operator">=</span> passWorld<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPassWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> passWorld<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Credit credit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个子类对象，为父类型特征id赋值100，子类passWorld赋值200</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --------> 父类型特征id=100</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credit<span class="token punctuation">.</span><span class="token function">getPassWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ----------> passWorld=200</span>        credit<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重新定义父类型特征id=74</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// -------------> 父类型特征id=74</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="super总结："><a href="#super总结：" class="headerlink" title="super总结："></a>super总结：</h2><ol><li><p>super关键字： 类似与this关键字(当前当前对象)；<strong>super关键字代表父类对象</strong></p></li><li><p>可以利用super关键字代表父类对象访问父类的属性和方法。</p><ul><li>super.属性—&gt;访问父类的属性</li><li>super.方法名()—&gt;调用父类的方法</li></ul></li><li><p>可以使用super关键字调用父类的构造函数，必须出现在构造函数的第一行。</p></li><li><p>super不能与static混用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final修饰符(12)</title>
      <link href="/posts/18e18182.html"/>
      <url>/posts/18e18182.html</url>
      
        <content type="html"><![CDATA[<h1 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h1><h2 id="关于java语言当中final关键字"><a href="#关于java语言当中final关键字" class="headerlink" title="关于java语言当中final关键字:"></a>关于java语言当中final关键字:</h2><ol><li><p>final是个关键字,表示”最终的，不可变的”</p></li><li><p>final修饰的类无法被继承</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span>  <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*// 编译报错class Cat extends Animal {}*/</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">//正确写法(Cat无法继承Animal)：</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final修饰的方法无法被重写/覆盖</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWold！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">extends</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 'b()' 无法重写 'study_exercise.objectexercise.exercisefinal.a' 中的 'b()'；重写的方法为 final</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final修饰的变量一旦之后,不可重新赋值【不可二次赋值】</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 第一种写法</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// a = 15; // 无法将值赋给 final 变量 'a'</span>        <span class="token comment" spellcheck="true">// 第二种写法：</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>        b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final修饰的实例变量：</p><ul><li><p>综合考虑，java语言最终规定实例变量使用final修饰之后,必须手动赋值,不能采用系统默认值。</p></li><li><p>因为默认构造函数在构造方法时候会将成员变量赋值所以Sun公司综合考虑让开发人员自行赋值，否则会编译错误！</p></li><li><p>两种写法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 第一种写法：</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二种写法：</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        总结以上两种写法：     * 第一种写法：     *  - 直接将成员变量直接赋值给了a，但是程序执行这句话实际是在构造函数中执行进行赋值的.     * 第二种写法：     *  - 直接在构造函数中赋值     *  总结：     *  以上两种情况其实在程序运行过程中都一样，只不过一个直接赋值一个写在构造函数中.     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>final修饰的引用,一旦指向某个对象之后,不能再指向其它对象,那么被指向的对象无法被垃圾回收器回收。<br> 注意：<strong>final修饰的引用虽然指向某个对象之后不能指向其它对象,但是所指向的对象内部的内存是可以被修改的。</strong><br> 例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加final实例化对象</span>        <span class="token keyword">final</span> Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// animal1 = new Animal(20); // 编译报错：一旦使用final创建对象不能，不能指向其他对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        animal1<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">2300</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 总结：         * final修饰的引用虽然指向某个对象之后不能指向其它对象,但是所指向的对象内部的内存是可以被修改的。         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final用法之常量的使用：</p><p> <strong>常量的定义语法格式:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> 类型 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 提示：Java规范中要求所有常量的名字全部大写,每个单词之问使用下划线_连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式(15)</title>
      <link href="/posts/2b67f11b.html"/>
      <url>/posts/2b67f11b.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式-singleton-pattern"><a href="#单例模式-singleton-pattern" class="headerlink" title="单例模式(singleton pattern)"></a>单例模式(singleton pattern)</h1><h2 id="单例模式所具备条件："><a href="#单例模式所具备条件：" class="headerlink" title="单例模式所具备条件："></a>单例模式所具备条件：</h2><ol><li>构造方法私有化</li><li>对外提供一个公开的静态的获取当前对象的方法</li><li>提供当前类型的静态变量</li></ol><h2 id="单例模式分为两种："><a href="#单例模式分为两种：" class="headerlink" title="单例模式分为两种："></a>单例模式分为两种：</h2><ol><li><p>懒汉式单例(推荐使用)：</p><p> 当调用这个方法时候创建这个对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 懒汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 静态变量：</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> User user<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对外提供一个公开获取User的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// test</span><span class="token keyword">class</span> <span class="token class-name">UserTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user1 <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单例模式创建方法</span>        User user2 <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token operator">==</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// -----> true  当前引用地址指向的相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其他对象正常调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>饿汉式单例：</p><p> 未调用当前方法，这个对象就已经创建出来了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 饿汉式单例</span><span class="token keyword">class</span> <span class="token class-name">User2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为这是一个静态变量所以当调用这个类时候当前这个对象就已经创建出来了</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> User2 user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对外提供一个公开获取User的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里直接返回user2，因为静态方法已经创建出来对象了</span>        user2<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User2 user3 <span class="token operator">=</span> User2<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单例模式创建方法</span>        User2 user4 <span class="token operator">=</span> User2<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token operator">==</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// -----> true  当前引用地址指向的相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其他对象正常调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="在实际开发中的作用："><a href="#在实际开发中的作用：" class="headerlink" title="在实际开发中的作用："></a>在实际开发中的作用：</h2><ol><li>在多个模块中都需要一个功能，为了节省空间，所以可以将这个功能做个单例设计模式，什么时候使用，都是创建一个对象</li><li>不会在堆内存中开辟多个空间</li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>优点：<ol><li>单例模式特点是在一个类中<strong>只能创建一个对象</strong></li><li>单例模式不会影响封装及多态中的使用，只针对与在对象创建时<strong>有且只能有一个对象</strong></li></ol></li><li>缺点：<ol><li>单例模式的类型无法被继承<br> 因为单例模式构造方法是私有的所以一旦继承，子类构造函数默认会调用super()，但是由于单例模式的构造方法是private(私有)所以子类无法访问到父类的构造方法</li><li><code>待总结...</code></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类(17)</title>
      <link href="/posts/e036fd38.html"/>
      <url>/posts/e036fd38.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ol><li><p>语法格式：<br> [修饰符] abstract class  类名{}</p></li><li><p>抽象类无法被实例化</p><p> 虽然抽象类没有办法实例化，但是抽象类也有构造方法，该构造方法是给子类创建对象用的</p></li><li><p>抽象类中可以定义抽象方法</p><p> 抽象方法的语法：在方法的修饰符列表中添加abstract关键字，并且抽象方法应该以”;”结束，不能带有”{}”<br> 例如：public abstract void m();</p></li><li><p>抽象类中不一定有抽象方法，但抽象方法<strong>必须</strong>出现在抽象类中</p></li><li><p>一个非抽象的类继承抽象类，必须将抽象类中的抽象方法覆盖，实现，重写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动物类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 非抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 抽象方法：成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 猫科类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注意：子类一定要重写父类中的抽象方法不然会编译错误</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫会跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类的用途：</p></li><li><p><strong>Java中抽象类更利于代码的维护和重用。</strong></p></li></ol><pre><code>抽象类往往用来表征对问题领域进行分析、设计中得出的抽象概念，是对一系列看上去不同，但是本质上相同的具体概念的抽象。</code></pre><ol start="2"><li>因为抽象类不能实例化对象，所以必须要有子类来实现它之后才能使用。这样就可以把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护。</li></ol><pre><code>比如本科和研究生可以抽象成学生，他们有相同的属性和方法。这样当你对其中某个类进行修改时会受到父类的限制，这样就会提醒开发人员有些东西不能进行随意修改，这样可以对比较重要的东西进行统一的限制，也算是一种保护，对维护会有很大的帮助。</code></pre><ol start="3"><li>当又有一个具有相似的组件产生时，只需要实现该抽象类就可以获得该抽象类的那些属性和方法。</li></ol><pre><code>比如学校又新产生了专科生这类学生，那么专科生直接继承学生，然后对自己特有的属性和方法进行补充即可。这样对于代码的重用也是很好的体现。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口(18)</title>
      <link href="/posts/9b7c16f.html"/>
      <url>/posts/9b7c16f.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><ul><li><p>接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么接口的内部主要就是<strong>封装了方法</strong>，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法（JDK 9）<strong>后面在学jdk新特性</strong></p></li><li><p>接口的定义，它与定义类方式相似，但是使用 <code>interface</code> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。    </p></li><li><p>接口的使用，它不能创建对象，但是可以被实现（ <code>implements</code> ，类似于被继承）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象<br>  类。  </p></li></ul><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名称 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 抽象方法</span><span class="token comment" spellcheck="true">// 常量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口具体语法："><a href="#接口具体语法：" class="headerlink" title="接口具体语法："></a>接口具体语法：</h2><ol><li><p>接口也是一种引用类型，可以等同看做类</p></li><li><p><strong>接口也是一种引用”数据类型”，编译之后也是一个class字节码文件，但并不是类</strong></p></li><li><p>接口中只能出现：常量、抽象方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> A<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 定义一个常量</span>    <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里定义常量省略public static final，但是系统自动会给你加上</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 定义一个抽象方法</span>    <span class="token keyword">void</span>  <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 这里定义常量省略public abstract，但是系统自动会给你加上</span>    <span class="token comment" spellcheck="true">// 注意: 在接口中没有成员变量、方法，也无法被实例化</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口其实是一个特殊的抽象类，特殊在接口是完全抽象的</p></li><li><p>接口中没有构造方法，无法被实例化</p></li><li><p>接口和接口直接可以实现多继承</p></li><li><p>一个类中可以实现多个接口，(这里的”实现”可以等同看作”继承”)</p></li><li><p>一个非抽象的类实现接口，需要将接口中所有的方法”实现/重写/覆盖”</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>A<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a类继承A，并覆盖A中的m3方法</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b类继承接口c，但由于接口c中继承了a、b种方法，所以所以b类继承接口c需要将a、b、c类中所有方法进行覆盖</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h2><ol><li><p>可以使项目分层，所有层都面向接口开发，开发效率提高了</p></li><li><p>接口使代码和代码之间的耦合度降低，就像内存条和主板的关系，变得“可插拔可以随意切换。</p></li><li><p>接口更像是一个规范两者之间的规范</p><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E6%9C%AA%E6%A0%87%E9%A2%98-2.jpg" alt="现实生活例子"></p></li><li><p>如果接口和抽象类都能完成某个功能，优先选择接口</p><p> 因为接口可以多实现，多继承，并且一个类除了实现接口之外，还可以去继承其他类(保留了类的继承)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(01)</title>
      <link href="/posts/8e57d0cc.html"/>
      <url>/posts/8e57d0cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象及面向过程区别"><a href="#面向对象及面向过程区别" class="headerlink" title="面向对象及面向过程区别"></a>面向对象及面向过程区别</h1><h2 id="面向过程：主要是关注点是：实现的具体的过程，因果关系"><a href="#面向过程：主要是关注点是：实现的具体的过程，因果关系" class="headerlink" title="面向过程：主要是关注点是：实现的具体的过程，因果关系"></a>面向过程：主要是关注点是：实现的具体的过程，因果关系</h2><ol><li><p>例子：</p><ul><li><p>例1：</p><p>  集成显卡的开发思路：<br>  集成显卡是焊接在主板上，如果集成显卡坏了，整块主板就坏了。</p></li><li><p>例2：</p><p>  蛋炒饭：<br>  客户如果点了一份蛋炒饭，然后做好了，但是客户突然想吃蛋炒饭里的“米”不吃炒的鸡蛋，但是鸡蛋和米饭粘合在一起了，难以分离。</p></li></ul></li><li><p>面向过程开发优点：对于业务逻辑比较简单的程序，可以达到快速开发，前期拖入成本低。</p></li><li><p>面向过程开发缺点：采用面向过程的方式很难解决非常复杂的业务逻辑，另外没面向过程的方式导致软件元素之间的“耦合度”非常高，只要其中一环出问题，整个系统受影响，导致最终的软件”扩展力“差。另外，由于没有独立体的概念，所以无法达到组件的服用。</p></li><li><p>个人理解名词:</p><ul><li><p>耦合度：</p><p>  拿以上的例子蛋炒饭鸡蛋和米饭无法分离，因为鸡蛋和米饭谁都离不开谁了这个依赖关系称之为”耦合度”。</p></li><li><p>扩展力：</p></li><li><p>还是以上蛋炒饭的例子，因为蛋炒饭无法放其他东西，例：像rice就以可以随便添加鱼香肉丝，西红柿炒鸡蛋这样的菜。像这种可延伸性称之为扩展力。</p></li></ul></li></ol><h2 id="面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。"><a href="#面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。" class="headerlink" title="面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。"></a>面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。</h2><ol><li><p>例子：</p><ul><li><p>例1：</p><p>  独立显卡开发思路：</p><p>  在一个主机中如果主机失去独立显卡也可以正常使用，像这种可延伸性、可扩展性、的东西叫做面向对象。</p></li><li><p>例2：</p><p>  米饭：</p><p>  客户可以要求做饭人根据个人喜好添加不同的菜码，像这种灵活性较高、可扩展性、的东西叫做面向对象。</p></li></ul></li><li><p>面向对象优点：耦合度低，扩展力强。更容易解决现实世界当中更复杂的业务逻辑、组件性更强。</p></li><li><p>面向对象缺点：前期投入成本较高，需要进行独立体的抽取、以及大量系统的分析与设计。</p></li><li><p>C语言是纯面向对象—&gt; C++是半面向对象 —&gt; Java是纯面向对象</p></li></ol><h2 id="面向对象的介绍："><a href="#面向对象的介绍：" class="headerlink" title="面向对象的介绍："></a>面向对象的介绍：</h2><ol><li><p>面向对象的三大特征：</p><ul><li>封装</li><li>继承</li><li>多态</li><li>所有面向对象的编程语言都有这三大特征。</li></ul></li><li><p>采用面向对象的方式开发一个软件，声明周期当中：【整个声明周期中贯穿使用oo面向对象方式】</p><ul><li>面向对象的分析：OOA</li><li>面向对象的设计：OOD</li><li>面向对象的编程：OOP</li></ul></li><li><p>类和对象的概念</p><ol><li>类的概念：<ul><li>类在现实世界当中是不存在的,是一个模板,是一个概念。是人类大脑思考抽象的结果。</li><li>类代表了一类事物。</li><li>在现实世界当中,对象A与对象B之间具有共同特征,进行抽象总结出一个模板,这个模板被称为类</li></ul></li></ol></li><li><p>对象概念：</p><ol><li>对象是实际存在的个体。现实世界当中实际存在。</li><li>描述一下整个软件开发的过程：<ul><li>程序员先观察现实世界,从现实世界当中寻找对象</li><li>寻找了N多个对象之后,发现所有的对象都有共同特征</li><li>程序员在大脑中形成了一个模板【类】</li><li>Java程序员可以通过Java代码来表述一个类</li><li>Java程序中有了类的定义</li><li>然后通过类就可以创建对象</li><li>有了对象之后,可以让对象直接协作起来形成一个系统</li></ul></li><li>类到对象的过程<ul><li>类 —&gt; 【实例化】 —&gt; 对象</li><li>对象又被称之为实例【instance】</li><li>对象—&gt; 【抽象化】 —&gt; 类</li></ul></li><li>个人理解：</li></ol><p> 程序员把现实世界中一个种族/种类的共同特征通过代码方式记录下来，例如：种族：人、特征：升高、体重、爱好、性别、肤色、…把他们属性创建成一个类然后通过一个类创建一个人的信息，这个从类创建到对象过程叫做创建一个实例化【创建个例子的意思】，而对象到类是一种抽象类的东西</p></li><li><p>总结类与对象的概念：</p><ol><li>类描述的是对象的共同特征</li><li>共同特征：例如：升高、体重、爱好、性别、肤色等…</li><li>这个身高特征在访问的时候,必须先创建对象,通过对象去访问这个特征</li><li>因为这个特征具体的某个对象上之后,值不同。有的对象身高1.80,有的<br> 对象身高2.80等…</li><li>一个类主要描述什么信息呢?<ul><li>一个类主要描述：状态+动作</li><li>状态信息：名字、身高、性别、年龄【类中的属性】</li><li>动作信息：吃、唱歌、跳舞、学习【类中的方法】</li></ul></li><li>现实生活转换成抽象概念<ul><li>状态  —&gt;  一个类的属性</li><li>动作  —&gt;  一个类的方法</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象的概念附Java命名规范(02)</title>
      <link href="/posts/117bb08e.html"/>
      <url>/posts/117bb08e.html</url>
      
        <content type="html"><![CDATA[<h1 id="类和对象的概念附Java命名规范"><a href="#类和对象的概念附Java命名规范" class="headerlink" title="类和对象的概念附Java命名规范"></a>类和对象的概念附Java命名规范</h1><h2 id="类的定义【从这里开始编写代码】"><a href="#类的定义【从这里开始编写代码】" class="headerlink" title="类的定义【从这里开始编写代码】"></a>类的定义【从这里开始编写代码】</h2><ol><li><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3></li></ol><pre><code>```java [修饰符列表] class 类名 {        属性;        方法;    }```</code></pre><ol start="2"><li><h3 id="例如：学生类：描述所有学生对象的共同特征"><a href="#例如：学生类：描述所有学生对象的共同特征" class="headerlink" title="例如：学生类：描述所有学生对象的共同特征"></a>例如：学生类：描述所有学生对象的共同特征</h3><ul><li>学号【int】</li><li>名字【String】</li><li>性别【boolean】</li><li>年龄【int】</li><li>住址【String】</li><li>等…</li></ul></li><li><h3 id="重点：-成员变量通常是采用一个变量的形式来完成定义的"><a href="#重点：-成员变量通常是采用一个变量的形式来完成定义的" class="headerlink" title="重点： 成员变量通常是采用一个变量的形式来完成定义的"></a>重点： 成员变量通常是采用一个变量的形式来完成定义的</h3><ul><li>int no[学号]</li><li>int age[年龄]</li><li>String name[名字]</li><li>String address[住址]</li><li>boolean sex[年龄]</li></ul></li><li><h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3></li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B.png" alt="数据类型"></p><p>  引用数据类型(以下理解为新手可以这样理解，但是严格意义不准确)：<br>      String.class     SUN【甲骨文工资】提供的<br>      System.class    SUN【甲骨文工资】提供的</p><ol start="5"><li><h3 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h3></li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%9B%BE%E5%B1%82%203.png" alt="java命名规范"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建(03)</title>
      <link href="/posts/6ca9e73a.html"/>
      <url>/posts/6ca9e73a.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><pre class="line-numbers language-java"><code class="language-java">类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对象名.成员变量；</p><p>对象名.成员方法()；  </p><h2 id="创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值"><a href="#创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值" class="headerlink" title="创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值"></a>创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%80%BC.png" alt="创建对象初始值">使用null断连引用与对象直接关联从而让GC(垃圾回收机制)回收</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的封装(04)</title>
      <link href="/posts/f659f0b5.html"/>
      <url>/posts/f659f0b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象的封装"><a href="#对象的封装" class="headerlink" title="对象的封装"></a>对象的封装</h1><h2 id="封装的步骤："><a href="#封装的步骤：" class="headerlink" title="封装的步骤："></a>封装的步骤：</h2><ul><li>所有属性私有化，使用private关键字进行修饰，private表示私有的，修饰的只能在本类中访问</li><li>对外提供简单的的操作入口，也就是说以后外部程序想要访问age属性，必须通过这些简单的入口进行访问</li></ul><ol start="2"><li><p>对外提供两个公开的方法,分别是<code>set</code>方法和<code>get</code>方法</p><ul><li>set方法修改实例变量属性<br>  get方法读取实例变量属性</li><li><code>set</code>修改方法的命名规范：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span>形参<span class="token punctuation">)</span> <span class="token punctuation">{</span>    成员变量名 <span class="token operator">=</span> 形参<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>get</code>读取方法的命名规范：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> get<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> 想返回的实例变量名<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>关于有无static怎样调用</p></li></ol><ul><li>有static关键字修饰的方法调用：类名.方法名(实参);   // 成员方法</li><li>没有static关键字修饰的方法调用：引用.方法名(实参);      // 实例方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法(05)</title>
      <link href="/posts/11059cb0.html"/>
      <url>/posts/11059cb0.html</url>
      
        <content type="html"><![CDATA[<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><ol><li><p>语法格式：</p><pre><code>public 类名(形参) {    this.实例变量名=形参;}</code></pre></li><li><p>作用：</p><ul><li>构造函数可以在创建对象之初，将对象属性写进参数中。</li></ul></li><li><p>构造函数的生存周期：</p><ul><li>创建对象</li><li>创建对象的同时,初始化实例变量的内存空间。</li><li>注意：<strong>成员变量创建的实例变量,属于对象级别的变量,这种变量必须先有对象才能有实例变量。</strong></li></ul></li><li><p>实例变量没有手动赋值的时候,系统默认赋值,那么这个系统默认赋值是在什么时候完成的呢?</p><ul><li>是在类加载的时候吗?</li><li>不是,因为类加载的时候只加载了代码片段,还没来得及创建对象。所以此时实例变量并没有初始化。</li><li><strong>实际上,实例变量的内存空间是在构造方法执行过程当中完成开辟的。完成初始化的。</strong></li><li>系统在默认赋值的时候,也是在<strong>构造方法执行过程当中完成的赋值。</strong></li><li>注意：<strong>当创建一个对象，这个对象这个类里面没创建构造函数的话，会有一个构造补缺器自动帮你创建一个无参的构造函数</strong></li><li>如果开发者在类中创建了有参的构造函数，但是实例化一个对象时，没有放入参数会报错**<br>  解决办法：</li></ul></li><li><p>创建构造函数时一般都会创建一个有参构造函数和无参构造函数，从而形成方法重载<br> <em>构造函数支持方法重载机制</em>*</p></li><li><p>注意：如果构造函数的参数没有将成员变量全部写完，<strong>JVM自动把后面的成员变量设为默认值</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向及static方法详解(06)</title>
      <link href="/posts/1a9bdff3.html"/>
      <url>/posts/1a9bdff3.html</url>
      
        <content type="html"><![CDATA[<h1 id="this指向及static方法详解"><a href="#this指向及static方法详解" class="headerlink" title="this指向及static方法详解"></a>this指向及static方法详解</h1><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><ol><li>this第一种语法：</li></ol><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> People<span class="token punctuation">{</span>     String age<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">setAge</span><span class="token punctuation">(</span>String age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this这里指的的是调用当前对象的内存地址;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  this第二种用法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了无参Cat构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -----------> 调用了无参Cat构造函数</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于java语言当中的this关键字"><a href="#关于java语言当中的this关键字" class="headerlink" title="关于java语言当中的this关键字"></a>关于java语言当中的this关键字</h2><ul><li>this是一个关键字,翻译为:这个 </li><li>this是一个引用</li><li>this是一个变量</li><li>this变量中保存了内存地址指向了自身</li><li>this存储在JVM堆内存java对象内部。(详见内存图)</li></ul><p>  <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/this%E5%86%85%E5%AD%98%E5%9B%BE%E5%88%86%E6%9E%901.png" alt="this内存地址"></p><h2 id="关于this详解："><a href="#关于this详解：" class="headerlink" title="关于this详解："></a>关于this详解：</h2><ul><li>创建100个java对象,每一个对象都有this,也就说有100个不同的this </li><li>this可以出现在实例方法当中，this指向当前正在执行这个动作的对象。(this代表当前对象) </li><li>this在多数情况下都是可以省略不写的 </li><li>this不能使用在带有static的方法当中</li></ul><h2 id="关于this-详解："><a href="#关于this-详解：" class="headerlink" title="关于this()详解："></a>关于this()详解：</h2><ul><li>只能在构造方法中使用this调用其他构造方法，不能在成员方法中使用</li><li>在构造方法中，使用this调用构造方法的语句必须位居第一行，且只能出现一次，否则会编译错误</li><li>不能在两个构造方法中相互调用，否则会编译错误</li></ul><h2 id="static方法详解"><a href="#static方法详解" class="headerlink" title="static方法详解"></a>static方法详解</h2><h3 id="带static与不带static方法的区别："><a href="#带static与不带static方法的区别：" class="headerlink" title="带static与不带static方法的区别："></a>带static与不带static方法的区别：</h3><ul><li><p>带static调用区别：类名.方式调用</p></li><li><p>不带static调用区别：引用.方式调用</p></li><li><p>总结：不带static是一个实例方法，带static是一个静态方法</p></li></ul><h3 id="什么时候使用static什么时候不用？"><a href="#什么时候使用static什么时候不用？" class="headerlink" title="什么时候使用static什么时候不用？"></a>什么时候使用static什么时候不用？</h3><ul><li>顾客购物的行为，每一个顾客购物最终的购买的<strong>东西和结账的总金额</strong>的结果是不一样的 所以购物这个行为是属于<strong>对象级别</strong>的行为 由于每一个对象在执行购物这个动作的时候最终结果不同,所以购物这个动作必须有”对象”的参与。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li><p>判断是否用static来创建方法的依据:当一个行为/动作执行的过程当中是需要对象参与的,那么这个方法一定要定义为实例方法”,不要带static关键字</p></li><li><p>不带static是专门为对象级别行为使用的</p></li><li><p>带static是一个普通方法使用</p></li><li><p><strong>带static的方法都需要创建对象才能调用实例方法和成员方法</strong></p></li><li><p>再次重申：</p><p> 带static的类名.方法名();</p><p> 不带static的引用.方法名();</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static静态变量(07)</title>
      <link href="/posts/d87fc482.html"/>
      <url>/posts/d87fc482.html</url>
      
        <content type="html"><![CDATA[<h1 id="static静态变量"><a href="#static静态变量" class="headerlink" title="static静态变量"></a>static静态变量</h1><h2 id="static静态变量-1"><a href="#static静态变量-1" class="headerlink" title="static静态变量"></a>static静态变量</h2><ol><li><p>语法格式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> 变量类型 变量名 <span class="token operator">=</span> 变量值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>什么时候成员变量声明为实例变量呢?</p><p> 所有对象都有这个属性,但是这个属性的值会随着对象的变化而变化【不同对象的这个属性具体的值不同】</p></li><li><p>什么时候成员变量声明为静态变量呢?</p><p> 所有对象都有这个属性,并且所有对象的这个属性的值是一样的,建议定义为静态变量,节省内存的开销。</p></li><li><p>注意：静态变量在类加载的时候初始化,内存在方法区中开辟。访问的时候不需要创建对象,直接使用类名静态变量名的方式访问。</p></li><li><p>关于Java中的static关键字</p><ul><li>static英语单词翻译为静态的</li><li>static修饰的方法是静态方法</li><li>static修饰的变量是静态变量</li><li>所有 static修饰的元素都称为静态的,都可以使用类名.的方式访问，当然也可以用引用.的方式访问【但不建议】</li><li>static修饰的所有元素都是类级别的特征和<strong>具体的对象无关</strong>。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static静态代码块(08)</title>
      <link href="/posts/ef687801.html"/>
      <url>/posts/ef687801.html</url>
      
        <content type="html"><![CDATA[<h1 id="static静态代码块"><a href="#static静态代码块" class="headerlink" title="static静态代码块"></a>static静态代码块</h1><h2 id="static静态代码块-1"><a href="#static静态代码块-1" class="headerlink" title="static静态代码块"></a>static静态代码块</h2><ol><li><p>语法格式:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span>    java语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以使用”static”关键字来定义静态代码块:</p></li><li><p>静态代码块在类加载时执行,并且只执行一次。</p></li><li><p>静态代码块在一个类中可以编写多个,并且遵循自上而下的顺序依次执行<br> 静态代码块在main之前执行且执行一次</p></li><li><p>静态代码块的作用什么?怎么用?用在哪儿?什么时候用?</p></li></ol><ul><li><p>这当然和具体的需求有关,例如项目中要求在类加载的时刻/时机执行代码完成日志的记录<br>那么这段记录日志的代码就可以编与到静态代码块当中,完成日志记录。</p></li><li><p>静态代码块是Java为程序员准备个特殊的时刻,这个特殊的时刻被称为类加线时刻,若希望在此刻执行一段特殊的程序,这段程序可以直接放到静态代码块当中</p></li><li><p>通常在静态代码坎当中完成预备工作,先完成数据的准备工具,例如:初始化连接池,解析XML配置文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实例语句块成员内部类(09)</title>
      <link href="/posts/fb69133e.html"/>
      <url>/posts/fb69133e.html</url>
      
        <content type="html"><![CDATA[<h1 id="实例语句块成员内部类"><a href="#实例语句块成员内部类" class="headerlink" title="实例语句块成员内部类"></a>实例语句块成员内部类</h1><h2 id="实例语句块内容"><a href="#实例语句块内容" class="headerlink" title="实例语句块内容"></a>实例语句块内容</h2><ol><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个放在类中</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>小结：</p><ul><li><p>实例语句块/代码【了解内容,使用的非常少】</p></li><li><p>实例代码块可以编写多个,也是道循自上而下的顺序依次执行</p></li><li><p>实例代码块在构造方法执行之前执行,构造方法执行依次,实例代码块对应执行一次</p></li><li><p>实例代码块也是Java语言为程序员准备一个特殊的时机,这个特殊时机被称为:对象初始化时机</p></li></ul></li></ol><h2 id="成员内部类内容"><a href="#成员内部类内容" class="headerlink" title="成员内部类内容"></a>成员内部类内容</h2><ol><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>小结：</p><ul><li>可以共享外部类的成员（属性，方法）</li><li>如果使用成员内部类的对象，外部类的对象必须存在。</li></ul></li><li><p>怎样调成员内部类的方法: </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> b<span class="token punctuation">;</span>    <span class="token keyword">private</span> String str<span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">bb</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种方法：</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test<span class="token punctuation">.</span>bb b <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种方法：</span>        Test<span class="token punctuation">.</span>bb s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table标签(01)</title>
      <link href="/posts/2e463a55.html"/>
      <url>/posts/2e463a55.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1节：Table标签"><a href="#第1节：Table标签" class="headerlink" title="第1节：Table标签"></a>第1节：Table标签</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15px<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">aria-rowcount</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aqua<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合并2行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ccc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合并2列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="table标签属性："><a href="#table标签属性：" class="headerlink" title="table标签属性："></a>table标签属性：</h2><ul><li><code>width</code>：长度</li><li><code>height</code>：高度</li><li><code>cellspacing</code>：规定单元边沿与单元内容之间的空间，用以像素(px)或百分比(%)</li><li><code>cellpadding</code>：规定单元边沿与其内容之间的空白，用以像素(px)或百分比(%)</li><li><code>border</code>：边框</li><li><code>bordercolor</code>：边框颜色</li><li><code>bgcolor</code>：规定表格单元格的背景颜色</li><li>**<code>colspan</code>**：合并行，输入值：合并几行</li><li>**<code>rowspan</code>**：合并列，输入值：合并几列</li></ul><h2 id="table的子集标签："><a href="#table的子集标签：" class="headerlink" title="table的子集标签："></a>table的子集标签：</h2><ul><li><code>caption</code>：表格标题</li><li><code>th</code>：表头 (<strong>表头与列不同的是表头文字自动加粗文字居中</strong>)</li><li><code>tr</code>：行</li><li><code>td</code>：列</li></ul><p><code>待补充...</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table总结</title>
      <link href="/posts/c888fdae.html"/>
      <url>/posts/c888fdae.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2节：Table总结"><a href="#第2节：Table总结" class="headerlink" title="第2节：Table总结"></a>第2节：Table总结</h1><h2 id="Table标签属性总结："><a href="#Table标签属性总结：" class="headerlink" title="Table标签属性总结："></a>Table标签属性总结：</h2><ul><li><code>&lt;tr&gt;</code>不能设置width，但是可以设置height</li><li>如果一行中每个<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>每个元素长度不一试着在<code>&lt;table&gt;</code>加上<code>table-layout:fixed</code>注意：这个是style样式表</li></ul><h2 id="a-标签更改字体以及去掉下划线："><a href="#a-标签更改字体以及去掉下划线：" class="headerlink" title="**a**标签更改字体以及去掉下划线："></a>**<code>a</code>**标签更改字体以及去掉下划线：</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    // 更改字体颜色<span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    // 去掉下划线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>待补充...</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化日志</title>
      <link href="/posts/aa22d48d.html"/>
      <url>/posts/aa22d48d.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客BUG及优化日志-分先后修复及更新"><a href="#博客BUG及优化日志-分先后修复及更新" class="headerlink" title="博客BUG及优化日志(分先后修复及更新)"></a>博客BUG及优化日志(分先后修复及更新)</h1><blockquote><p><strong>以下<code>功能</code>或<code>BUG</code>会分前后顺序进行修复/优化</strong></p><p>您如果浏览本站发现<code>BUG</code>或<code>想法</code>，可以联系我<a href="tencent://AddContact/?fromId=50&amp;fromSubId=1&amp;subcmd=all&amp;uin=963936892">QQ</a> / <a href="mailto:963936892@qq.com">邮箱</a></p></blockquote><h2 id="基本功能-优化-BUG-功能"><a href="#基本功能-优化-BUG-功能" class="headerlink" title="基本功能(优化/BUG/功能)"></a>基本功能(优化/BUG/功能)</h2><ol><li>归档页面与文章标签页面成为一个二级标签，一级名称为文章<code>(已优化)</code></li><li>合并标签、分类为一个页面统称为文章标签<code>(已优化)</code></li><li>归档页面重新更改<code>(已优化)</code></li><li>优化常用导航搜索栏页面<code>(已优化)</code></li><li>短链接无法访问实际文章页面<code>(已修复)</code></li><li>标头文件格式不对，无法显示导航栏中的书签<code>(已修复)</code></li><li>加入全屏按钮<code>(已优化)</code></li><li>更换音乐歌单<code>(已优化)</code></li><li>更换图片及更换打赏图片(未优化)</li><li>我的导航页面中链接排版过大，影响视觉体验<code>(已优化)</code></li><li>主页开始阅读、GITHUB按钮点击之后变成绿色(未优化)</li><li>文章卡片腰牌，在这里感谢<a href="https://hesifan.top/">不染轻裳</a>大佬的源码<code>（已优化）</code></li><li>将默认的标签与归档恢复，并重新创建一个页面合并这两个页面<code>（已优化）</code></li></ol><h2 id="留言板-优化功能"><a href="#留言板-优化功能" class="headerlink" title="留言板(优化功能)"></a>留言板(优化功能)</h2><ol><li>新增互换友链内容<code>(已优化)</code></li><li>增加网易云热评内容<code>(已优化)</code></li><li>增加评论功能<code>(已优化)</code></li></ol><h2 id="优化友情链接对不齐情况-优化功能"><a href="#优化友情链接对不齐情况-优化功能" class="headerlink" title="优化友情链接对不齐情况(优化功能)"></a>优化友情链接对不齐情况(优化功能)</h2><ol><li>优化友情链接中间比两边大的情况<code>(已优化)</code></li></ol><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ol><li>首页背景图在手机显示过大(未优化)</li><li>日志页面文字溢出父级容器(未优化)</li></ol><h2 id="关于百宝箱中的页面设置-优化功能"><a href="#关于百宝箱中的页面设置-优化功能" class="headerlink" title="关于百宝箱中的页面设置(优化功能)"></a>关于百宝箱中的页面设置(优化功能)</h2><ol><li>音乐页面未开发(未优化)</li><li>书籍页面未开发(未优化)</li></ol><h2 id="关于我的页面-优化功能"><a href="#关于我的页面-优化功能" class="headerlink" title="关于我的页面(优化功能)"></a>关于我的页面(优化功能)</h2><ol><li>新增自我介绍：性格、爱好…等详细介绍…(未优化)</li><li>优化我的页面排版(未优化)</li></ol><h2 id="魔改懒加载插件内容-优化功能"><a href="#魔改懒加载插件内容-优化功能" class="headerlink" title="魔改懒加载插件内容(优化功能)"></a>魔改懒加载插件内容(优化功能)</h2><ol><li>更改懒加载动画(未优化)</li><li>更改懒加载文字(未优化)</li></ol><h2 id="网站收录"><a href="#网站收录" class="headerlink" title="网站收录"></a>网站收录</h2><ol><li>将博客部署到服务器: github不让百度爬取内容，所以百度不收录github内容….</li><li>添加站点地图<code>(已优化)</code></li><li>谷歌、百度收录(未优化)</li></ol><h2 id="新版更新-新增功能"><a href="#新版更新-新增功能" class="headerlink" title="新版更新(新增功能)"></a>新版更新(新增功能)</h2><ol><li>新增朋友圈功能，实现实时更新(新增功能)</li><li>更换白\夜间模式主题(新增功能)</li><li>更换回到顶部按钮及部分UI(新增功能)</li><li>添加访问统计页面(新增功能)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
