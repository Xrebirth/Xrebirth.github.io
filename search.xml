<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringWeb(05)</title>
      <link href="/posts/a69afeb3.html"/>
      <url>/posts/a69afeb3.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringWeb"><a href="#SpringWeb" class="headerlink" title="SpringWeb"></a>SpringWeb</h1><p>详细笔记见：Spring中LearnSpring14-SpringWeb模块。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务(04)</title>
      <link href="/posts/c70e09ea.html"/>
      <url>/posts/c70e09ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h2 id="Maven相关依赖"><a href="#Maven相关依赖" class="headerlink" title="Maven相关依赖"></a>Maven相关依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xrebirth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>LearnSpring12-Spring-trans-annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring核心依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-tx(事务包)为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-jdbc这个依赖包含对Spring对JDBC 数据访问进行封装的所有类。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--JDBC驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--MyBaits和Spring集成的依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--阿里druid数据库连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--目的是把src/main/java目录中的所有包含xml的文件输出到classes目录中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.target --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.source --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。  在 Spring 中通常可以通过以下两种方式来实现对事务的管理：  </p><ol><li>使用 Spring 的事务注解管理事务  </li><li>使用 AspectJ 的 AOP 配置管理事务  </li></ol><h2 id="事务管理-API"><a href="#事务管理-API" class="headerlink" title="事务管理 API"></a>事务管理 API</h2><p>Spring 的事务管理，主要用到两个事务相关的接口。  </p><h3 id="事务管理器接口"><a href="#事务管理器接口" class="headerlink" title="事务管理器接口"></a>事务管理器接口</h3><p>事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。   </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2022%3A%E5%B9%B4%201%3A%E6%9C%88%2012%3A%E6%97%A5%2017%3A%E6%97%B6%2027%3A%E5%88%861641979677263.png" alt="事务管理器接口"></p><h3 id="常用的两个实现类"><a href="#常用的两个实现类" class="headerlink" title="常用的两个实现类"></a>常用的两个实现类</h3><p>PlatformTransactionManager 接口有两个常用的实现类：  </p><ol><li><strong>DataSourceTransactionManager</strong>：使用 JDBC 或 MyBatis 进行数据库操作时使用。  </li><li><strong>HibernateTransactionManager</strong>：使用 Hibernate 进行持久化数据时使用。  </li></ol><h3 id="Spring-的回滚方式"><a href="#Spring-的回滚方式" class="headerlink" title="Spring 的回滚方式"></a>Spring 的回滚方式</h3><p>Spring 事务的默认回滚方式是： 发生<strong>运行时异常和 error 时回滚</strong>，发生<strong>受查(编译)异常时提交</strong>。 不过，对于受查异常，开发人员也可以手工设置其回滚方式。  </p><h3 id="回顾错误与异常"><a href="#回顾错误与异常" class="headerlink" title="回顾错误与异常"></a>回顾错误与异常</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2022%3A%E5%B9%B4%201%3A%E6%9C%88%2012%3A%E6%97%A5%2017%3A%E6%97%B6%2030%3A%E5%88%861641979809050.png"></p><p>Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类(或其子类之一)的实例时， 才能通过 Java 虚拟机或者 Java 的 throw 语句抛出。</p><p>Error 是程序在运行过程中出现的无法处理的错误，比如 OutOfMemoryError、ThreadDeath、 NoSuchMethodError 等。当这些错误发生时，程序是无法处理（捕获或抛出）的， JVM 一般会终止线程。</p><p>程序在编译和运行时出现的另一类错误称之为异常，它是 JVM 通知程序员的一种方式。通过这种方式，让程序员知道已经或可能出现错误，要求程序员对其进行处理。</p><p>异常分为运行时异常与受查异常。</p><p>运行时异常，是 RuntimeException 类或其子类， 即只有在运行时才出现的异常。如，NullPointerException、 ArrayIndexOutOfBoundsException、 IllegalArgumentException 等均属于运行时异常。这些异常由 JVM 抛出，在编译时不要求必须处理（捕获或抛出）。但只要代码编写足够仔细，程序足够健壮，运行时异常是可以避免的。</p><p>受查异常，也叫编译时异常，即在代码编写时要求必须捕获或抛出的异常，若不处理，则无法通过编译。如 SQLException， ClassNotFoundException， IOException 等都属于受查异常。</p><p>RuntimeException 及其子类以外的异常，均属于受查异常。当然，用户自定义的 Exception的子类，即用户自定义的异常也属受查异常。程序员在定义异常时，只要未明确声明定义的为 RuntimeException 的子类，那么定义的就是受查异常。  </p><h3 id="事务定义接口"><a href="#事务定义接口" class="headerlink" title="事务定义接口"></a>事务定义接口</h3><p>事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限，及对它们的操作。  </p><h4 id="五个事务隔离级别常量"><a href="#五个事务隔离级别常量" class="headerlink" title="五个事务隔离级别常量"></a>五个事务隔离级别常量</h4><p>这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。  </p><p>DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ； Oracle默认为 READ_COMMITTED。</p><ol><li>READ_UNCOMMITTED： 读未提交。未解决任何并发问题。</li><li>READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。</li><li>REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读。</li><li>SERIALIZABLE： 串行化。不存在并发问题。 </li></ol><h4 id="七个事务传播行为常量"><a href="#七个事务传播行为常量" class="headerlink" title="七个事务传播行为常量"></a>七个事务传播行为常量</h4><p>所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。</p><p>事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。    </p><p><strong>PROPAGATION_REQUIRED</strong><br><strong>PROPAGATION_REQUIRES_NEW</strong><br>PROPAGATION_SUPPORTS<br>PROPAGATION_MANDATORY<br>PROPAGATION_NESTED<br>PROPAGATION_NEVER<br>PROPAGATION_NOT_SUPPORTED  </p><h5 id="PROPAGATION-REQUIRED："><a href="#PROPAGATION-REQUIRED：" class="headerlink" title="PROPAGATION_REQUIRED："></a>PROPAGATION_REQUIRED：</h5><p>指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。  如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事<br>务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。  </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220112173746326.png" alt="image-20220112173746326"></p><h5 id="PROPAGATION-SUPPORTS："><a href="#PROPAGATION-SUPPORTS：" class="headerlink" title="PROPAGATION_SUPPORTS："></a>PROPAGATION_SUPPORTS：</h5><p>指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。  </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220112173825526.png" alt="image-20220112173825526"></p><h5 id="PROPAGATION-REQUIRES-NEW-："><a href="#PROPAGATION-REQUIRES-NEW-：" class="headerlink" title="PROPAGATION_REQUIRES_NEW ："></a>PROPAGATION_REQUIRES_NEW ：</h5><p>总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。  </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220112173855053.png" alt="image-20220112173855053"></p><h4 id="定义了默认事务超时时限"><a href="#定义了默认事务超时时限" class="headerlink" title="定义了默认事务超时时限"></a>定义了默认事务超时时限</h4><p>常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限， sql 语句的执行时长。注意：事务的超时时限起作用的条件比较多(例如服务器与用户之间的网速，sql语句执行时长…)，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。 </p><h2 id="使用Spring事务注解管理事务"><a href="#使用Spring事务注解管理事务" class="headerlink" title="使用Spring事务注解管理事务"></a>使用Spring事务注解管理事务</h2><p>通过@Transactional 注解方式， 可将事务织入到相应 public 方法中，实现事务管理。</p><p>@Transactional 的所有可选属性如下所示：</p><ol><li>propagation： 用于设置事务传播属性。该属性类型为 Propagation 枚举，默认值为Propagation.REQUIRED。  </li><li>isolation： 用于设置事务的隔离级别。该属性类型为 Isolation 枚举，默认值为<br> Isolation.DEFAULT。</li><li>readOnly： 用于设置该方法对数据库的操作是否是只读的。该属性为 boolean，默认值为 false。</li><li>timeout： 用于设置本操作与数据库连接的超时时限。单位为秒，类型为 int，默认值为-1，即没有时限。</li><li>rollbackFor： 指定需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组</li><li>rollbackForClassName： 指定需要回滚的异常类类名。类型为 String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li><li>noRollbackFor： 指定不需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li><li>noRollbackForClassName： 指定不需要回滚的异常类类名。类型为 String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li></ol><p>需要注意的是， @Transactional 若用在方法上，只能用于 public 方法上。对于其他非 public方法，如果加上了注解@Transactional， 虽然 Spring 不会报错，但不会将指定事务织入到该方法中。因为 Spring 会忽略掉所有非 public 方法上的@Transaction 注解。若@Transaction 注解在类上，则表示该类上所有的方法均将在执行时织入事务。</p><p>详细笔记见：Spring中LearnSpring12-Spring-trans-annotation模块。</p><h2 id="使用AspectJ的AOP配置管理事务"><a href="#使用AspectJ的AOP配置管理事务" class="headerlink" title="使用AspectJ的AOP配置管理事务"></a>使用AspectJ的AOP配置管理事务</h2><p>详细笔记见：Spring中LearnSpring13-Spring-trans-aspectj模块。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 集成 MyBatis(03)</title>
      <link href="/posts/76b86a2d.html"/>
      <url>/posts/76b86a2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-集成-MyBatis"><a href="#Spring-集成-MyBatis" class="headerlink" title="Spring 集成 MyBatis"></a>Spring 集成 MyBatis</h1><p>将 MyBatis 与 Spring 进行整合，主要解决的问题就是将 SqlSessionFactory 对象交由 Spring来管理。所以，该整合，只需要将 SqlSessionFactory 的对象生成器 SqlSessionFactoryBean 注册在 Spring 容器中，再将其注入给 Dao 的实现类即可完成整合。<br>实现 Spring 与 MyBatis 的整合常用的方式：扫描的 Mapper 动态代理Spring 像插线板一样， mybatis 框架是插头，可以容易的组合到一起。 插线板 spring 插上 Mybatis， 两个框架就是一个整体。  </p><h2 id="Maven相关依赖"><a href="#Maven相关依赖" class="headerlink" title="Maven相关依赖"></a>Maven相关依赖</h2><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring核心依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-tx(事务包)为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-jdbc这个依赖包含对Spring对JDBC 数据访问进行封装的所有类。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--JDBC驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--MyBaits和Spring集成的依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--阿里druid数据库连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--目的是把src/main/java目录中的所有包含xml的文件输出到classes目录中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.target --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.source --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义-MyBatis-主配置文件"><a href="#定义-MyBatis-主配置文件" class="headerlink" title="定义 MyBatis 主配置文件"></a>定义 MyBatis 主配置文件</h2><p>在 src 下定义 MyBatis 的主配置文件，命名为 mybatis.xml。</p><p>这里有两点需要注意：</p><ol><li>主配置文件中不再需要数据源的配置了。因为数据源要交给 Spring 容器来管理了。</li><li>这里对 mapper 映射文件的注册，使用&lt;package/&gt;标签，即只需给出 mapper 映射文件所在的包即可。因为 mapper 的名称与 Dao 接口名相同，可以使用这种简单注册方式。 这种方式的好处是，若有多个映射文件，这里的配置也是不用改变的。当然，也可使用原来的&lt;resource/&gt;标签方式。</li></ol><h2 id="定义Spring-配置文件"><a href="#定义Spring-配置文件" class="headerlink" title="定义Spring 配置文件"></a>定义Spring 配置文件</h2><h3 id="数据源的配置"><a href="#数据源的配置" class="headerlink" title="数据源的配置"></a>数据源的配置</h3><p>使用 JDBC 模板，首先需要配置好数据源，数据源直接以 Bean 的形式配置在 Spring 配置文件中。根据数据源的不同，其配置方式不同：  </p><h3 id="Druid-数据源-DruidDataSource"><a href="#Druid-数据源-DruidDataSource" class="headerlink" title="Druid 数据源 DruidDataSource"></a>Druid 数据源 DruidDataSource</h3><p>Druid 是阿里的开源数据库连接池。 是 Java 语言中最好的数据库连接池。 Druid 能够提供强大的监控和扩展功能。 Druid 与其他数据库连接池的最大区别是提供数据库的官网： <a href="https://github.com/alibaba/druid%E3%80%82">https://github.com/alibaba/druid。</a></p><p>使用地址： <a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/常见问题</a> </p><p>常用配置：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE</a></p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc_url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc_user}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc_password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxOpenPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asyncInit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从属性文件读取数据库连接信息"><a href="#从属性文件读取数据库连接信息" class="headerlink" title="从属性文件读取数据库连接信息"></a>从属性文件读取数据库连接信息</h3><p>为了便于维护，可以将数据库连接信息写入到属性文件中，使 Spring 配置文件从中读取数据。属性文件名称自定义，但一般都是放在 src/resources目录下。</p><pre class="line-numbers language-jdbc.properties"><code class="language-jdbc.properties">jdbc.url=jdbc.username=jdbc.password=jdbc.maxActive=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Spring 配置文件从属性文件中读取数据时，需要在&lt;property/&gt;的 value 属性中使用${ }，将在属性文件中定义的 key 括起来，以引用指定属性的值。  该属性文件若要被 Spring 配置文件读取，其必须在配置文件中进行注册。 使用&lt;context&gt;标签。  </p><p>Spring配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.通过框架Druid连接池获取数据源--></span>    <span class="token comment" spellcheck="true">&lt;!--把数据库配置信息写在一个独立文件中，便于修改数据库的配置内容--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名数据源DataSource,作用是连接数据库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span>          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            使用属性配置文件的数据，语法：${key}        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setUrl()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setUsername()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setPassword()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.maxActive}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setMaxActive()--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.通过上面的数据源和Mabatis主配置文件来获取sqlSessionFactory对象--></span>    <span class="token comment" spellcheck="true">&lt;!--声名的是mybatis中提供的SqlSessionFactoryBean类,这个类内部创建SqlSessionFactory这个对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--set注入,把数据库连接池赋值给了dataSource属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            MyBatis主配置文件位置            configuration属性是Resource类型用来读取配置文件            它的赋值使用value指定文件的路径,使用classpath:表示文件的位置        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.Spring自动扫描指定包中的所有dao对象并自动将对象自动放到Spring容器中--></span>    <span class="token comment" spellcheck="true">&lt;!--创建dao对象使用SqlSession的getMapper(StudentDao.class)        Mapper    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--指定SqlSessionFactory对象的id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            指定包名，包名是dao接口所在的包名。            MapperScannerConfigurer会扫描这个包中所有的接口，把每个接口都执行一次getMapper()方法得到每个接口的dao对象。            创建好的到对象放入到Spring的容器中，dao对象的默认名称就是接口名称的首字母小写        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--4.声名service对象,将dao层创建的对象赋值给service层--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.service.impl.StudentServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细笔记见：Spring中LearnSpring10-Spring-MyBatis模块。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(02)</title>
      <link href="/posts/46926218.html"/>
      <url>/posts/46926218.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>在目标类不增加代码的情况下，给目标类增加功能。</li><li>减少重复的代码。</li><li>让开发人员更加专注于业务逻辑的实现。</li><li>解耦合：将业务功能和日志、事务等非业务功能解耦。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>当需要修改系统中某个类的功能，原有类的功能不完善，而又没有源代码的情况。</li><li>当你需要给项目中多个类增加相同的功能时。</li><li>给业务方法增加事务、日志输出等功能时。</li></ol><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>Spring底层实现了两种方式，一种是实现了JDK动态代理方式，另一种是实现了cglib框架(此框架是专门为了实现AOP而做的)。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>使用的是JDK中的InvocationHandler、Method、Proxy类来创建动态代理从而实现动态代理。</p><p>InvocationHandler：实现InvocationHandler下面的invoke方法从而实现动态代理。</p><p>Method：使用Method执行目标类中的方法。</p><p>Proxy：用于创建代理对象。</p><blockquote><p><strong>注意：</strong>使用JDK动态代理需要使用到接口，如果没有接口可以使用cjlib框架，此框架不需要使用接口，底层使用的是继承来实现动态代理。</p></blockquote><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><p>对于 AOP 这种编程思想，很多框架都进行了实现。 Spring 就是其中之一，可以完成面向切面编程。然而， AspectJ 也实现了 AOP 的功能，且其实现方式更为简捷，使用更为方便，而且还支持注解式开发。所以， Spring 又将 AspectJ 的对于 AOP 的实现也引入到了自己的框架中。在 Spring 中使用 AOP 开发时，一般使用 AspectJ 的实现方式。 </p><p> 官网地址： <a href="http://www.eclipse.org/aspectj/">http://www.eclipse.org/aspectj/</a>  </p><h2 id="AspectJ通知类型"><a href="#AspectJ通知类型" class="headerlink" title="AspectJ通知类型"></a>AspectJ通知类型</h2><p>AspectJ 中常用的通知有五种类型。</p><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><ol><li>在目标方法执行之前先执行的。</li><li>不会改变目标方法执行的结果。</li><li>不会影响目标方法的执行。</li></ol><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><ol><li>在目标方法之后执行。</li><li>能够获取到目标方法的返回值,可以根据这个返回值做不同的处理功能。</li><li>可以修改这个返回值(但是不会影响目标方法的最终返回值，只能改变扩展方法中的返回值)。</li></ol><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><ol><li>它是功能最强的一个通知。</li><li>在目标方法的前和后都能增强功能。</li><li>控制目标方法是否被调用执行。</li><li>修改原来的目标方法的执行结果，影响最后的调用结果。</li><li>此通知类似于JDK底层的动态代理功能。</li></ol><h3 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h3><ol><li>在目标方法抛出异常时执行的。</li><li>可以做异常的监控程序,监控该方法执行时是不是有异常，如果有异常,可以发送邮件,短信通知。</li></ol><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><ol><li>无论目标方法是否执行成功,通知方法一定会执行。</li><li>在目标方法之后执行的。</li></ol><h2 id="AspectJ切入点表达式"><a href="#AspectJ切入点表达式" class="headerlink" title="AspectJ切入点表达式"></a>AspectJ切入点表达式</h2><p>AspectJ 定义了专门的表达式用于指定切入点。表达式的原型是：  </p><pre><code>execution(modifiers-pattern? ret-type-patterndeclaring-type-pattern?name-pattern(param-pattern)throws-pattern?)</code></pre><p>切入点表达式要匹配的对象就是目标方法的方法名，所以execution 表达式中明显就是方法的签名。以上表达式共 4 个部分：execution(访问权限 方法返回值 方法声明(参数) 异常类型) </p><table><thead><tr><th><strong>表达式</strong></th><th>说明</th></tr></thead><tbody><tr><td>modifiers-pattern</td><td>访问权限类型，例(protect、public…)</td></tr><tr><td><strong>ret-type-pattern</strong></td><td>返回值类型</td></tr><tr><td>declaring-type-pattern</td><td>包名类名</td></tr><tr><td><strong>name-pattern(param-pattern)</strong></td><td>方法名(参数类型和参数个数)</td></tr><tr><td>throws-pattern</td><td>抛出异常类型</td></tr></tbody></table><p><strong>注意：</strong>以上表达式中加粗文字表示不可省略部分，各部分间用空格分开。在其中可以使用以下符号：  </p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0至多个任意字符</td></tr><tr><td>..</td><td>用在方法参数中,表示任意多个参数 用在包名后,表示当前包及其子包路径</td></tr><tr><td>+</td><td>用在类名后,表示当前类及其子类 用在接口后,表示当前接口及其实现类</td></tr></tbody></table><p>例子：</p><p>execution(public * *(..))<br>指定切入点为：任意公共方法。<br>execution(* set*(..))<br>指定切入点为：任何一个以“set”开始的方法。<br>execution(* com.xyz.service.*.*(..))<br>指定切入点为：定义在 service 包里的任意类的任意方法。<br>execution(* com.xyz.service..*.*(..))<br>指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后<br>面必须跟“*”，表示包、子包下的所有类。<br>execution(* *..service.*.*(..))<br>指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点<br>execution(* *.service.*.*(..))<br>指定只有一级包下的 serivce 子包下所有类（接口） 中所有方法为切入点<br>execution(* *.ISomeService.*(..))<br>指定只有一级包下的 ISomeSerivce 接口中所有方法为切入点<br>execution(* joke(Object+)))<br>指定切入点为：所有的 joke()方法，方法拥有一个参数，且参数是 Object 类型或该类的子类。<br>不仅 joke(Object ob)是， joke(String s)和 joke(User u)也是。</p><h2 id="Maven相关依赖"><a href="#Maven相关依赖" class="headerlink" title="Maven相关依赖"></a>Maven相关依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--相关依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--aspectj依赖AOP框架--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AspectJ-基于注解的-AOP-实现"><a href="#AspectJ-基于注解的-AOP-实现" class="headerlink" title="AspectJ 基于注解的 AOP 实现"></a>AspectJ 基于注解的 AOP 实现</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="定义业务接口与实现类"><a href="#定义业务接口与实现类" class="headerlink" title="定义业务接口与实现类"></a>定义业务接口与实现类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//业务接口</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//业务接口实现类</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">.</span>SomeService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目标类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            需求:            在doSome执行之前增加执行时间         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====目标方法doSome()===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Aspect: 是aspectj框架中的注解. *          作用:表示当前类是切面类. *          切面类:是用来给业务方法增加功能的类,在这个类中有切面的功能代码 *          使用位置:在类定义上面 */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 指定通知方法中的参数     * 参数类型: JoinPoint (注:JoinPoint中的P为大写)     * JoinPoint:业务方法要加入切面功能的业务方法.     *      作用: 可以在通知方法中获取方法执行时的信息,例如实际调用方法的名称及方法的实参     *            如果切面功能中需要使用实际调用方法中的方法信息就在通知中加入JoinPoint信息     *            这个JoinPoint参数的值是由框架赋予的,必须是通知方法中第一个参数!     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public void com.xrebirth.bean01.impl.SomeServiceImpl.doSome(String,Integer))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通知方法(增强方法)</span>        <span class="token comment" spellcheck="true">//获取方法的完整定义</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的签命(定义):"</span> <span class="token operator">+</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法的名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的名称:"</span> <span class="token operator">+</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法的实参</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历调用实际方法中的参数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法实参--->"</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//切面要执行的功能代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1--前置通知(在目标方法执行之前执行):切面功能:在目标方法之前输出执行时间:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注意:这里方法可以创建多个方法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在Spring配置文件中注册-AspectJ-的自动代理"><a href="#在Spring配置文件中注册-AspectJ-的自动代理" class="headerlink" title="在Spring配置文件中注册 AspectJ 的自动代理"></a>在Spring配置文件中注册 AspectJ 的自动代理</h4><p>在定义好切面 Aspect 后，需要通知 Spring 容器，让容器生成“目标类+ 切面”的代理对象。这个代理是由容器自动生成的。只需要在 Spring 配置文件中注册一个基于 aspectj 的自动代理生成器，其就会自动扫描到@Aspect 注解，并按通知类型与切入点，将其织入，并<br>生成代理。  </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--将对象交给Spring容器,由Spring容器统一创建.管理对象--></span>    <span class="token comment" spellcheck="true">&lt;!--声名目标对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean08.impl.SomeServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名切面类对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean08.MyAspect<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名自动代理生成器: 使用aspectj框架内部的功能,创建目标对象的代理对象        创建代理对象是在内存中实现的,修改目标对象的内存中的结构.创建为代理对象        所以目标对象就是被修改后的代理对象    --></span>    <span class="token comment" spellcheck="true">&lt;!--        在添加aop:aspectj-autoproxy标签之后idea自动添加xml中的spring-aop.xsd约束文件        aspectj-autoproxy:会把spring容器中的所有的目标对象一次性都生成代理对象    --></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;aop:aspectj-autoproxy />--></span>    <span class="token comment" spellcheck="true">&lt;!--        在目标对象有接口情况下使用CGLIB接口        proxy-target-class：代表即使目标类使用的接口实现也要使用CGLIB接口实现动态代理    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试方法使用目标对象中的id"><a href="#测试方法使用目标对象中的id" class="headerlink" title="测试方法使用目标对象中的id"></a>测试方法使用目标对象中的id</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>assertTrue<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">.</span>SomeService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest01</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String config <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从容器中获取目标对象</span>        SomeService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理的对象执行方法,实现目标方法执行时增强了功能</span>        proxy<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体通知中的详细参数见：spring项目中LearnSpring09-AOP-aspectj模块相关代码</p><h3 id="Pointcut-定义切入点"><a href="#Pointcut-定义切入点" class="headerlink" title="@Pointcut 定义切入点"></a>@Pointcut 定义切入点</h3><p>当较多的通知增强方法使用相同的 execution 切入点表达式时，编写、维护均较为麻烦。AspectJ 提供了@Pointcut 注解，用于定义 execution 切入点表达式。其用法是，将@Pointcut 注解在一个方法之上，以后所有的 execution 的 value 属性值均可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。这个使用@Pointcut 注解的方法一般使用 private 的标识方法，即没有实际作用的方法。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//切面类</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean08<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Aspect: 是aspectj框架中的注解. *          作用:表示当前类是切面类. *          切面类:是用来给业务方法增加功能的类,在这个类中有切面的功能代码 *          使用位置:在类定义上面 */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知：在方法执行之前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行最终通知,一定会被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一般用于资源清除工作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Pointcut: 定义和管理切入点，如果项目中有多个切入点表达式需要管理，则可以使用这个注解是可以复用的     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *.doThird(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无需代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring(01)</title>
      <link href="/posts/6dbf31db.html"/>
      <url>/posts/6dbf31db.html</url>
      
        <content type="html"><![CDATA[<h1 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>Spring 的主要作用就是为代码“解耦”，降低代码间的耦合度。 就是让对象和对象（模块和模块）之间关系不是使用代码关联，而是通过配置来说明。即在 Spring 中说明对象（模块）的关系。<br>Spring 根据代码的功能特点， 使用 IOC 降低业务对象之间耦合度。 IOC 使得主业务在相互调用过程中，不用再自己维护关系了，即不用再自己创建要使用的对象了。而是由 Spring容器统一管理，自动“注入” ,注入即赋值。 而 AOP 使得系统级服务得到了最大复用，且<br>不用再由程序员手工将系统级服务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。</p><h2 id="基于XML文件进行DI"><a href="#基于XML文件进行DI" class="headerlink" title="基于XML文件进行DI"></a>基于XML文件进行DI</h2><h3 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h3><h4 id="set-注入"><a href="#set-注入" class="headerlink" title="set 注入"></a>set 注入</h4><p>set 注入也叫设值注入是指，通过 setter 方法传入被调用者的实例。这种注入方式简单、直观，因而在 Spring 的依赖注入中大量使用。  </p><p>注意：spring使用set进行注入时，其使用原理是调用类中的set+变量的方法进行赋值，所以使用set方式尽心赋值类中必须有set方法。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>详见：spring联系中的LearnSpring02模块</p></blockquote><p>引用类型注入</p><p>当指定 bean 的某属性值为另一 bean 的实例时，通过 ref 指定它们间的引用关系。 ref的值必须为某 bean 的 id 值。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean02.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黎霞<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--给引用类型对象赋值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school01<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean02.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>漳州理工职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>贵州省 六盘水市 水城县<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>构造注入是指：在构造调用者实例的同时，完成被调用者的实例化。即使用构造器设置依赖关系。  </p><p>&lt;constructor-arg /&gt;标签中用于指定参数的属性有：</p><ul><li><p>name：指定参数名称。</p></li><li><p>index：指明该参数对应着构造器的第几个参数，从 0 开始。不过，该属性不要也行，<br>  但要注意，若参数类型相同，或之间有包含关系，则需要保证赋值顺序要与构造器中的参数<br>  顺序一致。</p></li><li><p>value：构造方法的形参类型是简单类型的话使用value。</p></li><li><p>ref：构造方法的形参类型是引用类型的话使用ref。</p></li></ul><h5 id="使用name方式进行构造注入"><a href="#使用name方式进行构造注入" class="headerlink" title="使用name方式进行构造注入"></a>使用name方式进行构造注入</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>漳州理工职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>贵州省 六盘水市 水城县<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.使用构造函数注入--></span>    <span class="token comment" spellcheck="true">&lt;!--使用name对构造函数赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student03<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school02<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用value方式进行构造注入"><a href="#使用value方式进行构造注入" class="headerlink" title="使用value方式进行构造注入"></a>使用value方式进行构造注入</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school03<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>山西工商学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>澳门特别行政区 离岛<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.使用构造函数注入--></span>    <span class="token comment" spellcheck="true">&lt;!--使用index对构造函数赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student04<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>王五<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school03<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>27<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用省略value方式进行构造注入"><a href="#使用省略value方式进行构造注入" class="headerlink" title="使用省略value方式进行构造注入"></a>使用省略value方式进行构造注入</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school04<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>山东服装职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京 北京市 怀柔区<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--使用省略index对构造函数赋值--></span>    <span class="token comment" spellcheck="true">&lt;!--省略index必须与构造方法中的参数顺序一样--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student05<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>赵六<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school04<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用类型自动注入"><a href="#引用类型自动注入" class="headerlink" title="引用类型自动注入"></a>引用类型自动注入</h4><p>对于引用类型属性的注入，也可不在配置文件中显示的注入。可以通过为&lt;bean/&gt;标签设置 autowire 属性值，为引用类型属性进行隐式自动注入（默认是不自动注入引用类型属性）。根据自动注入判断标准的不同，可以分为两种：<br>byName：根据名称自动注入<br>byType： 根据类型自动注入  </p><h5 id="byName-方式自动注入"><a href="#byName-方式自动注入" class="headerlink" title="byName 方式自动注入"></a>byName 方式自动注入</h5><p>当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时，可使用byName 方式，让容器自动将被调用者 bean 注入给调用者 bean。容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。  </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--byName进行引用类型自动赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--Spring自动给引用类型对象赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名school对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海南外国语职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>内蒙古自治区 巴彦淖尔市 其它区<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="byType-方式自动注入"><a href="#byType-方式自动注入" class="headerlink" title="byType 方式自动注入"></a>byType 方式自动注入</h5><p>使用 byType 方式自动注入，要求：配置文件中被调用者 bean 的 class 属性指定的类，要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同，要么有 is-a 关系（子类，或是实现类）。但这样的注意：同源的被调用 bean 只能有一个。多于一个，spring容器就会报错。</p><ol><li>java类中引用类型的数据类型和bean的class的值是相同的。（类型相同）</li><li>java类中引用类型的数据类型和bean的class的值是父子关系。（继承关系）</li><li>java类中引用类型的数据类型和bean的class的值接口和实现类关系。（实现关系）</li></ol><blockquote><p>详见：LearnSpring04模块</p></blockquote><h3 id="为应用指定多个-Spring-配置文件"><a href="#为应用指定多个-Spring-配置文件" class="headerlink" title="为应用指定多个 Spring 配置文件"></a>为应用指定多个 Spring 配置文件</h3><p>在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将Spring 配置文件分解成多个配置文件。</p><h4 id="包含关系的配置文件"><a href="#包含关系的配置文件" class="headerlink" title="包含关系的配置文件"></a>包含关系的配置文件</h4><p>多个配置文件中有一个总文件，总配置文件将各其它子文件通过<import>引入。在 Java代码中只需要使用总配置文件对容器进行初始化即可。</import></p><p>school模块：  </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--school模块所有bean声名 school模块的配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>田洋<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>甘肃省 白银市 靖远县<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>student模块：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--student模块所有bean声名 student模块的配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring总配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--加载的是文件列表--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:bean01/spring-school.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:bean01/spring-student.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Spring中可以使用通配符，但此时要求父配置文件名不能满足所能匹配的格式，否则将出现循环递归包含。就本例而言，父配置文件不能匹配 spring-*.xml 的格式，即不能起名为spring-total.xml。 </p><p>使用通配符配置总配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:bean01/spring-*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h2><p> 概述：对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 bean 实例。Spring 中使用注解，需要在原有 Spring 运行环境基础上再做一些改变。需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。  使用注解开发需要在xml文件中加入组件扫描器，目的是通过组件扫描器扫面指定类中的注解从而实现注解开发。</p><h3 id="声名组件扫描器"><a href="#声名组件扫描器" class="headerlink" title="声名组件扫描器"></a>声名组件扫描器</h3><h4 id="使用多次组件扫描器指定不同的包"><a href="#使用多次组件扫描器指定不同的包" class="headerlink" title="使用多次组件扫描器指定不同的包"></a>使用多次组件扫描器指定不同的包</h4><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--第一种方式：使用多次组件扫描器指定不同的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean02<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用分隔符-或-分隔多个包名"><a href="#使用分隔符-或-分隔多个包名" class="headerlink" title="使用分隔符(;或,)分隔多个包名"></a>使用分隔符(;或,)分隔多个包名</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第二种方式:使用分隔符(;或,)分隔多个包名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01;com.xrebirth.bean02<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="指定父包下所有资源进行自动扫描注解"><a href="#指定父包下所有资源进行自动扫描注解" class="headerlink" title="指定父包下所有资源进行自动扫描注解"></a>指定父包下所有资源进行自动扫描注解</h4><blockquote><p>注意：不建议使用顶级的父包，扫描的路径比较多，导致容器启动时间变慢。指定到目标包和合<br>适的。也就是注解所在包全路径。例如注解的类在 com.xrebirth 包中。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第三种方式：指定父包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="定义-Bean-注解-Component"><a href="#定义-Bean-注解-Component" class="headerlink" title="定义 Bean 注解@Component"></a>定义 Bean 注解@Component</h3><ul><li><p>作用：创建对象的，等同于&lt;bean&gt;&lt;/bean&gt;标签功能。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myStudent"</span><span class="token punctuation">)</span> 等同于 <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myStudent"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.xrebirth.bean01.Student"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>属性： value就是对象的名称，也就是bean的id值(value的值是唯一的，创建的对象在spring中就一个)。</p></li><li><p>位置：注解使用在类的上面。</p></li></ul><p>全程写法：</p><pre class="line-numbers language-xml"><code class="language-xml">@Component(value = "myStudent")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简称写法：</p><pre class="line-numbers language-xml"><code class="language-xml">@Component("myStudent")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：@Component 不指定 value 属性， bean 的 id 是类名的首字母小写。  </p><h3 id="Spring-还提供了另外-3-个创建对象的注解"><a href="#Spring-还提供了另外-3-个创建对象的注解" class="headerlink" title="Spring 还提供了另外 3 个创建对象的注解"></a>Spring 还提供了另外 3 个创建对象的注解</h3><ol><li>@Repository：用于对 DAO层 实现类进行注解。</li><li> @Service ：用于对 Service层 实现类进行注解。</li><li>@Controller：用于对 Controller 实现类进行注解。</li></ol><blockquote><p>这三个注解与@Component 都可以创建对象，但这三个注解还有其他的含义， @Service创建业务层对象，业务层对象可以加入事务功能， @Controller 注解创建的对象可以作为处理器接收用户的请求。  </p></blockquote><p>@Repository， @Service， @Controller 是对@Component 注解的细化，标注不同层的对象。 即持久层对象，业务层对象，控制层对象。    </p><h3 id="简单类型属性注入-Value"><a href="#简单类型属性注入-Value" class="headerlink" title="简单类型属性注入@Value"></a>简单类型属性注入@Value</h3><p>需要在属性上使用注解@Value，该注解的 value 属性用于指定要注入的值。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注解参数中省略了value属性,该属性用于指定Bean的id</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myStudent"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//@Value(value = "小明")简写("常用方式")</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value(value = "20")</span>    <span class="token comment" spellcheck="true">//简写("常用方式")</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="byType-自动注入-Autowired"><a href="#byType-自动注入-Autowired" class="headerlink" title="byType 自动注入@Autowired"></a>byType 自动注入@Autowired</h3><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 方法上。Autowired默认使用的是byType自动注入。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//使用在set方法上面</span>    <span class="token comment" spellcheck="true">//@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSchool</span><span class="token punctuation">(</span>School school<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="byName-自动注入-Autowired-与-Qualifier"><a href="#byName-自动注入-Autowired-与-Qualifier" class="headerlink" title="byName 自动注入@Autowired 与@Qualifier"></a>byName 自动注入@Autowired 与@Qualifier</h3><p>@Autowired  注解默认注入方式为byType如果需要byName方式则需要在引用属性上联合使用注解@Autowired 与@Qualifier。 @Qualifier 的 value 属性用于指定要匹配的 Bean 的 id 值。 类中无需 set 方法，也可加到 set 方法上。  </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在set方法上面</span>    <span class="token comment" spellcheck="true">//@Autowired</span>    <span class="token comment" spellcheck="true">//@Qualifier("mySchool")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSchool</span><span class="token punctuation">(</span>School school<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Autowired默认属性"><a href="#Autowired默认属性" class="headerlink" title="@Autowired默认属性"></a>@Autowired默认属性</h3><p>@Autowired 还有一个属性 required，默认值为 true，表示当匹配失败后，会终止程序运行。若将其值设置为 false，则匹配失败，将被忽略，未匹配的属性值为 null。  </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JDK-注解-Resource-自动注入"><a href="#JDK-注解-Resource-自动注入" class="headerlink" title="JDK 注解@Resource 自动注入"></a>JDK 注解@Resource 自动注入</h3><p>Spring提供了对JDK中@Resource注解的支持。@Resource 注解既可以按名称匹配Bean，也可以按类型匹配 Bean。 <strong>默认是按名称注入。</strong> 使用该注解，要求 JDK 必须是 6 及以上版本。@Resource 可在属性上，也可在 set 方法上。  </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用byName匹配则需要加入那么属性</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mySchool"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>@Resource 注解自JDK6以上才会支持，但是自JDK11版本移除了javax.annotation包，所以如果JDK11使用需要在Maven中加入相关的依赖才可使用。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--@Resource注解依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解与-XML-的对比"><a href="#注解与-XML-的对比" class="headerlink" title="注解与 XML 的对比"></a>注解与 XML 的对比</h2><h3 id="注解优点："><a href="#注解优点：" class="headerlink" title="注解优点："></a>注解优点：</h3><ul><li>方便</li><li>直观</li><li>高效（代码少，没有配置文件的书写那么复杂）  </li></ul><h3 id="注解缺点："><a href="#注解缺点：" class="headerlink" title="注解缺点："></a>注解缺点：</h3><p>以硬编码的方式写入到 Java 代码中，修改是需要重新编译代码。</p><h3 id="XML-方式优点："><a href="#XML-方式优点：" class="headerlink" title="XML 方式优点："></a>XML 方式优点：</h3><p>配置和代码是分离的</p><p>在 xml 中做修改，无需编译代码，只需重启服务器即可将新的配置加载。  </p><h3 id="XML-方式缺点："><a href="#XML-方式缺点：" class="headerlink" title="XML 方式缺点："></a>XML 方式缺点：</h3><p>编写麻烦，效率低，大型项目过于复杂。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接收json数组报错使用JSON.parse()方法将数据(字符串)转化js对象</title>
      <link href="/posts/3a968ef.html"/>
      <url>/posts/3a968ef.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题：接收json数组报错使用JSON-parse-方法将数据-字符串-转化js对象"><a href="#问题：接收json数组报错使用JSON-parse-方法将数据-字符串-转化js对象" class="headerlink" title="问题：接收json数组报错使用JSON.parse()方法将数据(字符串)转化js对象"></a>问题：接收json数组报错使用JSON.parse()方法将数据(字符串)转化js对象</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在后端传给前端数据(JSON数组)时，JS通过Jquery遍历JSON数组时报以下异常：</p><p>JS：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"[{\"id\":\"1\",\"name\":\"Jsck\"},{\"id\":\"2\",\"name\":\"Array\"}]"</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Error：</p><pre class="line-numbers language-javascriptError"><code class="language-javascriptError">Uncaught TypeError: Cannot use 'in' operator to search for 'length' in [{"id":"1","name":"Jsck"},{"id":"2","name":"Array"}]    at isArrayLike (jquery.js:528)    at Function.each (jquery.js:359)    at test.html?_ijt=tkj0ksfomg7p7vvakpi2jlssuv&_ij_reload=RELOAD_ON_SAVE:15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>在JS中需要用JSON中的parse()方法将JSON数组或JSON对象转换成JS对象在使用Jquery中的earch()方法遍历就不会报错了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"[{\"id\":\"1\",\"name\":\"Jsck\"},{\"id\":\"2\",\"name\":\"Array\"}]"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用JSON中的parse()方法将JSON转换成JS对象</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>具体原因我也不知道，如果有大神看到此文章并且知道原因，请不惜赐教。</p>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSError </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UUID</title>
      <link href="/posts/e7eabd12.html"/>
      <url>/posts/e7eabd12.html</url>
      
        <content type="html"><![CDATA[<h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>UUID(Universally Unique Identifier)全局唯一标识符,是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字。由以下几部分的组合：当前日期和时间(UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同)，时钟序列，全局唯一的IEEE机器识别号（如果有网卡，从网卡获得，没有网卡以其他方式获得），UUID的唯一缺陷在于生成的结果串会比较长。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><strong>UUID由以下几部分的组合：</strong></p><ul><li>当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</li><li>时钟序列。</li><li>全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</li></ul><p>UUID的唯一缺陷在于生成的结果串会比较长。</p><h2 id="UUID格式"><a href="#UUID格式" class="headerlink" title="UUID格式"></a>UUID格式</h2><p>UUID的标准格式：<code>xxxxxxxx-xxxx-Axxx-Bxxx-xxxxxxxxxxxx</code>，A那个位置代表版本号，由于UUID的标准实现有5个版本，所以只会是1,2,3,4,5； B那个位置只会是8,9,a,b。<br>UUID在发展过程中，为了适应不同的需要，产生了5个版本：</p><ul><li>uuid1: 基于时间戳、机器MAC地址生成。由于使用MAC地址，可以保证全球范围的唯一性。</li><li>uuid2: 只基于时间戳，不常用。</li><li>uuid3: 基于namespace和一个自定义字符串，不常用。</li><li>uuid4: 只基于随机数，最常用，但不推荐，重复几率不太能让人接受。</li><li>uuid5: 只基于namespace，不常用</li></ul><h2 id="UUID作用"><a href="#UUID作用" class="headerlink" title="UUID作用"></a>UUID作用</h2><p><strong>UUID的是让分布式系统中的所有元素都能有唯一的辨识信息</strong>，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。</p><h2 id="Java-中-UUID-的生成与使用"><a href="#Java-中-UUID-的生成与使用" class="headerlink" title="Java 中 UUID 的生成与使用"></a>Java 中 UUID 的生成与使用</h2><p>Java中的默认UUID生成是使用版本4的。uuid4: 只基于随机数，最常用，但不推荐，重复几率不太能让人接受。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str<span class="token operator">=</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：0c25be0f-b62d-4007-bae0-ef2f8c3ee162</span>        <span class="token comment" spellcheck="true">//生成十个不同的数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str<span class="token operator">=</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理结果数</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">"字符："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：76ea0ab6cfca4b9d8174c90a537e2758</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis(01)</title>
      <link href="/posts/dc8e0dd8.html"/>
      <url>/posts/dc8e0dd8.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis学习笔记"><a href="#MyBatis学习笔记" class="headerlink" title="MyBatis学习笔记"></a>MyBatis学习笔记</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p>界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）  </p><ol><li>界面层（表示层，视图层）： 主要功能是接受用户的数据，显示请求的处理结果。使用 web 页面和<br> 用户交互，手机 app 也就是表示层的，用户在 app 中操作，业务逻辑在服务器端处理。  </li><li>业务逻辑层：接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。  </li><li>数据访问层： 与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交<br> 给业务层，同时将业务层处理的数据保存到数据库 。</li></ol><h3 id="三层交互顺序"><a href="#三层交互顺序" class="headerlink" title="三层交互顺序"></a>三层交互顺序</h3><p>用户—&gt; 界面层—&gt;业务逻辑层—&gt;数据访问层—&gt;DB 数据库  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2015%3A%E6%97%A5%2015%3A%E6%97%B6%2008%3A%E5%88%86%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.jpg" alt="三层架构顺序"></p><h3 id="三层架构优点"><a href="#三层架构优点" class="headerlink" title="三层架构优点"></a>三层架构优点</h3><ol><li>结构清晰、耦合度低, 各层分工明确。</li><li>可维护性高，可扩展性高。</li><li>有利于标准化。</li><li>开发人员可以只关注整个结构中的其中某一层的功能实现。</li><li>有利于各层逻辑的复用。</li></ol><h3 id="框架定义"><a href="#框架定义" class="headerlink" title="框架定义"></a>框架定义</h3><p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种认为，框架是可被应用开发者定制的应用骨架、模板。简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。 从另一个角度来说框架一个舞台，你在舞台上做表演。在框架基础上加入你要完成的功能。框架安全的，可复用的，不断升级的软件。</p><h3 id="框架解决的问题"><a href="#框架解决的问题" class="headerlink" title="框架解决的问题"></a>框架解决的问题</h3><p>框架要解决的最重要的一个问题是技术整合，在 JavaEE 的框架中，有着各种各样的技术，不同的应用，系统使用不同的技术解决问题。需要从 JavaEE 中选择不同的技术，而技术自身的复杂性，有导致更大的风险。企业在开发软件项目时，主要目的是解决业务问题。 即要求企业负责技术本身，又要求解决业务问题。这是大多数企业不能完成的。框架把相关的技术融合在一起，企业开发可以集中在业务领<br>域方面。另一个方面可以提供开发的效率。</p><h3 id="常用框架-JavaEE常用"><a href="#常用框架-JavaEE常用" class="headerlink" title="常用框架(JavaEE常用)"></a>常用框架(JavaEE常用)</h3><h4 id="MyBatis-框架："><a href="#MyBatis-框架：" class="headerlink" title="MyBatis 框架："></a>MyBatis 框架：</h4><p>MyBatis 是一个优秀的基于 java 的持久层框架，内部封装了 jdbc，开发者只需要关注 sql 语句本身，而不需要处理加载驱动、创建连接、创建 statement、关闭连接，资源等繁杂的过程。MyBatis 通过 xml 或注解两种方式将要执行的各种 sql 语句配置起来，并通过 java 对象和 sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java对象并返回。  </p><h4 id="Spring-框架："><a href="#Spring-框架：" class="headerlink" title="Spring 框架："></a>Spring 框架：</h4><p>Spring 框架为了解决软件开发的复杂性而创建的。 Spring 使用的是基本的 JavaBean 来完成以前非常复杂的企业级开发。 Spring 解决了业务对象，功能模块之间的耦合，不仅在 javase、web 中使用，大部分 Java 应用都可以从 Spring 中受益。Spring 是一个轻量级控制反转(LOC)和面向切面(AOP)的容器。  </p><h4 id="SpringMVC-框架："><a href="#SpringMVC-框架：" class="headerlink" title="SpringMVC 框架："></a>SpringMVC 框架：</h4><p>Spring MVC 属于 SpringFrameWork 3.0 版本加入的一个模块， 为 Spring 框架提供了构建 Web应用程序的能力。 现在可以 Spring 框架提供的 SpringMVC 模块实现 web 应用开发， 在 web 项目中可以无缝使用 Spring 和 Spring MVC 框架。  </p><h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件"></a>MyBatis配置文件</h2><h3 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h3><ol><li>xml 文件，需要在头部使用约束文件</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>根元素&lt;configuration&gt;<ul><li>根元素主要包括：<ul><li>定义别名  </li><li>数据源  </li><li>Mapper文件</li></ul></li></ul></li></ol><h3 id="lt-dataSource-gt-标签"><a href="#lt-dataSource-gt-标签" class="headerlink" title="<dataSource>标签"></a>&lt;dataSource&gt;标签</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Mybatis 中访问数据库，可以连接池技术，但它采用的是自己的连接池技术。在 Mybatis 的 mybatis.xml配置文件中，通过&lt;dataSource type=”pooled” &gt;来实现 Mybatis 中连接池的配置。</p><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2017%3A%E6%97%A5%2017%3A%E6%97%B6%2002%3A%E5%88%86dataSource%E7%B1%BB%E5%9E%8B.png" alt="dataSource类型"></p><p>从上图看出 Mybatis 将数据源分为三类：</p><table><thead><tr><th>数据源</th><th>说明</th></tr></thead><tbody><tr><td>UNPOOLED</td><td>不使用连接池的数据源</td></tr><tr><td>POOLED</td><td>使用连接池的数据源</td></tr><tr><td>JNDI</td><td>使用 JNDI 实现的数据源</td></tr></tbody></table><p>其中 UNPOOLED ,POOLED 数据源实现了 javax.sq.DataSource 接口， JNDI 和前面两个实现方式不同，了解就可以。  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2017%3A%E6%97%A5%2017%3A%E6%97%B6%2007%3A%E5%88%86DataSource%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="DataSource实现类"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>MyBatis 在初始化时，根据&lt;dataSource&gt;的 type 属性来创建相应类型的的数据源 DataSource，即：</p><ul><li>type=” POOLED”： MyBatis 会创建 PooledDataSource 实例。</li><li>type=” UNPOOLED” ： MyBatis 会创建 UnpooledDataSource 实例。</li><li>type=” JNDI”： MyBatis 会从 JNDI 服务上查找 DataSource 实例，然后返回使用。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--连接数据库的四个要素--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="提交事务机制"><a href="#提交事务机制" class="headerlink" title="提交事务机制"></a>提交事务机制</h4><p>Mybatis 框架是对 JDBC 的封装，所以 Mybatis 框架的事务控制方式，本身也是用 JDBC 的 Connection<br>对象的 commit()、rollback()方法来进行事务的提交与回滚。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上标签用于指定 MyBatis 所使用的事务管理器。 MyBatis 支持两种事务管理器类型： <strong>JDBC</strong> 与 <strong>MANAGED</strong>。  </p><ul><li><p>JDBC：使用 JDBC 的事务管理机制。即，通过 Connection 的 commit()方法提交，通过 rollback()方法回滚。但默认情况下， MyBatis 将自动提交功能关闭了，改为了手动提交。即程序中需要显式的对事务进行提交或回滚。从日志的输出信息中可以看到。  </p></li><li><p>MANAGED：由容器来管理事务的整个生命周期(如 Spring 容器)。  </p></li></ul><h4 id="自动-手动提交事务"><a href="#自动-手动提交事务" class="headerlink" title="自动/手动提交事务"></a>自动/手动提交事务</h4><p>可以使用factory的openSession()方法控制是否为开启事务。</p><ul><li>openSession(true)自动提交</li><li> openSession(false)手动提交</li></ul><h3 id="数据库属性配置文件"><a href="#数据库属性配置文件" class="headerlink" title="数据库属性配置文件"></a>数据库属性配置文件</h3><p>为了方便对数据库连接的管理， DB 连接四要素数据一般都是存放在一个专门的属性文件中的。 MyBatis主配置文件需要从这个属性文件中读取这些数据。</p><ol><li><p>在resources资源文件中创建xxxx.properties配置文件，并在配置文件中写入jdbc的相关属性。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/databaseName?charset=utf-8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">username</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在主配置文件中配置资源文件<br> 在根目录下创建标签&lt;properties&gt;标签。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在主配置相关的指定值。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="typeAliases-全限定别名"><a href="#typeAliases-全限定别名" class="headerlink" title="typeAliases(全限定别名)"></a>typeAliases(全限定别名)</h3><p>Mybatis 支持默认别名，我们也可以采用自定义别名方式来开发，主要使用在&lt;select resultType=”别名”&gt;mybatis.xml 主配置文件定义别名。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    定义单个类型的别名    type:类型的全限定名称    alias:自定义别名    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain.Student<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--    批量定义别名，扫描整个包下的类，别名为类名（首字母大写或小写都可以）    name:包名    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...其他包<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射(Mapper)文件可以使用别名表示</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudents<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from tableName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Mapper-映射器"><a href="#Mapper-映射器" class="headerlink" title="Mapper(映射器)"></a>Mapper(映射器)</h3><ol><li><p>使用相对于类路径的资源,从 classpath 路径查找文件(区分大小写)。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xrebirth/dao/MapperFileName.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定包下的所有Dao接口，注意：此种方法要求 Dao 接口名称和 mapper 映射文件名称相同，且在同一个目录中。  </p><pre class="line-numbers language-xml"><code class="language-xml">&lt;package name="com.xrebirth.dao"/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="入门MaBatis框架-idea-maven"><a href="#入门MaBatis框架-idea-maven" class="headerlink" title="入门MaBatis框架(idea+maven)"></a>入门MaBatis框架(idea+maven)</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>MYSQL</li><li>IDEA</li></ol><h3 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h3><ul><li>根据项目类型使用原型创建不同的项目(这里使用的是JavaSE项目演示)</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2015%3A%E6%97%A5%2015%3A%E6%97%B6%2030%3A%E5%88%861.%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.jpg" alt="创建maven项目"></p><h3 id="配置pom文件添加依赖"><a href="#配置pom文件添加依赖" class="headerlink" title="配置pom文件添加依赖"></a>配置pom文件添加依赖</h3><ul><li>添加jdbc依赖</li><li>添加MyBatis框架依赖</li><li>不过滤main包中的配置文件</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2015%3A%E6%97%A5%2015%3A%E6%97%B6%2035%3A%E5%88%862.%E9%85%8D%E7%BD%AEpom%E6%96%87%E4%BB%B6.jpg" alt="配置maven中pom文件"></p><h3 id="创建entity-实体类包-和dao-数据访问包"><a href="#创建entity-实体类包-和dao-数据访问包" class="headerlink" title="创建entity(实体类包)和dao(数据访问包)"></a>创建entity(实体类包)和dao(数据访问包)</h3><ul><li>在entity中创建Student实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Integer id<span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在dao包中创建StudentDao接口"><a href="#在dao包中创建StudentDao接口" class="headerlink" title="在dao包中创建StudentDao接口"></a>在dao包中创建StudentDao接口</h3><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在dao包中创建创建StudentDao-xmlMapper映射文件-配置文件名称要与dao接口名称一样"><a href="#在dao包中创建创建StudentDao-xmlMapper映射文件-配置文件名称要与dao接口名称一样" class="headerlink" title="在dao包中创建创建StudentDao.xmlMapper映射文件(配置文件名称要与dao接口名称一样)"></a>在dao包中创建创建StudentDao.xmlMapper映射文件(配置文件名称要与dao接口名称一样)</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--    namespace：要与dao接口中的名称一样--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.dao.StudentDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        resultType：要与所要接收对象的实体类对象一致    --></span>    <span class="token comment" spellcheck="true">&lt;!--查询语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDemo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from student where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--插入语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InsertDate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into student (name, age, email) values (#{name},#{age},#{email});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在resources资源文件中创建MyBatis主配置文件-添加jdbc相关配置"><a href="#在resources资源文件中创建MyBatis主配置文件-添加jdbc相关配置" class="headerlink" title="在resources资源文件中创建MyBatis主配置文件(添加jdbc相关配置)"></a>在resources资源文件中创建MyBatis主配置文件(添加jdbc相关配置)</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置mybatis环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--id：数据源名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--type：配置事务类型(使用jdbc事务)使用Connection的提交和回滚--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--                dataSource：创建数据库Connection对象                type：POOLED 使用数据库连接池            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--连接数据库四要素--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/exercise_02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>963936892<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--告诉mybatis要执行sql语句的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xrebirth/dao/DemoMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建utils包创建MySqlUtil类"><a href="#创建utils包创建MySqlUtil类" class="headerlink" title="创建utils包创建MySqlUtil类"></a>创建utils包创建MySqlUtil类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory factory <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        String config <span class="token operator">=</span> <span class="token string">"mybatis.xml"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建SqlSessionFactory对象，使用</span>            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取sqlSession对象     * @return SqlSession对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMybatis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.【重要】从SqlSessionFactory中获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.【重要】指定要执行的sql语句标识。sql映射文件中的namespace+"."+标签的id值</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao"</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token string">"selectDemo"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.通过sqlId找到语句，执行sql语句</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.输出结果</span>        studentsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭SqlSesson对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------查询结束----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.【重要】从SqlSessionFactory中获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.【重要】指定要执行的sql语句标识。sql映射文件中的namespace+"."+标签的id值</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao"</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token string">"InsertDate"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建要插入的学生对象数据</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"曹洋"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"v.fysr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.通过sqlId找到语句，执行sql语句</span>        <span class="token keyword">int</span> nums <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.判断结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功,成功插入"</span><span class="token operator">+</span>nums<span class="token operator">+</span><span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.mybatis默认不是自动提交事务，所以需要在insert、update、delete后手动提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭sqlSession对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------插入结束----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyBatis使用传统Dao开发方式"><a href="#MyBatis使用传统Dao开发方式" class="headerlink" title="MyBatis使用传统Dao开发方式"></a>MyBatis使用传统Dao开发方式</h2><ul><li>使用 Dao 的实现类,操作数据库  </li></ul><h3 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询操作</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入操作</span>    <span class="token keyword">int</span> <span class="token function">insertStudents</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建Dao接口实现类"><a href="#创建Dao接口实现类" class="headerlink" title="创建Dao接口实现类"></a>创建Dao接口实现类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取sqlId</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao.selectStudents"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭SqlSession对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果集</span>        <span class="token keyword">return</span> studentsList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertStudents</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取sqlId</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao.insertStudents"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建测试类-1"><a href="#创建测试类-1" class="headerlink" title="创建测试类"></a>创建测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMyBatis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDao studentDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        studentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDao studentDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"孔刚"</span><span class="token punctuation">,</span> <span class="token string">"k.juzevzb@jlefmiipvu.tv"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">insertStudents</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"插入成功,共插入:"</span> <span class="token operator">+</span> result <span class="token operator">:</span> <span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态代理-总结"><a href="#动态代理-总结" class="headerlink" title="动态代理(总结)"></a>动态代理(总结)</h3><p>MyBatis动态代理：<br>    List&lt;Student&gt; studentList = dao.selectStudents();</p><ol><li>dao对象类型是StudentDao，全限定名称是：com.xrebirth.dao.StudentDao（全限定名称和namespace是一样的）</li><li>方法名：selectStudents和namespace是一样的</li><li>通过dao中方法返回值也可以确定MyBatis要调用的SqlSession的方法<br> 如果返回值是List则调用的是SqlSession.selectList()方法<br> 如果返回值是int或者不是List、则看mapper文件中的标签是&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;就会调用SqlSession中的insert、update、dalete相关的方法</li><li>总结：通过以上第一点和第二点可以定位到接口和方法名，通过第三点可以推测出SQL执行的相应命令，以上三个条件都具备就可以使用MyBatis动态代理进行相关方法的增强。</li></ol><h2 id="Dao动态代理实现CURD"><a href="#Dao动态代理实现CURD" class="headerlink" title="Dao动态代理实现CURD"></a>Dao动态代理实现CURD</h2><p>实现接口中的方法</p><h3 id="传统-Dao-开发方式的分析"><a href="#传统-Dao-开发方式的分析" class="headerlink" title="传统 Dao 开发方式的分析"></a>传统 Dao 开发方式的分析</h3><p>在前面例子中自定义 Dao 接口实现类时发现一个问题： Dao 的实现类其实并没有干什么实质性的工作，它仅仅就是通过 SqlSession 的相关 API 定位到映射文件 mapper 中相应 id 的 SQL 语句，真正对 DB 进行操作的工作其实是由框架通过 mapper 中的 SQL 完成的。<br>所以， MyBatis 框架就抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对DB 进行操作。这种对 Dao 的实现方式称为 Mapper 的动态代理方式。Mapper 动态代理方式无需程序员实现 Dao 接口。接口是由 MyBatis 结合映射文件自动生成的动态代<br>理实现的。</p><h3 id="使用getMapper获取代理对象"><a href="#使用getMapper获取代理对象" class="headerlink" title="使用getMapper获取代理对象"></a>使用getMapper获取代理对象</h3><p>只需调用 SqlSession 的 getMapper()方法，即可获取指定接口的实现类对象。该方法的参数为指定 Dao接口类的 class 值。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testStudent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过动态代理获取StudentDao中的对象</span>        StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用selectStudent()方法</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用insertStudent()方法</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"于敏"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">"w.yegdxzltlp@dmimevk.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用updateStudent()方法</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"彭刚"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">updateStudent</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用deleteStudent()方法</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result3 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">deleteStudent</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功插入："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"条"</span> <span class="token operator">:</span> <span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功修改："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"条"</span> <span class="token operator">:</span> <span class="token string">"修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功删除："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"条"</span> <span class="token operator">:</span> <span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历输出</span>        studentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：Mapper配置文件中的sql语句id要与接口方法名称相同。</p><h2 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h2><h3 id="typeAlias"><a href="#typeAlias" class="headerlink" title="typeAlias"></a>typeAlias</h3><p>类型别名是为Java类型设置一个短的名字，可以方便我们引用某个类。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--定义别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第一种方式：        可以指定一个类型一个自定义别名        type：自定义类型的全限定名称        alias：别名(短小，容易记忆)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.StudentStu<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>以上两种方式是在主配置文件中定义别名。</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--第二种方式：        &lt;package>        name是包名，这个包中的所有类的类名就是别名(类名不区分大小写)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><p>在该类创建时，使用@Alias注解为其指定一个别名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Alias定义别名</span><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentStu</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>值得注意的是，MyBatis已经为许多常见的Java类型内建了相应的类型别名。它们都是大小写不敏感的，我们在起别名的时候千万不要占用已有的别名。</p><h4 id="映射别名"><a href="#映射别名" class="headerlink" title="映射别名"></a>映射别名</h4><table><thead><tr><th align="center">别名</th><th align="center">映射类型</th></tr></thead><tbody><tr><td align="center">_byte</td><td align="center">byte</td></tr><tr><td align="center">_long</td><td align="center">long</td></tr><tr><td align="center">_short</td><td align="center">short</td></tr><tr><td align="center">_int</td><td align="center">int</td></tr><tr><td align="center">_integer</td><td align="center">int</td></tr><tr><td align="center">_double</td><td align="center">double</td></tr><tr><td align="center">_float</td><td align="center">float</td></tr><tr><td align="center">_boolean</td><td align="center">boolean</td></tr><tr><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">integer</td><td align="center">Integer</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">date</td><td align="center">Date</td></tr><tr><td align="center">decimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">bigdecimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">map</td><td align="center">Map/HashMap</td></tr></tbody></table><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h3><p>接口中方法参数的类型， 类型的完全限定名或别名。这个属性是可选的，因为 MyBatis可以推断出具体传入语句的参数，默认值为未设置（ unset）。 接口中方法的参数从 java 代码传入到mapper 文件的sql语句。里面的参数类型可以写全限定名称也可以写MyBatis别名类型，例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteStudent<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from student where id=#{studentId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等同于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteStudent<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from student where id=#{studentId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MyBatis传递参数"><a href="#MyBatis传递参数" class="headerlink" title="MyBatis传递参数"></a>MyBatis传递参数</h3><p>Dao 接口中方法的参数只有一个简单类型（java 基本类型和 String），占位符 #{ 任意字符 }，和方法的参数名无关。  </p><h4 id="单个参数传递"><a href="#单个参数传递" class="headerlink" title="单个参数传递"></a>单个参数传递</h4><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单个参数传递</span>Student <span class="token function">selectStudentId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--单个参数传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--#{studentId} , studentId 是自定义的变量名称，和方法参数名无关--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 单个参数传递*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id为1的学生对象为："</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个参数传递-使用-Param"><a href="#多个参数传递-使用-Param" class="headerlink" title="多个参数传递-使用@Param"></a>多个参数传递-使用@Param</h4><p>当 Dao 接口方法多个参数，需要通过名称使用参数。 在方法形参前面加入@Param(“自定义参数名”)，mapper 文件使用#{自定义参数名}。 </p><h5 id="例如：-1"><a href="#例如：-1" class="headerlink" title="例如："></a>例如：</h5><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数传递：命名参数在形参定义的前面加入@Param("自定义参数名称")</span>Student <span class="token function">selectMultiParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--多个参数传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiParam<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name} and age = #{age};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 多个参数传递*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiParam</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三，年龄20的查询为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三，年龄20的查询结果为："</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个参数传递-使用对象"><a href="#多个参数传递-使用对象" class="headerlink" title="多个参数传递-使用对象"></a>多个参数传递-使用对象</h4><h5 id="使用规范版开发"><a href="#使用规范版开发" class="headerlink" title="使用规范版开发"></a>使用规范版开发</h5><h6 id="例如：-2"><a href="#例如：-2" class="headerlink" title="例如："></a>例如：</h6><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-使用对象传参</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiObject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        多个参数的传递-使用java对象的属性值,作为参数实际值        使用对象语法：#{对象属性名,javaType=类型名称(全限定名称),jdbcType=数据类型}        javaType：指java中的属性数据类型        jdbcType：指数据库中的数据类型        例如：#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}        以上方法在实际操作中很少用到，实际开发中会用简化版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiObject<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name,javaType=java.lang.String,jdbcType=VARCHAR} or age = #{age,javaType=java.lang.Integer,jdbcType=INTEGER}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-Java"><code class="language-Java">/***  多个参数的传递-使用对象传参*/@Testpublic void testSelectMultiObject() {    SqlSession sqlSession = getSqlSession();    StudentDao dao = sqlSession.getMapper(StudentDao.class);    Student stu = new Student(null, "张三", 11, null);    List<Student> studentsList = dao.selectMultiObject(stu);    studentsList.forEach((stuItem)->System.out.println("姓名：张三或年龄11的查询结果为："+stuItem));    sqlSession.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用简化版开发"><a href="#使用简化版开发" class="headerlink" title="使用简化版开发"></a>使用简化版开发</h5><h6 id="例如：-3"><a href="#例如：-3" class="headerlink" title="例如："></a>例如：</h6><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-使用对象传参</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiObject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    多个参数的传递-使用java对象的属性值,作为参数实际值(简化版)    MyBatis会通过反射机制获取到响应的属性的属性类型，所以不需要写对象类型和jdbc对象类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiObject<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name} or age = #{age};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***  多个参数的传递-使用对象传参*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiObject</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stuItem<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三或年龄11的查询结果为："</span><span class="token operator">+</span>stuItem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个参数传递-按位置(了解)</p><p>参数位置从 0 开始， 引用参数语法 #{ param 位置 } ， 第一个参数是#{param1}, 第二个是#{param2}(param起始位置为1不是0)<br>注意： mybatis-3.3 版本和之前的版本使用#{0},#{1}方式， 从 mybatis3.4 开始使用#{param1}方式。  </p><h4 id="例如：-4"><a href="#例如：-4" class="headerlink" title="例如："></a>例如：</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-按位置</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiPosition</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    多个参数的传递-按位置    注意： mybatis-3.3 版本和之前的版本使用#{0},#{1}方式， 从 mybatis3.4 开始使用#{param1}方式。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiPosition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{param1} or age = #{param2}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 多个参数的传递-按位置*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiPosition</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三或年龄33的查询结果为："</span><span class="token operator">+</span>stu3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个参数传递-Map传递-了解"><a href="#多个参数传递-Map传递-了解" class="headerlink" title="多个参数传递-Map传递(了解)"></a>多个参数传递-Map传递(了解)</h3><p>Map 集合可以存储多个值， 使用Map向 mapper 文件一次传入多个参数。Map 集合使用 String的 key，Object 类型的值存储参数。 mapper 文件使用 # { key } 引用参数值。  </p><h4 id="例如：-5"><a href="#例如：-5" class="headerlink" title="例如："></a>例如：</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-Map传递</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    多个参数的传递-Map传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select  * from student where name = #{name} or age = #{age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * 多个参数的传递-Map传递*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList3 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentsList3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三或年龄30的查询结果为："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和"><a href="#和" class="headerlink" title="#和$"></a>#和$</h3><h4 id="占位符"><a href="#占位符" class="headerlink" title="#占位符"></a>#占位符</h4><ul><li>告诉 mybatis 使用实际的参数值代替。并使用 PrepareStatement 对象执行 sql 语句, #{…}代替sql 语句的“?”。 这样做更安全，更迅速，通常也是首选做法。</li></ul><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--#占位符--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转为MyBatis执行的是：</p><pre class="line-numbers language-java"><code class="language-java">String sql<span class="token operator">=</span>”select <span class="token operator">*</span> from student where id <span class="token operator">=</span> <span class="token operator">?</span>”<span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>where id=?就是where id=#{id}<br>ps.setInt(1,2) , 2会替换掉#{id} </p><h4 id="字符串"><a href="#字符串" class="headerlink" title="$字符串"></a>$字符串</h4><ul><li>告诉 mybatis 使用$包含的“字符串”替换所在位置。使用 Statement 把 sql 语句和${}的内容连接起来。主要用在替换表名，列名，不同列排序等操作。   </li></ul><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--$占位符--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = ${id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换为MyBatis执行的是：</p><pre class="line-numbers language-java"><code class="language-java">String sql<span class="token operator">=</span><span class="token string">"select id,name, email,age from student where id="</span> <span class="token operator">+</span> <span class="token string">"2"</span><span class="token punctuation">;</span>使用的Statement对象执行sql，效率比PreparedStatement低。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h5><p>Statement对象使用的是字符串连接进行sql语句执行。</p><h3 id="与-区别："><a href="#与-区别：" class="headerlink" title="#与$区别："></a>#与$区别：</h3><pre><code>1. #使用 ？在sql语句中做站位的， 使用PreparedStatement执行sql，效率高。2. #能够避免sql注入，更安全。3. $不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低。4. $有sql注入的风险，缺乏安全性。5. $可以替换表名或者列名。</code></pre><h2 id="封装MyBatis输出结果"><a href="#封装MyBatis输出结果" class="headerlink" title="封装MyBatis输出结果"></a>封装MyBatis输出结果</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>执行 sql 得到 ResultSet 转换的类型，使用类型的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。 resultType 和 resultMap，不能同时使用。  </p><p>Mapper：</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2017%3A%E6%97%A5%2011%3A%E6%97%B6%2021%3A%E5%88%86MyBatis%E7%9A%84resultType%E7%BB%93%E6%9E%9C%E9%9B%86.jpg" alt="MyBatis的resultType结果集"></p><h4 id="简单类型传递"><a href="#简单类型传递" class="headerlink" title="简单类型传递"></a>简单类型传递</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递简单类型</span><span class="token keyword">int</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--传递简单类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select count(*) from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 传递简单类型*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> countNum <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单类型查询结果"</span> <span class="token operator">+</span> countNum <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递对象类型</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--传递对象类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudents<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 传递对象类型*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象类型查询结果："</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>框架处理步骤：</p><ol><li>使用构造方法创建该对象</li><li>调用set + 列名的对应的方法，将查询到的结果赋值给该对象</li><li>返回指定的返回的集合类型</li></ol><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>SQL的查询结果作为 Map 的 key 和 value。推荐使用 Map&lt;Object,Object&gt;。<br>注意： Map 作为接口返回值，SQL语句的查询结果最多只能有一条记录， 大于一条记录会产生错误。  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递Map类型</span>Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">selectMap</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--传递Map类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.HashMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 传递Map类型*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> studentMap <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Map类型查询结果"</span><span class="token operator">+</span>studentMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>resultMap可以对MySQL和entity实体类中的字段名不相同进行手动对接。</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//resultMap</span>List<span class="token operator">&lt;</span>StudentStu<span class="token operator">></span> <span class="token function">selectCustomStuStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    创建resultMap    id：自定义唯一名称，在&lt;select>使用    type：期望转为的java对象的全限定名称或别名    column：数据库中的字段名    property：实体类中对应的字段名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCustomStuStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.StudentStu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主键字段使用id标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--非主键字段使用result标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuAge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuEmail<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCustomStuStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCustomStuStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name} and age = #{age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** resultMap*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectCustomStuStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>StudentStu<span class="token operator">></span> studentStus <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectCustomStuStudent</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentStus<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resultMap实体类查询结果："</span><span class="token operator">+</span>studentStus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h2><p>模糊查询的实现有两种方式， 一是 java 代码中给查询数据加上“%” ; 二是在 Mapper 文件 sql 语句的条件位置加上”%”</p><h3 id="查询语句加"><a href="#查询语句加" class="headerlink" title="查询语句加%"></a>查询语句加%</h3><p>例如：</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//selectLikeFirst</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectLikeFirst</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--like模糊查询    1.查询语句加%--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLikeFirst<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name like #{name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** likeFirst查询方式*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectLikeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectLike1</span><span class="token punctuation">(</span><span class="token string">"%张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模糊查询："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mapper文件加"><a href="#Mapper文件加" class="headerlink" title="Mapper文件加%"></a>Mapper文件加%</h3><p>例如：</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//selectLikeSecond</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectLikeSecond</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--like模糊查询    2.sql语句加%--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLikeSecond<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name like '%' #{name} '%'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** likeSecond查询方式*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectLikeSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectLikeSecond</span><span class="token punctuation">(</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模糊查询Second："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><p>动态 SQL，通过 MyBatis 提供的各种标签对条件作出判断以实现动态拼接 SQL 语句。 这里的条件判断使用的表达式为 OGNL 表达式。 常用的动态 SQL 标签有<if>、 <where>、 <choose>、 <foreach>等。MyBatis 的动态 SQL 语句，与 JSTL 中的语句非常相似。动态 SQL，主要用于解决查询条件不确定的情况：在程序运行期间，根据用户提交的查询条件进行查询。提交的查询条件不同，执行的 SQL 语句不同。若将每种可能的情况均逐一列出，对所有条件进行排列组合，将会出现大量的 SQL 语句。此时，可使用动态 SQL 来解决这样的问题。</foreach></choose></where></if></p><p><strong>注意：</strong>在 mapper 的动态 SQL 中若出现大于号（&gt;）、小于号（&lt;）、大于等于号（&gt;=），小于等于号（&lt;=）等符号，最好将其转换为实体符号。否则， XML 可能会出现解析出错问题。  特别是对于小于号（&lt;），在 XML 中是绝不能出现的。否则解析 mapper 文件会出错。</p><p>实体符号表 </p><table><thead><tr><th>符号</th><th>实体符号</th><th>说明</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp;lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>&amp;gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>&amp;gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>&amp;lt;=</td><td>小于等于</td></tr></tbody></table><h3 id="动态-SQL-—-lt-if-gt"><a href="#动态-SQL-—-lt-if-gt" class="headerlink" title="动态 SQL —<if>"></a>动态 SQL —&lt;if&gt;</h3><p>对于该标签的执行，当 test 的值为 true 时，会将其包含的 SQL 片断拼接到其所在的 SQL 语句中。</p><p>语法： &lt;if test=”条件”&gt; sql语句的部分 &lt;/if&gt;  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态sql-if</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectIf</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--动态sql-if--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id > 0    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name!<span class="token punctuation">=</span>null and name !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and name = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        or age > #{age}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 动态sql-if*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"if:"</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL-—-lt-where-gt"><a href="#动态-SQL-—-lt-where-gt" class="headerlink" title="动态 SQL —<where>"></a>动态 SQL —&lt;where&gt;</h3><p>&lt;if/&gt;标签的中存在一个比较麻烦的地方：需要在 where 后手工添加 1=1 的子句。因为，若 where 后的所有&lt;if/&gt;条件均为 false，而 where 后若又没有 1=1 子句，则 SQL 中就会只剩下一个空的 where， SQL出错。所以，在 where 后，需要添加永为真子句 1=1，以防止这种情况的发生。但当数据量很大时，会严重影响查询效率。使用&lt;where/&gt;标签， 在有查询条件时， 可以自动添加上 where 子句；没有查询条件时，不会添加where 子句。需要注意的是，第一个&lt;if/&gt;标签中的 SQL 片断，可以不包含 and。不过，写上 and 也不错，系统会将多出的 and 去掉。但其它&lt;if/&gt;中 SQL 片断的 and，必须要求写上。否则 SQL 语句将拼接出错。</p><p>语法： &lt;where&gt; 其他动态 sql &lt;/where&gt;  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态sql<span class="token operator">-</span>where<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectWhere"</span> resultType<span class="token operator">=</span><span class="token string">"com.xrebirth.entity.Student"</span><span class="token operator">></span>    select <span class="token operator">*</span> from student    <span class="token operator">&lt;</span>where<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name != null and name != ''"</span><span class="token operator">></span>            name <span class="token operator">=</span> #<span class="token punctuation">{</span>name<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"age > 0"</span><span class="token operator">></span>                or age <span class="token operator">></span> #<span class="token punctuation">{</span>age<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml">//动态sql-whereList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">></span></span> selectWhere(Student student);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 动态sql-where*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">testSelectWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//student.setName("张三");</span>    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectWhere</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"where:"</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL-—-lt-foreach-gt"><a href="#动态-SQL-—-lt-foreach-gt" class="headerlink" title="动态 SQL —<foreach>"></a>动态 SQL —&lt;foreach&gt;</h3><p>&lt;foreach/&gt;标签用于实现对于数组与集合的遍历。对其使用，需要注意：  </p><ul><li>collection 表示要遍历的集合类型, list ， array 等。</li><li>open、 close、 separator 为对遍历内容的 SQL 拼接。</li></ul><p>语法：</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态sql-foreachOne</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectForeachOne</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--动态sql-foreachOne--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectForeachOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myid<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{myid.id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 动态sql-foreachOne*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testForEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectForeachOne</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu3 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foreachOne:"</span><span class="token operator">+</span>stu3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL—代码片段"><a href="#动态-SQL—代码片段" class="headerlink" title="动态 SQL—代码片段"></a>动态 SQL—代码片段</h3><p>&lt;sql/&gt;标签用于定义 SQL 片断，以便其它 SQL 标签复用。而其它标签使用该 SQL 片断，需要使用&lt;include/&gt;子标签。该&lt;sql/&gt;标签可以定义 SQL 语句中的任何部分，所以&lt;include/&gt;子标签可以放在动态 SQL的任何位置。  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码片段-selectSql01</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--代码复用-先定义后使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentSQL01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectSql<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用代码片段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentSQL01<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 代码片段*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码片段："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展-PageHelper-分页数据处理"><a href="#扩展-PageHelper-分页数据处理" class="headerlink" title="扩展-PageHelper(分页数据处理)"></a>扩展-PageHelper(分页数据处理)</h2><p>通过PageHelper插件获取数据库数据并自动处理分页数据。项目地址：<a href="https://github.com/pagehelper/Mybatis-PageHelper">https://github.com/pagehelper/Mybatis-PageHelper</a></p><ol><li>Maven坐标</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在&lt;environments&gt;之前加入</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>PageHelper 对象<br> 查询语句之前调用 PageHelper.startPage 静态方法。除了 PageHelper.startPage 方法外，还提供了类似用法的 PageHelper.offsetPage 方法，在你需要进行分页的 MyBatis 查询方法前调用 PageHelper.startPage 静态方法即可，紧跟在这个方法后的第一个 MyBatis 查询方法会被进行分页。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** pagehelperLimit*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPagehelperLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取第二页到第三页的内容</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pagehelperLimit:"</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>关于sttingszh中的相关属性设置。</p><pre><code>&lt;!-- settings是 MyBatis 中全局的调整设置，它们会改变 MyBatis 的运行时行为,应谨慎设置 --&gt;  &lt;settings&gt;  &lt;!-- 该配置影响的所有映射器中配置的缓存的全局开关。默认值true --&gt;  &lt;setting name="cacheEnabled" value="true"/&gt;  &lt;!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值false  --&gt;  &lt;setting name="lazyLoadingEnabled" value="true"/&gt;  &lt;!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true --&gt;  &lt;setting name="multipleResultSetsEnabled" value="true"/&gt;  &lt;!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值true --&gt;  &lt;setting name="useColumnLabel" value="true"/&gt;  &lt;!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 默认值false  --&gt;  &lt;setting name="useGeneratedKeys" value="false"/&gt;  &lt;!--  指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 --&gt;   &lt;!-- 默认值PARTIAL --&gt;  &lt;setting name="autoMappingBehavior" value="PARTIAL"/&gt;  &lt;setting name="autoMappingUnknownColumnBehavior" value="WARNING"/&gt;  &lt;!--  配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。默认SIMPLE  --&gt;  &lt;setting name="defaultExecutorType" value="SIMPLE"/&gt;  &lt;!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 --&gt;  &lt;setting name="defaultStatementTimeout" value="25"/&gt;  &lt;setting name="defaultFetchSize" value="100"/&gt;  &lt;!-- 允许在嵌套语句中使用分页（RowBounds）默认值False --&gt;  &lt;setting name="safeRowBoundsEnabled" value="false"/&gt;  &lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。  默认false --&gt;  &lt;setting name="mapUnderscoreToCamelCase" value="false"/&gt;  &lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。  默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。  若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  --&gt;  &lt;setting name="localCacheScope" value="SESSION"/&gt;  &lt;!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。  --&gt;  &lt;setting name="jdbcTypeForNull" value="OTHER"/&gt;  &lt;!--   指定哪个对象的方法触发一次延迟加载。  --&gt;  &lt;setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/&gt;  &lt;/settings&gt;  </code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析</title>
      <link href="/posts/3512c832.html"/>
      <url>/posts/3512c832.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析"><a href="#问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析" class="headerlink" title="问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析"></a>问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2050%3A%E5%88%86%E4%BD%BF%E7%94%A8Maven%E5%8E%9F%E5%9E%8B%E5%88%9B%E5%BB%BAJavaWeb%E4%B8%ADJsp%E4%B8%AD%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E8%A7%A3%E6%9E%90.jpg" alt="使用Maven原型创建JavaWeb中Jsp中的EL表达式不解析"></p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>Maven使用原型创建的web.xml文件默认为2.3版本，此版本默认禁用EL表达式</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h3><p>删除原有的web.xml重新生成新的web.xml版本2.3版本以上的版本。</p><ol><li>打开项目结构中的Facet删除原有的web.xml文件。</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2053%3A%E5%88%86%E5%88%A0%E9%99%A4%E5%8E%9F%E6%9C%89%E7%9A%84xml%E6%96%87%E4%BB%B6.jpg" alt="打开项目结构中的Facet删除原有的web.xml文件"></p><ol start="2"><li>确认删除</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2054%3A%E5%88%86%E7%A1%AE%E8%AE%A4%E5%88%A0%E9%99%A4web.xml%E6%96%87%E4%BB%B6.jpg" alt="确认删除"></p><ol start="3"><li>重新生成web.xml</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2057%3A%E5%88%86%E6%B7%BB%E5%8A%A0web.xml%E6%96%87%E4%BB%B6.jpg" alt="添加web.xml文件"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2058%3A%E5%88%86%E7%A1%AE%E8%AE%A4%E6%B7%BB%E5%8A%A0web.xml%E6%96%87%E4%BB%B6.jpg" alt="确认添加web.xml文件"></p><h3 id="解决方法2："><a href="#解决方法2：" class="headerlink" title="解决方法2："></a>解决方法2：</h3><p>在JSP中添加isELIgnored=”false”，不忽略EL表达式的解析。</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %><html><head>  <title>Title</title></head><body></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="永久解决办法3具体步骤如下："><a href="#永久解决办法3具体步骤如下：" class="headerlink" title="永久解决办法3具体步骤如下："></a>永久解决办法3具体步骤如下：</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2001%3A%E5%88%861745551-20190725191758788-1324700232.png"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2001%3A%E5%88%861745551-20190725191846707-1566801207.png"></p><p>进入“1.3”文件夹，找到jar包，如下图</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2002%3A%E5%88%861745551-20190725191943931-1726254123.png"></p><h3 id="用解压软件打开文件-记住不是解压。"><a href="#用解压软件打开文件-记住不是解压。" class="headerlink" title="用解压软件打开文件,记住不是解压。"></a>用解压软件打开文件,记住不是解压。</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2003%3A%E5%88%861745551-20190725192135089-1717773106.png"></p><h3 id="按下图这个路径依次打开，找到以下Web-xml文件"><a href="#按下图这个路径依次打开，找到以下Web-xml文件" class="headerlink" title="按下图这个路径依次打开，找到以下Web.xml文件"></a>按下图这个路径依次打开，找到以下Web.xml文件</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2004%3A%E5%88%861745551-20190725192211852-17025032.png"></p><p>直接打开web.xml，修改头文件，保存就可以了(注意：是在解压软件打开的的界面直接打开并修改Web.xml，而不是解压成文件夹之后修改，也就是要保证Jar包本来的结构不变)。</p><p>下面这个就是4.0的web.xml头文件，直接复制就可以。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Question </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON常用工具包(06)</title>
      <link href="/posts/883ba8d5.html"/>
      <url>/posts/883ba8d5.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSON常用工具包"><a href="#JSON常用工具包" class="headerlink" title="JSON常用工具包"></a>JSON常用工具包</h1><blockquote><p>JSON工具包在Web开发还是服务器开发中是相当常见的数据传输格式，一般情况我们对于JSON解析构造的性能并不需要过于关心，除非是在性能要求比较高的系统。 </p></blockquote><h2 id="常用JSON类库"><a href="#常用JSON类库" class="headerlink" title="常用JSON类库"></a>常用JSON类库</h2><ol><li>Gson<br> Gson是目前功能最全的Json解析神器，Gson当初是为因应Google公司内部需求而由Google自行研发而来，但自从在2008年五月公开发布第一版后已被许多公司或用户应用。Gson的应用主要为toJson与fromJson两个转换函数，无依赖，不需要例外额外的jar，能够直接跑在JDK上。而在使用这种对象转换之前需先创建好对象的类型以及其成员才能成功的将JSON字符串成功转换成相对应的对象。类里面只要有get和set方法，Gson完全可以将复杂类型的json到bean或bean到json的转换，是JSON解析的神器。项目地址：<a href="https://github.com/google/gson">https://github.com/google/gson</a></li><li>FastJson<br> Fastjson是一个Java语言编写的高性能的JSON处理器,由阿里巴巴公司开发。无依赖，不需要例外额外的jar，能够直接跑在JDK上。FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要制定引用。FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库。项目地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></li><li>Jackson<br> 相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。而且Jackson社区相对比较活跃，更新速度也比较快。Jackson对于复杂类型的json转换bean会出现问题，一些集合Map，List的转换出现问题。Jackson对于复杂类型的bean转换Json，转换的json格式不是标准的Json格式。项目地址：<a href="https://github.com/FasterXML/jackson">https://github.com/FasterXML/jackson</a></li><li>Json-lib<br> json-lib最开始的也是应用最广泛的json解析工具，json-lib 不好的地方确实是依赖于很多第三方包，包括commons-beanutils.jar，commons-collections-3.2.jar，commons-lang-2.6.jar，commons-logging-1.1.1.jar，ezmorph-1.0.6.jar，对于复杂类型的转换，json-lib对于json转换成bean还有缺陷，比如一个类里面会出现另一个类的list或者map集合，json-lib从json到bean的转换就会出现问题。json-lib在功能和性能上面都不能满足现在互联网化的需求。项目地址：<a href="http://json-lib.sourceforge.net/index.html">http://json-lib.sourceforge.net/index.html</a></li></ol><h3 id="Jackson使用"><a href="#Jackson使用" class="headerlink" title="Jackson使用"></a>Jackson使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Student    </span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> Integer sid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对象转换成JSON对象</span>Student stuobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectMapper om <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String result <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>stuobj<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        {"name":"张三","sid":1}    */</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// List集合转换成JSON数组</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> stuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student student <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    stuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String strStuList <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>stuList<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStuList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        [            {"name":"小明0","sid":0},            {"name":"小明1","sid":1},            {"name":"小明2","sid":2},            {"name":"小明3","sid":3}        ]    */</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>选择一个合适的JSON库要从多个方面进行考虑：</p><ul><li>字符串解析成JavaBean性能</li><li>JavaBean构造JSON性能</li><li>集合构造JSON性能</li><li>易用性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax笔记(03)</title>
      <link href="/posts/467992f5.html"/>
      <url>/posts/467992f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax学习笔记03"><a href="#Ajax学习笔记03" class="headerlink" title="Ajax学习笔记03"></a>Ajax学习笔记03</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>B/S 结构项目中， 浏览器（Browse）负责把用户的请求和参数通过网络发送给服务器(Server) ，服务端使用 Servlet(多种服务端技术的一种)接收请求，并将处理结果返回给浏览器。</li><li>浏览器在html、jsp 上呈现数据，混合使用 css、js 帮助美化页面或响应事件。  </li></ul><h2 id="全局刷新"><a href="#全局刷新" class="headerlink" title="全局刷新"></a>全局刷新</h2><ul><li>登录请求处理：  </li><li>index.jsp 发起登录请求——–LoginServlet——–result.jsp  </li></ul><h4 id="发起请求-request-阶段："><a href="#发起请求-request-阶段：" class="headerlink" title="发起请求 request 阶段："></a>发起请求 request 阶段：</h4><p>浏览器现在内存中是 index 页面的内容和数据 ：  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%205%3A%E6%97%A5%2014%3A%E6%97%B6%2043%3A%E5%88%86login%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.jpg" alt="login响应过程"></p><h4 id="服务器端应答结果阶段："><a href="#服务器端应答结果阶段：" class="headerlink" title="服务器端应答结果阶段："></a>服务器端应答结果阶段：</h4><p>sevlet 返回后把数据全部覆盖掉原来 index 页面内容， result.jsp 覆盖了全部的浏览器内存数据。 整个浏览器数据全部被刷新。 重新在浏览器窗口显示数据，样式，标签等。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%205%3A%E6%97%A5%2014%3A%E6%97%B6%2046%3A%E5%88%86login%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.jpg" alt="login响应过程"></p><h4 id="全局刷新原理"><a href="#全局刷新原理" class="headerlink" title="全局刷新原理:"></a>全局刷新原理:</h4><ol><li>必须由浏览器亲自向服务端发送请求协议包。</li><li>这个行为导致服务端直接将【响应包】发送到浏览器内存中。</li><li>这个行为导致浏览器内存中原有内容被覆盖掉。</li><li>这个行为导致浏览器在展示数据时候，只有响应数据可以展示。</li></ol><h2 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h2><ul><li>浏览器在展示数据时，此时在窗口既可以看到本次的响应数据， 同时又可以看到浏览器内存中原有数据。</li></ul><h4 id="局部刷新原理"><a href="#局部刷新原理" class="headerlink" title="局部刷新原理:"></a>局部刷新原理:</h4><ol><li>不能由浏览器发送请求给服务端。</li><li>浏览器委托浏览器内存中一个脚本对象代替浏览器发送请求。</li><li>这个行为导致导致服务端直接将【响应包】发送脚本对象内存中。</li><li>这个行为导致脚本对象内容被覆盖掉，但是此时浏览器内存中绝大部分内容没有收到任何影响。</li><li>这个行为导致浏览器在展示数据时候,同时展示原有数据和响应数据。</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%205%3A%E6%97%A5%2014%3A%E6%97%B6%2050%3A%E5%88%86Ajax%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0login%E8%BF%87%E7%A8%8B.jpg" alt="Ajax局部刷新login过程"></p><h2 id="异步请求对象"><a href="#异步请求对象" class="headerlink" title="异步请求对象"></a>异步请求对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在局部刷新，需要创建一个对象，代替浏览器发起请求的行为，这个对象存在内存中。代替浏览器发起请求并接收响应数据。这个对象叫做异步请求对象。全局刷新是同步行为， 局部刷新是异步行为[浏览器数据没有全部更新]，这个异步对象用于在后台与服务器交换数据。 XMLHttpRequest就是我们说的异步对象。</p><h3 id="XMLHttpRequest对象特点："><a href="#XMLHttpRequest对象特点：" class="headerlink" title="XMLHttpRequest对象特点："></a>XMLHttpRequest对象特点：</h3><ul><li>在不重新加载页面的情况下更新网页。</li><li>在页面已加载后向服务器请求数据。</li><li>在页面已加载后从服务器接收数据。</li></ul><p>所有现代浏览器 (IE7+、 Firefox、 Chrome、 Safari 以及 Opera) 都内建了 XMLHttpRequest对象。通过一行简单的 JavaScript 代码，我们就可以创建 XMLHttpRequest 对象。</p><p>创建 XMLHttpRequest对象的语法(xhr)：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// XMLHttpRequest就是核心对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>AJAX = Asynchronous JavaScript and XML( 异步的 JavaScript 和 XML)。</li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法。</li><li>AJAX 不是新的编程语言，而是使用现有技术混合使用的一种新方法。 ajax 中使用的技术有JavaScript、HTML、DOM、XML、CSS等。主要是 JavaScript、XML。</li><li>JavaScript：使用脚本对象XMLHttpRequest 发送请求， 接收响应数据。</li><li>XML：发送和接收的数据格式，现在使用 JSON。</li><li>AJAX不单需要前端的技术，同时需要后端（服务器）的配合。服务器需要提供数据，数据是 AJAX 请求的响应结果.</li></ul><h3 id="AJAX-异步实现步骤"><a href="#AJAX-异步实现步骤" class="headerlink" title="AJAX 异步实现步骤"></a>AJAX 异步实现步骤</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="onreadstatechange事件"><a href="#onreadstatechange事件" class="headerlink" title="onreadstatechange事件"></a>onreadstatechange事件</h4><p>​    当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当readyState改变时，就会触发onreadystatechange事件。 此事件可以指定一个处理函数 function。  </p><ul><li><p>通过判断XMLHttpReqeust对象的状态，获取服务端返回的数据。  </p></li><li><p>语法：</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">xmlHttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理服务器返回数据</span>        xmlHttp    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XMLHttpRequest对象重要属性：</p><ol><li>onreadystatechange属性： 一个Js函数名或直接定义函数， 每当readyState属性改变时，就会调用该函数。</li><li>readyState属性(存有 XMLHttpRequest 的状态: 从0到4发生变化)：<ul><li>0: 请求未初始化，创建异步请求对象 var xmlHttp = new XMLHttpRequest()  </li><li>1: 初始化异步请求对象， xmlHttp.open(请求方式，请求地址， true)  </li><li>2: 异步对象发送请求， xmlHttp.send()  </li><li>3: 异步对象接收应答数据从服务端返回数据。 XMLHttpRequest 内部处理。  </li><li>4: 异步请求对象已经将数据解析完毕。 此时才可以读取数据。  </li></ul></li><li>status属性(从响应包中所返回的状态码常见的有)：<ul><li>200: “OK”。</li><li>404: 未找到页面。</li></ul></li><li>初始化请求参数：  </li></ol><h4 id="初始化请求参数"><a href="#初始化请求参数" class="headerlink" title="初始化请求参数"></a>初始化请求参数</h4><ul><li><p>方法：  </p><p>  xmlHttp.open(method,url,async) ： 初始化异步请求对象  </p></li><li><p>参数说明：  </p><p>• method：请求的类型：GET 或 POST<br>• url： 服务器的Servlet地址<br>• async： true（异步）或 false（同步）  </p><blockquote><p>(true)异步：在send()方法之后执行其它的代码，可以同时执行多个异步请求。</p><p>(false)同步：一次只能执行一个异步请求，必须请求处理完成后,才能执行其它的请求处理。</p></blockquote></li><li><p>例如:  </p><pre class="line-numbers language-javascript"><code class="language-javascript">xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>“method”<span class="token punctuation">,</span>”url”<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注意：</span><span class="token comment" spellcheck="true">// 1.method、url为字符串形式</span><span class="token comment" spellcheck="true">// 2.url必须开头写上网站别名 例：/myWeb02/AjaxExercise01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><ul><li><p>方法：</p><p>  xmlHttp.send()</p></li></ul><h4 id="接收服务器响应的数据"><a href="#接收服务器响应的数据" class="headerlink" title="接收服务器响应的数据"></a>接收服务器响应的数据</h4><ul><li>如需获得来自服务器的响应，请使用XMLHttpRequest对象的responseText或responseXML属性。<ul><li>responseText： 获得字符串形式的响应数据。    </li><li>responseXML： 获得 XML 形式的响应数据。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSTL表达式(05)</title>
      <link href="/posts/bd6d882c.html"/>
      <url>/posts/bd6d882c.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。 是一个不断完善的开放源代码的 JSP 标签库。<br>EL 表达式主要是为了替换 jsp 中的表达式脚本， 而标签库则是为了替换代码脚本。 这样使得整个 jsp 页面变得更佳简洁。  </p><h2 id="JSTL组成"><a href="#JSTL组成" class="headerlink" title="JSTL组成"></a>JSTL组成</h2><table><thead><tr><th>功能范围</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>核心标签库–重点</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr><tr><td>数据库(不使用)</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>XML(不使用)</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr></tbody></table><p>在 jsp 标签库中使用 taglib 指令引入标签库</p><ul><li>CORE 标签库</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>FMT 标签库  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>FUNCTIONS 标签库  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>SQL 标签库  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>XML 标签库 </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="JSTL使用"><a href="#JSTL使用" class="headerlink" title="JSTL使用"></a>JSTL使用</h2><ol><li><p>先导入 jstl 标签库的 jar 包。 </p><ul><li>taglibs-standard-impl-1.2.1.jar</li><li>taglibs-standard-spec-1.2.1.jar  </li></ul></li><li><p>使用 taglib 指令引入相应的标签库。  </p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="core-核心库使用"><a href="#core-核心库使用" class="headerlink" title="core 核心库使用"></a>core 核心库使用</h2><h3 id="lt-c-set-gt-（使用很少）"><a href="#lt-c-set-gt-（使用很少）" class="headerlink" title="<c:set />（使用很少）"></a>&lt;c:set /&gt;（使用很少）</h3><ul><li>作用： set 标签可以往域中保存数据  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--<c:set />作用： set 标签可以往域中保存数据域对象.setAttribute(key,value);scope 属性设置保存到哪个域page 表示 PageContext 域（默认值）request 表示 Request 域session 表示 Session 域application 表示 ServletContext 域var 属性设置 key 是多少value 属性设置值--%>保存之前： ${ sessionScope.abc } <br><c:set scope="session" var="abc" value="abcValue"/>保存之后： ${ sessionScope.abc } <br><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-c-if-gt"><a href="#lt-c-if-gt" class="headerlink" title="<c:if />"></a>&lt;c:if /&gt;</h3><ul><li>if 标签用来做 if 判断</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--ii.<c:if />if 标签用来做 if 判断。test 属性表示判断的条件（使用 EL 表达式输出）--%><c:if test="${ 12 == 12 }"><h1>12 等于 12</h1></c:if><c:if test="${ 12 != 12 }"><h1>12 不等于 12</h1></c:if><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="<c:choose> <c:when> <c:otherwise>标签"></a>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</h3><ul><li>作用： 多路判断。 跟 switch … case …. default 非常接近  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--<c:choose> <c:when> <c:otherwise>标签作用： 多路判断。 跟 switch ... case .... default 非常接近choose 标签开始选择判断when 标签表示每一种判断情况test 属性表示当前这种判断情况的值otherwise 标签表示剩下的情况<c:choose> <c:when> <c:otherwise>标签使用时需要注意的点：1、 标签里不能使用 html 注释， 要使用 jsp 注释2、 when 标签的父标签一定要是 choose 标签--%><%    request.setAttribute("height", 180);%><c:choose>    <%-- 这是 html 注释 --%>    <c:when test="${ requestScope.height > 190 }">        <h2>小巨人</h2>    </c:when>    <c:when test="${ requestScope.height > 180 }">        <h2>很高</h2>    </c:when>    <c:when test="${ requestScope.height > 170 }">        <h2>还可以</h2>    </c:when>    <c:otherwise>        <% 如果里面还需要做判断则需要基于<c:choose>标签内在做判断 %>        <c:choose>            <c:when test="${requestScope.height > 160}">                <h3>大于 160</h3>            </c:when>            <c:when test="${requestScope.height > 150}">                <h3>大于 150</h3>            </c:when>            <c:when test="${requestScope.height > 140}">                <h3>大于 140</h3>            </c:when>            <c:otherwise>                其他小于 140            </c:otherwise>        </c:choose>    </c:otherwise></c:choose><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-c-forEach-gt"><a href="#lt-c-forEach-gt" class="headerlink" title="<c:forEach />"></a>&lt;c:forEach /&gt;</h3><ul><li>作用： 遍历输出使用。 </li></ul><h4 id="例1：遍历-1-到-10，-输出"><a href="#例1：遍历-1-到-10，-输出" class="headerlink" title="例1：遍历 1 到 10， 输出"></a>例1：遍历 1 到 10， 输出</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><%-- 遍历 1 到 10， 输出begin 属性设置开始的索引end 属性设置结束的索引var 属性表示循环的变量(也是当前正在遍历到的数据)for (int i = 1; i < 10; i++)--%><table border="1">    <c:forEach begin="1" end="10" var="i">        <tr>            <td>第${i}行</td>        </tr>    </c:forEach></table><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例2：遍历-Object-数组"><a href="#例2：遍历-Object-数组" class="headerlink" title="例2：遍历 Object 数组"></a>例2：遍历 Object 数组</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><%-- 遍历 Object 数组for (Object item: arr)items 表示遍历的数据源（遍历的集合）var 表示当前遍历到的数据--%><%    request.setAttribute("arr", new String[]{"18610541354","18688886666","18699998888"});%><c:forEach items="${ requestScope.arr }" var="item">    ${ item } <br></c:forEach><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例3：遍历-Map-集合"><a href="#例3：遍历-Map-集合" class="headerlink" title="例3：遍历 Map 集合"></a>例3：遍历 Map 集合</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><% // 遍历 Map 集合      Map<String,Object> map = new HashMap<String, Object>();    map.put("key1", "value1");    map.put("key2", "value2");    map.put("key3", "value3");    // for ( Map.Entry<String,Object> entry : map.entrySet()) {}    request.setAttribute("map", map);%><c:forEach items="${ requestScope.map }" var="entry">    <h1>${entry.key} = ${entry.value}</h1></c:forEach><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例4：遍历List集合-list-中存放Student类"><a href="#例4：遍历List集合-list-中存放Student类" class="headerlink" title="例4：遍历List集合-list 中存放Student类"></a>例4：遍历List集合-list 中存放Student类</h4><ul><li>Student实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//编号， 用户名， 密码， 年龄， 电话信息</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSP</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%    List<Student> studentList = new ArrayList<Student>();    for (int i = 1; i <= 10; i++) {        studentList.add(new Student(i,"username"+i ,"pass"+i,18+i,"phone"+i));    } r    equest.setAttribute("stus", studentList);%><table>    <tr>        <th>编号</th>        <th>用户名</th>        <th>密码</th>        <th>年龄</th>        <th>电话</th>        <th>操作</th>    </tr>    <%--        items 表示遍历的集合        var 表示遍历到的数据        begin 表示遍历的开始索引值        end 表示结束的索引值        step 属性表示遍历的步长值        varStatus 属性表示当前遍历到的数据的状态        for（int i = 1; i < 10; i+=2）    --%>    <c:forEach begin="2" end="7" step="2" varStatus="status" items="${requestScope.stus}" var="stu">        <tr>            <td>${stu.id}</td>            <td>${stu.username}</td>            <td>${stu.password}</td>            <td>${stu.age}</td>            <td>${stu.phone}</td>            <td>${status.step}</td>        </tr>    </c:forEach></table><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记(02)</title>
      <link href="/posts/d108c186.html"/>
      <url>/posts/d108c186.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS学习笔记02"><a href="#JS学习笔记02" class="headerlink" title="JS学习笔记02"></a>JS学习笔记02</h1><h2 id="初识BOM-DOM"><a href="#初识BOM-DOM" class="headerlink" title="初识BOM/DOM"></a>初识BOM/DOM</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>BOM英文全名：(borwser Object Model)浏览器对象模型</li><li>DOM英文全名：(Document Object Model)文档对象模型</li><li>DOM是 W3C 的标准; [所有浏览器公共遵守的标准]。</li><li>BOM 是 各个浏览器厂商根据 DOM在各自浏览器上的实现;[表现为不同浏览器定义有差别,实现方式不同]。</li><li>window 是 BOM 对象，而非 js 对象；</li></ul><p><strong>注意：</strong></p><ul><li><code>DOM</code>（文档对象模型）是 <code>HTML</code> 和 <code>XML</code> 的应用程序接口（<code>API</code>）。</li><li><code>BOM</code> 主要处理浏览器窗口和框架，不过通常浏览器特定的 <code>JavaScript</code> 扩展都被看做 BOM 的一部分。</li></ul><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ul><li><p><code>javacsript</code>是通过访问<code>BOM</code>（Browser Object Model）对象来访问、控制、修改客户端(浏览器)，由于<code>BOM</code>的<code>window</code>包含了<code>document</code>，window对象的属性和方法是直接可以使用而且被感知的，因此可以直接使用<code>window</code>对象的<code>document</code>属性，通过<code>document</code>属性就可以访问、检索、修改XHTML文档内容与结构。因为<code>document</code>对象又是DOM（Document Object Model）模型的根节点。可以说，BOM包含了<code>DOM</code>(对象)，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到<code>DOM</code>对象，从而js可以操作浏览器以及浏览器读取到的文档。其中：DOM包含：window。</p><ol><li>Window对象包含属性：document、location、navigator、screen、history、frames</li><li>Document根节点包含子节点：forms、location、anchors、images、links</li></ol><p>  从<code>window.document</code>已然可以看出，DOM的最根本的对象是BOM的window对象的子对象。而他们之前的最大区别：DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口。</p></li></ul><h2 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    DOM操作creatElement(element)创建一个新的元素节点creatTextNode()创建一个包含给定文本的新文本节点appendChild()指定节点的最后一个节点列表后添加一个新的子节insertBefore()将一个给定节点插入到一个给定元素节点的给定子节点的前面removeChild()从一个给定元素中删除子节点replaceChild()把一个给定父元素里的一个子节点替换为另外一个节点，DOM通过创建树来表示文档，描述了处理网页内容的方法和接口，从而使开发者对文档的内容和结构具有空前的控制力，用DOM API可以轻松地删除、添加和替换节点。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%203%3A%E6%97%A5%2018%3A%E6%97%B6%2025%3A%E5%88%86DOM%E8%8A%82%E7%82%B9.png" alt="DOM节点"></p><h3 id="DOM对象生命周期"><a href="#DOM对象生命周期" class="headerlink" title="DOM对象生命周期"></a>DOM对象生命周期</h3><ol><li>浏览器在接收到html文件之后，将HTML文件标签加载到浏览器缓存中，每当加载一个html标签时候，自动为这个标签生成一个实例对象，这个实例对象就是<code>DOM</code>对象。</li><li>在浏览器关闭之前或则浏览器请求其他资源文件之前，本次生成的<code>DOM</code>对象一直存活在浏览器缓存中。</li><li>在浏览器关闭时候，浏览器缓存中<code>DOM</code>对象将要被销毁。</li><li>在浏览器请求到新资源文件后，浏览器缓存中原有的<code>DOM</code>对象将会被覆盖。</li></ol><h2 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h2><ol><li><code>document</code>对象被称为【文档对象】</li><li><code>document</code>对象用于在浏览器内存中根据定位条件定位DOM对象</li></ol><h3 id="document对象生命周期"><a href="#document对象生命周期" class="headerlink" title="document对象生命周期:"></a>document对象生命周期:</h3><ol><li>在浏览器将网页中所有标签加载完毕后，在内存中将使用【树形结构】存储这些DOM对象。在树形结构生成完毕后由浏览器生成一个document对象<br> 管理这颗树（DOM树）在浏览器将接收网页中标签加载完毕后，自动在浏览器内存生成一个document对象。</li><li>一个浏览器运行期间，只会生成一个document对象。</li><li>在浏览器关闭时，负责将document对象进行销毁。</li></ol><h2 id="通过document对象定位DOM对象方式："><a href="#通过document对象定位DOM对象方式：" class="headerlink" title="通过document对象定位DOM对象方式："></a>通过document对象定位DOM对象方式：</h2><ol><li><p>根据html标签的id属性值定位DOM对象</p><ul><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> domObj <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通知document对象定位id属性等于one的标签关联的DOM对象</p></li></ul></li><li><p>根据html标签的name属性值定位DOM对象</p><ul><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"name属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通知document对象将所有name属性等于deptNo的标签关联的DOM对象，进行定位并封装到一个数组进行返回。 domArray就是一个数组存放<br>  本次返回的所有DOM对象。</p></li></ul></li><li><p>根据html标签类型定位DOM对象</p><ul><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"标签类型名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通知document对象将所有段落标签关联的dom对象进行定位并封装到一个数组返回。</p></li></ul></li><li><p>待学习…</p></li></ol><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>监听用户在何时以何种方式对当前标签进行操作。当监听到相关行为时，通知浏览器调用对应JavaScript函数对当前用户请求进行处理。</p><h3 id="监听分类："><a href="#监听分类：" class="headerlink" title="监听分类："></a>监听分类：</h3><ol><li>监听用户何时使用鼠标操作当前标签。</li><li>监听用户何时使用键盘操作当前标签。</li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ol><li>onclick :  监听用户何时使用鼠标【单击】当前标签</li><li>onmouseover: 监听用户何时将鼠标【悬停】当前标签上方</li><li>onmouseout : 监听用户何时将鼠标从当前标签上方【移开】</li><li>onfocus: 监听用户何时通过鼠标让当前标签获得【光标】</li><li>onblur: 监听用户何时通过鼠标让当前标签丢失【光标】</li></ol><h3 id="事件绑定方法："><a href="#事件绑定方法：" class="headerlink" title="事件绑定方法："></a>事件绑定方法：</h3><h4 id="行内绑定"><a href="#行内绑定" class="headerlink" title="行内绑定"></a>行内绑定</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><ul><li>获取到dom元素，并在元素上绑定事件。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> demo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"示例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><ul><li>处理表格或者列表中的数据的时候使用事件委托的方式，只绑定一次事件，避免性能的损耗。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> demo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"示例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ul><li>在 JavaScript认为所有通过【构造函数】生成对象其数据类型都是Object类型。</li></ul><h3 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h3><ul><li>object类型对象在创建完毕后,可以根据实际情况,任意添加属性和方法,也可以移除属性和方法。</li></ul><h3 id="添加属性："><a href="#添加属性：" class="headerlink" title="添加属性："></a>添加属性：</h3><h4 id="第一种添加添加方式："><a href="#第一种添加添加方式：" class="headerlink" title="第一种添加添加方式："></a>第一种添加添加方式：</h4><ul><li><p>添加属性</p><p>  object对象.新属性名 = 值;</p></li><li><p>添加函数</p><p>  object对象.新函数对象名 = function() {};</p></li></ul><h4 id="第二种添加添加方式："><a href="#第二种添加添加方式：" class="headerlink" title="第二种添加添加方式："></a>第二种添加添加方式：</h4><ul><li><p>添加属性</p><p>  object对象[“新属性名”] = 值;</p></li><li><p>添加函数</p><p>  object对象[“新函数对象名”] = function() {};</p></li></ul><h3 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建构造函数</span><span class="token keyword">function</span> <span class="token function">函数对象名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Demo..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用构造函数</span><span class="token keyword">var</span> Object类型对象 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">函数对象名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="普通函数-构造函数区别："><a href="#普通函数-构造函数区别：" class="headerlink" title="普通函数/构造函数区别："></a>普通函数/构造函数区别：</h4><ol><li>函数没有调用之前，无法区分函数身份，只能根据函数调用形式区分。</li><li>判断普通函数：var demo = 函数对象名(); </li><li>判断构造函数：var demo = new 函数对象名();</li></ol><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h3><p>SON(JavaScript Object Notation) 是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript 原生格式，这意味着在 JavaScript 中处理 JSON数据不须要任何特殊的 API 或工具包。</p><h3 id="JSON对象语法："><a href="#JSON对象语法：" class="headerlink" title="JSON对象语法："></a>JSON对象语法：</h3><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> 对象名称 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"属性名"</span><span class="token punctuation">:</span> <span class="token string">"属性值"</span><span class="token punctuation">,</span>        <span class="token string">"方法名"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            语法<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON数组语法："><a href="#JSON数组语法：" class="headerlink" title="JSON数组语法："></a>JSON数组语法：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// JSON相当于java中的集合</span><span class="token keyword">var</span> student2 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>   <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>        <span class="token string">"run"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在跑步ing..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span>        <span class="token string">"run"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在跑步ing..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> student2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> student2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS笔记(01)</title>
      <link href="/posts/fa259245.html"/>
      <url>/posts/fa259245.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS学习笔记01"><a href="#JS学习笔记01" class="headerlink" title="JS学习笔记01"></a>JS学习笔记01</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>JavaScript是一种专门在浏览器编译并执行的编程语言。</li><li>JavaScript处理用户与浏览器之间请求问题。</li><li>JavaScript采用【弱类型编程语言风格】对【面向对象思想】来进行实现的编程语言。</li></ol><h3 id="弱类型编程语言风格-VS-强类型编程语言风格："><a href="#弱类型编程语言风格-VS-强类型编程语言风格：" class="headerlink" title="弱类型编程语言风格 VS 强类型编程语言风格："></a>弱类型编程语言风格 VS 强类型编程语言风格：</h3><ol><li><p>强类型编程语言风格：认为对象行为应该受到其修饰类型严格约束。</p><ul><li>Java采用【强类型编程语言风格】对【面向对象思想】来进行实现的编程语言。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String sname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student  stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span>sname<span class="token operator">=</span><span class="token string">"mike"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// stu对象能够调用属性只有sname</span>        stu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stu对象能够调用方法只有sayHello()</span>        stu<span class="token punctuation">.</span>sid <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在Java认为是语法错误，修饰stu对象的Student类型没有提供这个属性  </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>弱类型编程语言风格： 认为对象行为不应该受到其修饰类型约束。可以根据实际需要来决定对象可以调用属性和方法</p><ul><li>JavaScript采用【弱类型编程语言风格】对【面向对象思想】来进行实现的编程语言。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//stu对象相当于【阿Q】</span>stu<span class="token punctuation">.</span>car <span class="token operator">=</span> <span class="token string">"劳斯莱斯"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//合法</span>stu<span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span>  <span class="token string">"天天打游戏"</span><span class="token punctuation">}</span>stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="变量声明方式"><a href="#变量声明方式" class="headerlink" title="变量声明方式"></a>变量声明方式</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名<span class="token punctuation">;</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">var</span> 变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token operator">=</span>值；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在JavaScript变量/对象，在声明不允许指定【修饰类型】只能通过var来进行修饰。</p><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><ol><li><p>标识符只能由四种符号组成  英文字母，数字 , 下划线，美元符号($)。</p></li><li><p>标识符首字母不能以”数字”开头。</p></li><li><p>标识符不能采用JavaScript关键字 比如var。</p></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th align="center">数据类型</th><th>基本数据类型/引用数据类型</th><th>说明</th></tr></thead><tbody><tr><td align="center">number</td><td>基本数据类型</td><td>数据类型</td></tr><tr><td align="center">string</td><td>基本数据类型</td><td>字符类型</td></tr><tr><td align="center">boolean</td><td>基本数据类型</td><td>布尔类型</td></tr><tr><td align="center">object</td><td>高级数据类型</td><td>对象类型</td></tr><tr><td align="center">function</td><td>高级数据类型</td><td>函数类型</td></tr></tbody></table><p><strong>注意</strong>：JavaScript是弱类型编程语言，根据变量赋值内容来判断变量数据类型，JavaScript中变量的数据类型可以根据赋值内容来进行动态改变。</p><h2 id="JavaScript特殊【值】"><a href="#JavaScript特殊【值】" class="headerlink" title="JavaScript特殊【值】"></a>JavaScript特殊【值】</h2><table><thead><tr><th align="center">特殊【值】</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">undefined</td><td align="left">JavaScript中所有变量在没有赋值时，其默认值都是undefined<br>由于JavaScript根据变量的赋值来判断变量类型，此时由于变量<br>没有赋值因此JavaScript无法判断当前变量数据类型，此时返回也是undefiled。</td></tr><tr><td align="center">null</td><td align="left">JS中当一个对象赋值为null时，表示对象引用了一个【空内存】<br>这个空内存既不能存储数据也不能读取数据。<br>此时这个对象数据类型，在JavaScript依然认为是object类型。</td></tr><tr><td align="center">NaN</td><td align="left">JS中当一个变量赋值为NaN，表示变量接收了一个【非法数字】（123 合法数字  abc123 非法数字）<br>此时这个变量数据类型，在JavaScript依然认为number类型。</td></tr><tr><td align="center">infinity</td><td align="left">JS中当一个变量赋值为infinity，表示变量接收了一个【无穷大数字】<br>此时这个变量数据类型，在JavaScript依然认为number类型。</td></tr></tbody></table><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><ul><li><p>if 语句是最常用的条件分支语句，作用就是通过某个指定的判断条件，决定走哪个分支的代码</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>     statement1<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     statement2<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a><strong>switch</strong></h3><ul><li><p>开关语句允许一个程序求一个表达式的值，并且尝试去匹配表达式的值到一个 case 标签。如果匹配成功，这个程序执行相关语句。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>        结构体<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token punctuation">:</span>        结构体<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        执行最后的语句<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>语法解析：</p><ul><li>switch：关键字表示开始进入一个开关语句。</li><li>表达式：会求出一个具体的值，将这个值去与 {} 内部的 case 后面的值进行对比、匹配，如果值相等表示匹配成功。匹配相等时，方式是进行全等于匹配，不止值要相等，数据类型也要相等。</li><li>case：示例的意思，作为关键字后面必须跟一个空格，书写匹配的值。</li><li>case 后面的结构体：每个 case 匹配成功之后要执行的语句。</li><li>break： 用于打断结构体，直接跳出程序，模拟跳楼现象。</li><li>default：相当于 if 语句中的 else ，否则的情况，如果前面的 case 都不匹配，执行 default 后面的语句。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li>default 可以不写，相当于 if 语句没有 else。</li><li>break 关键字：根据结构需要有时必须在每个 case 后面都要写，为了模拟跳楼现象，如果不写break，对应的 case 后面的语句执行之后，不会跳出结构体，会继续想下执行其他 case 的后面的语句，直到遇到一个 break。</li></ul></li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li><p>for 循环是一种<strong>前测试循环语句</strong>，在反复执行一段代码之前，都先测试入口条件，如果条件为真，可继续循环，如果条件为假，必须跳出循环不再执行。<br>  它是一种反复执行一段代码直到测试条件为假时停止。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>定义循环变量<span class="token punctuation">;</span> 变量的最大值或最小值<span class="token punctuation">;</span> 步长<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><ul><li><p>do while 循环是一种<strong>后测试循环语句</strong>，会先执行一次结构体，执行完后才会去判断入口条件，如果条件为真能够继续下一次循环，如果条件为假跳出循环。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>语法解析：</p><ul><li>do：做什么，后面是每次循环的循环体。</li><li>while：当·····的时候。</li><li>先执行一次循环体，然后当条件表达式为真时可以继续循环。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li>如果循环需要循环变量参与，循环变量必须定义在循环外面，否则会被重置。</li><li>循环变量自加的过程需要写在 {} 循环体内部。</li><li>如果将循环变量写在结构体内，i 的初始值每次都会被重置，容易出现死循环。</li><li>变量自加过程写在输出语句前面和后面，结果是不同的。</li><li>do while 循环即便条件第一次测试就为假，也会执行一次结构体。</li><li>至少会执行一次循环体。</li></ul></li></ul><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><ul><li><p>while 循环是一种<strong>前端测试循环语句</strong>，在执行循环体之前都要测试入口条件，条件为真继续执行，条件为假直接跳出循环。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>语法解析：</p><ul><li>当条件表达式为真时，执行循环体，如果为假，跳出循环。</li></ul></li><li><p>语法解析：</p><ul><li>如果需要循环变量参与，必须定义在循环外部，避免被重置。</li><li>循环变量自加的过程写在循环体内部。</li></ul></li></ul><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><ul><li>我已经找到我要的答案了，我不需要进行更多的循环了！</li><li>break 语句的作用可以立即停止当前的 for、do while、while 循环。</li><li>根据一些条件设置 break 位置，直到循环能够执行到 break 语句立即停止执行，跳出循环。</li><li>例如：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//break关键字 用于跳出整一个循环</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是我吃的第'</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">'个包子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意事项：</p><ul><li><p>break 如果没有特殊提示，只能停止自己所在的那一层循环，并不能终止外部循环。</p></li><li><p>如果想停止外层循环，可以给外层循环添加一个标签名 label，在内层循环的 break 关键字后面空格加一个 label 名。</p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 如果想终止外层循环，需要给外层循环添加一个名字</span>outloop <span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 补充打断条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span> outloop<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><ul><li><p>这个答案不是我想要的，赶紧试试下一个吧。</p></li><li><p>遇到 continue 表示当前的一次循环不是我们想要的，会立即停止当前次的循环，立即进入下一次循环。</p></li><li><p>例如：找 1-30 之间，输出不是 5 的倍数的数字。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// continue关键字用于立即跳出本循环，继续下一次循环(本次循环体中continue之后的代码就会少执行一次)</span><span class="token comment" spellcheck="true">// 找 1-30 之间，输出不是 5 的倍数的数字</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是 5 的倍数，不能输出，直接进入下一次循环</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走到这个位置，说明不是 5 的倍数，可以输出</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意事项：</strong></p><ul><li><p>要根据特殊设置 continue 的位置。</p></li><li><p>continue 如果没有特殊指示只能进入自己的下一次循环，不能立即停止外层循环的这一次进入下一次。</p></li><li><p>控制外层循环的方式与 break 一样，都是添加外层的标签名。</p></li><li><p>例如：控制内层循环</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// continue 只能进入自己的循环的下一次</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 补充打断这一次条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例如：控制外层循环</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// continue 只能进入自己的循环的下一次</span>outloop<span class="token punctuation">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 补充打断这一次条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span> outloop<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><h3 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span>   <span class="token function">函数名</span><span class="token punctuation">(</span>形参名<span class="token number">1</span>，形参名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    JavaScript命令行    JavaScript命令行    <span class="token keyword">return</span>  将函数运行结果进行返回  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>JavaScript中，所有函数在声明时，都需要使用function进行修饰。</li><li>JavaScript中，所有函数在声明时，禁止指定函数返回数据类型。</li><li>JavaScript中，所有函数在声明时，形参既不能使用var来修饰也不能使用数据类型修饰。</li><li>JavaScript中，所有函数在声明时，如果有返回值，此时应该通过return进行返回。</li></ol><h3 id="声名方式"><a href="#声名方式" class="headerlink" title="声名方式"></a>声名方式</h3><ul><li><p>标准声名方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数对象名</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    命令<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匿名声名方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 函数对象名 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    命令<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><ol><li>浏览器并不会自动调用JavaScript函数。</li><li>可以通过命令行方式来调用Java函数。</li><li>通过绑定在HTML标签上监听事件通知浏览器调用指定函数进行处理。</li></ol><h3 id="function创建时机"><a href="#function创建时机" class="headerlink" title="function创建时机"></a>function创建时机</h3><ul><li>在浏览器加载<script>时共加载两次。<ol><li>第一次：将<script>标签中所有以标准声名的函数对象进行创建。</li><li>第二次：将<script>标签中所有命令按照自上而下顺序来执行。</li></ol></li></ul><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ol><li>JavaScript中，每一个都有arguments属性。</li><li>arguments是一个数组。</li><li>在函数调用时，将实参传入到函数的argumens中，再由arguments将数据传入给函数的形参中。</li><li>arguments属性的存在，可以将JavaScript中函数在调用传递实参与形参来进行隔离，增加函数的灵活性。</li><li>arguments属性只能在函数体内使用，不能在函数体外使用。</li></ol><h4 id="arguments应用"><a href="#arguments应用" class="headerlink" title="arguments应用"></a>arguments应用</h4><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 函数重载</span>    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3<span class="token punctuation">,</span>num4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></script></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式(04)</title>
      <link href="/posts/c928c9ab.html"/>
      <url>/posts/c928c9ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>由Java技术开发一个jar包</li><li>作用降低JSP文件开发时Java命令开发强度</li><li>Tomcat服务器本身自带了EL工具包（Tomcat安装地址/lib/el-api.jar）</li></ul><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><ul><li><p>代替响应对象 将Servlet中doGet/doPost的执行结果写入到响应体。</p></li><li><p>JSP文件主要开发步骤：</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%    String value = (String)request.getAttribute("key");%><%=value%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>从指定的作用域对象读取处理结果。</li><li>将得到数据进行类型强转。</li><li>将转换后的数据写入到响应体。</li></ol></li><li><p>以上开发步骤太繁琐，可以使用EL表达式简化开发步骤。</p></li></ul><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-jsp"><code class="language-jsp">${作用域对象别名.共享数据名}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="命令作用"><a href="#命令作用" class="headerlink" title="命令作用"></a>命令作用</h2><ul><li>执行时从指定的【作用域对象】中读取指定【共享数据】的内容并自动的写入到响应体。</li></ul><h2 id="EL表达式作用域对象别名"><a href="#EL表达式作用域对象别名" class="headerlink" title="EL表达式作用域对象别名"></a>EL表达式作用域对象别名</h2><table><thead><tr><th>属性范围(jstl名称)</th><th>EL名称</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>PageScope</td><td></td></tr><tr><td>Request</td><td>RequestScope</td><td>请求作用域</td></tr><tr><td>Session</td><td>SessionScope</td><td>会话作用域</td></tr><tr><td>Application</td><td>ApplicationScope</td><td>全局作用域</td></tr></tbody></table><h2 id="与-运算符"><a href="#与-运算符" class="headerlink" title="**.**与 [ ] 运算符"></a>**.**与 <strong>[ ]</strong> 运算符</h2><ul><li><p>EL 提供 . 和 [ ] 两种运算符来导航数据。下列两者所代表的意思是一样的：</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.user.sex}等于${sessionScope.user["sex"]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>. 和 [ ] 也可以同时混合使用，如下：</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.shoppingCart[0].price}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>以上两者的差异：</p><ul><li>当要存取的属性名称中包含一些特殊字符，如.或–等并非字母或数字的符号，就一定要使用 [ ]</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--错误写法:因为属性名中含有-/--%>     ${user.My-Name}   <%--正确写法:--%>                     ${user["My-Name"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>我们来考虑下列情况：</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.user[data]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此时，data 是一个变量，假若data的值为”sex”时，那上述的例子等于:</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.user.sex}；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>假若data 的值为”name”时，它就等于${sessionScope.user.name}，因此，如果要动态取值时，就可以用上述的方法来做，但无法做到动态取值。</p></li></ul><h2 id="简化版EL表达式"><a href="#简化版EL表达式" class="headerlink" title="简化版EL表达式"></a>简化版EL表达式</h2><h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-jsp"><code class="language-jsp">${作用域对象别名}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><p>由于在EL简化版中没有指定作用域对象别名。所以EL表达式采用”猜测算法”，首先到【pageContext】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【pageCotnext】没有找到共享数据，到【request】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【request】没有找到共享数据，到【session】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【session】没有找到共享数据，到【application】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【application】没有找到共享数据,此时返回null。</p></li></ul><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><ul><li>增加程序运行时间。</li><li>导致定位数据错误。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>简化版设计之初就是为了从当前页作用域对象读取数据并输出。所以从request，session，application读取数据并输出时应该避免使用简化版。</p><h2 id="EL运算表达式"><a href="#EL运算表达式" class="headerlink" title="EL运算表达式"></a>EL运算表达式</h2><ol><li>EL表达式允许开发人员将读取共享数据进行相关运算之后，再进行输出。</li><li>EL表达式支持运算：<ul><li>数学运算表达式</li><li>关系运算表达式</li><li>逻辑运算表达式</li></ul></li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2029%3A%E6%97%A5%2017%3A%E6%97%B6%2034%3A%E5%88%86EL%E8%BF%90%E7%AE%97%E7%AC%A6.jpg" alt="EL表达式"></p><ol start="3"><li>EL表达式提供了一个用于测试对象是否为空的特殊运算符”empty”，其语法形式为${empty 变量名}，它能判断当前变量(确切的硕，应该是命名空间)是否为空。在以下情况下empty运算符返回true：<ul><li>当前变量不存在(即没有定义)。</li><li>当前变量值为null</li><li>当前变量引用集合(Set、list、Map)类型的对象，并且在当前集合对象中不包含任何元素。</li><li><strong>注意</strong>：empty运算符可以与”!”运算符一起使用。</li></ul></li></ol><h2 id="EL表达式高级类型对象的属性输出"><a href="#EL表达式高级类型对象的属性输出" class="headerlink" title="EL表达式高级类型对象的属性输出"></a>EL表达式高级类型对象的属性输出</h2><h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-jsp"><code class="language-jsp">${作用域对象别名.共享数据名.属性名}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令作用-1"><a href="#命令作用-1" class="headerlink" title="命令作用"></a>命令作用</h3><p>从作用域对象读取到指定的高级类型对象，并将高级类型对象中指定属性内容写入到响应体。</p><h2 id="EL表达式专有异常"><a href="#EL表达式专有异常" class="headerlink" title="EL表达式专有异常"></a>EL表达式专有异常</h2><h3 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h3><p>javax.el.PropertyNotFoundException：类型【xxxx】不存在【属性名】既在某个类中没有找到对应的属性。</p><h3 id="异常原因分析"><a href="#异常原因分析" class="headerlink" title="异常原因分析"></a>异常原因分析</h3><ul><li>EL表达式在读取对象中属性时，通过【反射机制】调用当前属性对应的get方法得到属性的值，如果当前属性没有声明对应get方法，此时EL表达式认为当前<br>  类文件没有这个属性。</li></ul><h2 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在EL表达式中可以直接使用的一组工具对象，用于提供对EL表达式功能扩充。</p><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">param</td><td align="left">将请求参数名称映射到单个字符串参数值(通过调用 ServletRequest.getParameter (String name) 获得)。getParameter (String) 方法返回带有特定名称的参数。表达式 ${param . name}相当于request.getParameter (name)。</td></tr><tr><td align="left">paramValues</td><td align="left">将请求参数名称映射到一个数值数组(通过调用 ServletRequest.getParameter (String name) 获得)。它与 param 隐式对象非常类似，但它检索一个字符串数组而不是单个值。表达式 ${paramvalues. name} 相当于 request.getParamterValues(name)。</td></tr><tr><td align="left">header</td><td align="left">将请求头名称映射到单个字符串头值(通过调用 ServletRequest.getHeader(String name) 获得)。表达式 ${header. name} 相当于 request.getHeader(name)。</td></tr><tr><td align="left">headerValues</td><td align="left">将请求头名称映射到一个数值数组(通过调用ServletRequest.getHeaders(String) 获得)。它与头隐式对象非常类似。表达式 ${headerValues. name} 相当于 request.getHeaderValues(name)。</td></tr><tr><td align="left">cookie</td><td align="left">将 cookie 名称映射到单个 cookie 对象。向服务器发出的客户端请求可以获得一个或多个 cookie。表达式 ${cookie. name .value} 返回带有特定名称的第一个 cookie 值。如果请求包含多个同名的cookie，则应该使用 ${headerValues. name} 表达式。</td></tr><tr><td align="left">initParam</td><td align="left">将上下文初始化参数名称映射到单个值(通过调用 ServletContext.getInitparameter(String name) 获得)。</td></tr></tbody></table><h2 id="EL表达式禁用"><a href="#EL表达式禁用" class="headerlink" title="EL表达式禁用"></a>EL表达式禁用</h2><h3 id="在当前JSP文件中禁用EL表达式"><a href="#在当前JSP文件中禁用EL表达式" class="headerlink" title="在当前JSP文件中禁用EL表达式"></a>在当前JSP文件中禁用EL表达式</h3><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page isELIgnored="true" %> <%--表示是否禁用EL语言,TRUE表示禁止.FALSE表示不禁止--%><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在整个项目中禁用EL表达式"><a href="#在整个项目中禁用EL表达式" class="headerlink" title="在整个项目中禁用EL表达式"></a>在整个项目中禁用EL表达式</h3><pre class="line-numbers language-jsp"><code class="language-jsp"><jsp-config><jsp-property-group><url-pattern>*.jsp</url-pattern><el-ignored>true</el-ignored></jsp-property-group></jsp-config><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON工具包"><a href="#JSON工具包" class="headerlink" title="JSON工具包"></a>JSON工具包</h2><h3 id="JSON工具包创建-对象"><a href="#JSON工具包创建-对象" class="headerlink" title="JSON工具包创建(对象)"></a>JSON工具包创建(对象)</h3><p>Servlet</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 1.得到一个部门类型的对象</span>        Dept dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"浙江省 金华市 金东区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过json工具包中的工具类将部门对象内容转换成JSON格式字符串</span>        JSONObject jsonObject <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.将JS0N格式字符串添加请求作用域对象</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index_02.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP</p><pre class="line-numbers language-jsp"><code class="language-jsp">        function init() {            var deptObj = ${requestScope.key};            document.getElementById("deptNo").value = deptObj.deptNo;            document.getElementById("deptName").value = deptObj.deptName;            document.getElementById("loc").value = deptObj.loc;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON工具包创建-集合"><a href="#JSON工具包创建-集合" class="headerlink" title="JSON工具包创建(集合)"></a>JSON工具包创建(集合)</h3><p>Servlet</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 1.得到一个用户类型的对象</span>        Dept dept01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"浙江省 金华市 金东区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"河南省 开封市 杞县"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"台湾 台东县 延平乡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token string">"海南省 三沙市 南沙群岛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.将用户对象放置到集合中</span>        List deptList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept01<span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept02<span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept03<span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept04<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过json工具包中的工具类将集合内容转换成JSON数组格式字符串</span>        JSONArray jsonArray <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>deptList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.将JS0N数组格式字符串添加请求作用域对象</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> jsonArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index_03.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP</p><pre class="line-numbers language-jsp"><code class="language-jsp">        function init() {            var jsonArray = ${requestScope.key};            var one = document.getElementById("one");            for (var i = 0; i < jsonArray.length; i++) {                var jsonobj = jsonArray[i];                var trDom = document.createElement("tr");                var tdDom01 = document.createElement("td");                var tdDom02 = document.createElement("td");                var tdDom03 = document.createElement("td");                tdDom01.innerHTML = jsonobj.deptNo;                tdDom02.innerHTML = jsonobj.deptName;                tdDom03.innerHTML = jsonobj.loc;                trDom.appendChild(tdDom01);                trDom.appendChild(tdDom02);                trDom.appendChild(tdDom03);                one.appendChild(trDom);            }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP(03)</title>
      <link href="/posts/382adfc6.html"/>
      <url>/posts/382adfc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="JSP规范介绍"><a href="#JSP规范介绍" class="headerlink" title="JSP规范介绍"></a>JSP规范介绍</h2><ul><li>来自于JAVAEE规范中一种。</li><li>JSP规范制定了如何开发JSP文件代替响应对象将处理结果写入到响应体的开发流程。</li><li>JSP规范制定了Http服务器应该如何调用管理JSP文件。</li></ul><h2 id="响应对象存在弊端"><a href="#响应对象存在弊端" class="headerlink" title="响应对象存在弊端"></a>响应对象存在弊端</h2><ul><li>适合将数据量较少的处理结果写入到响应体。</li><li>如果处理结果数量过多，使用响应对象增加开发难度。</li></ul><h2 id="JSP文件优势"><a href="#JSP文件优势" class="headerlink" title="JSP文件优势"></a>JSP文件优势</h2><ul><li>JSP文件在互联网通信过程，是响应对象替代品。</li><li>降低将处理结果写入到响应体的开发工作量降低处理结果维护难度。</li><li>在JSP文件开发时，可以直接将处理结果写入到JSP文件不需要手写out.print()命令，在Http服务器调用JSP文件时，根据JSP规范要求自动的将JSP文件书写的所有内容通过输出流写入到响应体。</li></ul><h2 id="HTML文件与JSP文件区别"><a href="#HTML文件与JSP文件区别" class="headerlink" title="HTML文件与JSP文件区别"></a>HTML文件与JSP文件区别</h2><ul><li><p>作为资源文件类型不同</p><ol><li>HTML文件属于静态资源文件，其相关命令需要在浏览器编译并执行的。</li><li>JSP文件属于动态资源文件，其相关命令需要在服务端编译并执行的。</li></ol></li><li><p>调用形式不同</p><ol><li>如果浏览器访问HTML文件，此时Http服务器直接通过一个输出流。</li><li>将HTML文件中所有的内容写入到响应体。</li><li>如果浏览器访问JSP文件。此时Http服务器根据JSP规范来操作JSP文件编辑—-&gt;编译—–&gt;调用。</li></ol></li></ul><h2 id="JSP文件运算原理"><a href="#JSP文件运算原理" class="headerlink" title="JSP文件运算原理"></a>JSP文件运算原理</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2028%3A%E6%97%A5%2010%3A%E6%97%B6%2031%3A%E5%88%86JSP%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="JSP运行原理"></p><ol><li>Http服务器将JSP文件内容【编辑】为一个Servlet接口实现类（.java）</li><li>Http服务器将Servlet接口实现类【编译】为class文件(.class)</li><li>Http服务器通过Servlet实例对象调用_jspService方法，将jsp文件内容写入到响应体</li><li>Http服务器负责创建这个class的实例对象，这个实例对象就是Servlet实例对象</li></ol><p>JSP实现类存放位置：<br>C:\Users[登录windows系统用户角色名]\AppData\Local\JetBrains\IntelliJIdea[idea版本号]\tomcat[网站工作空间]\work\Catalina\localhost[网站别名]\org\apache\jsp</p><h2 id="JSP隐含对象"><a href="#JSP隐含对象" class="headerlink" title="JSP隐含对象"></a>JSP隐含对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>容器自动创建，在JSP文件中可以直接使用的对象。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>JSP预先创建的这些对象可以简化对HTTP请求、响应信息的访问。</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2028%3A%E6%97%A5%2010%3A%E6%97%B6%2053%3A%E5%88%86JSP%E9%9A%90%E5%90%AB%E5%AF%B9%E8%B1%A1.png" alt="JSP隐含对象"></p><table><thead><tr><th align="center">隐含对象</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">request</td><td align="center">HttpServletRequest</td><td align="center">请求对象</td></tr><tr><td align="center">response</td><td align="center">HttpServletResponse</td><td align="center">响应对象</td></tr><tr><td align="center">out</td><td align="center">JSPWrite</td><td align="center">输出流对象</td></tr><tr><td align="center">session</td><td align="center">HttpSession</td><td align="center">会话作用域对象</td></tr><tr><td align="center">application</td><td align="center">ServletContext</td><td align="center">全局作用域对象</td></tr><tr><td align="center">pagecontext</td><td align="center">PageContext</td><td align="center">JSP页面上下文</td></tr><tr><td align="center">page</td><td align="center">Object</td><td align="center">JSP页面本身</td></tr><tr><td align="center">config</td><td align="center">Servletcontig</td><td align="center">Servlet配置对象</td></tr><tr><td align="center">exception</td><td align="center">Throwable</td><td align="center">异常对象</td></tr></tbody></table><h2 id="HttpJspBase类"><a href="#HttpJspBase类" class="headerlink" title="HttpJspBase类"></a>HttpJspBase类</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2028%3A%E6%97%A5%2010%3A%E6%97%B6%2037%3A%E5%88%86HttpJspBase.jpg" alt="HttpJspBase继承关系"></p><ul><li>Tomcat将JSP文件编辑后生成的Java文件，继承与HttpJspBase。通过Apache官方文档查看，其身份是HttpServlet的子类。所以Tomcat将JSP编辑为的文件为一个Servlet接口实现类。</li></ul><h2 id="jspService方法"><a href="#jspService方法" class="headerlink" title="_jspService方法"></a>_jspService方法</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>当一个JSP文件被访问时，Tomcat调用的并不是当前JSP文件。而是JSP文件对应的Servlet接口实现类中_jspService方法。_jspService方法负责将开发人员在JSP文件书写的所有内容写入到响应体中。</p><h3 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h3><ul><li>判断当前请求方式。Jsp文件可以接收的请求方式有POST,GET,HEAD</li><li>声明局部变量。这些局部变量都可以在JSP文件开发时直接使用</li><li>输出部分。这部分执行时将JSP文件内容通过输出流写入到响应体</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token keyword">final</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse response<span class="token punctuation">)</span>      <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherType<span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getDispatcherType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _jspx_method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Allow"</span><span class="token punctuation">,</span><span class="token string">"GET, HEAD, POST, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Allow"</span><span class="token punctuation">,</span><span class="token string">"GET, HEAD, POST, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_METHOD_NOT_ALLOWED<span class="token punctuation">,</span> <span class="token string">"JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// JSP输出内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h2><h3 id="执行标记"><a href="#执行标记" class="headerlink" title="执行标记"></a>执行标记</h3><h4 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h4><pre class="line-numbers language-jsp"><code class="language-jsp">    <% int a  =10;  %> 声明局部变量    <% boolean flag = 30 >= 40; %>  Java中表达式(数学表达式，关系表达式，逻辑表达式)    <%        if(判断条件){        }else{        }        while(){        }        // 书写控制语句    %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命令作用："><a href="#命令作用：" class="headerlink" title="命令作用："></a>命令作用：</h4><ul><li>通知Http服务器将JSP文件中Java命令与其他普通执行结果进行区分。</li></ul><h3 id="输出标记"><a href="#输出标记" class="headerlink" title="输出标记"></a>输出标记</h3><h4 id="命令格式：-1"><a href="#命令格式：-1" class="headerlink" title="命令格式："></a>命令格式：</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><%=java的变量名%><%=java的表达式%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="命令作用：-1"><a href="#命令作用：-1" class="headerlink" title="命令作用："></a>命令作用：</h4><ul><li>通知Tomcat将输出标记中【变量的值】或则输出标记中【表达式运算结果】写入到响应体。</li></ul><h2 id="Servlet数据共享给JSP常用方法"><a href="#Servlet数据共享给JSP常用方法" class="headerlink" title="Servlet数据共享给JSP常用方法"></a>Servlet数据共享给JSP常用方法</h2><ul><li>JSP文件被访问时，并不是JSP文件在执行。而是对应的Servlet在执行。</li><li>自定义Serlvet接口实现类与JSP文件之间调用关系，等同于两个Servlet之间调用关系。</li><li>自定义Servelt接口实现类与JSP文件之间可以通过重定向方案或则请求转发方案进行调用考虑到运行效率问题，一般采用【请求转发】。</li><li>自定义Servlet接口实现类可以通过请求作用域对象将共享数据交给JSP来输出到响应体。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http网络协议(01)</title>
      <link href="/posts/de9cd0ed.html"/>
      <url>/posts/de9cd0ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="Http网络协议"><a href="#Http网络协议" class="headerlink" title="Http网络协议"></a>Http网络协议</h1><h2 id="网络协议包"><a href="#网络协议包" class="headerlink" title="网络协议包"></a>网络协议包</h2><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><p>​    在网络中传递信息都是以【二进制】形式存在的。接收方【浏览器/服务器】在接收信息后，要做第一件事就是将【二进制数据】进行编译【文字，图片，视频，命令】由于传递信息数据量往往比较巨大，导致接收方很难在一组连续二进制得到对应数据比如：浏览器发送一个请求： <a href="http://192.168.100.2:8080/index.html%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E4%BB%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BD%A2%E5%BC%8F%E5%8F%91%E9%80%81">http://192.168.100.2:8080/index.html这个请求信息以二进制形式发送</a> 01010101010110101010101101010，Http服务器很难从二进制数据得到相关信息。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>网络协议包一组有规律二进制数据，在这组数据存在了固定空间每一个空间专门存放特定信息，这样接收方在接收网络协议包之后就可以到固定空间得到对应信息，网络协议包出现极大降低了接收方对接收二进制数据编译难度。</p><p>例如：【0000（ip地址）0000（端口号）0000（资源文件名）0000】</p><h2 id="常见网络协议"><a href="#常见网络协议" class="headerlink" title="常见网络协议"></a>常见网络协议</h2><ol><li><p>FTP网络协议包</p></li><li><p>Http网络协议包</p></li></ol><h3 id="Http网络协议包："><a href="#Http网络协议包：" class="headerlink" title="Http网络协议包："></a>Http网络协议包：</h3><p>在基于C/S结构下互联网通信过程中，所有在网络中传递信息都是保存在Http网络协议包。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/CS%E6%9E%B6%E6%9E%84%E7%BD%91%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Http网络协议包"></p><h3 id="网络协议包分类："><a href="#网络协议包分类：" class="headerlink" title="网络协议包分类："></a>网络协议包分类：</h3><h4 id="Http请求协议包"><a href="#Http请求协议包" class="headerlink" title="Http请求协议包"></a>Http请求协议包</h4><p>在浏览器准备发送请求时，负责创建一个Http请求协议包，浏览器将请求信息以二进制形式保存在Http请求协议包各个空间，由浏览器负责将Http请求协议包推送到指定服务端计算机。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Http%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE%E5%8C%85%E7%BB%93%E6%9E%84.png" alt="Http请求协议包"></p><h5 id="Http请求协议包内部结构"><a href="#Http请求协议包内部结构" class="headerlink" title="Http请求协议包内部结构"></a>Http请求协议包内部结构</h5><ol><li><p>按照自上而下划分，分为4个空间</p></li><li><p>空间划分：</p><pre class="line-numbers language-http内部空间"><code class="language-http内部空间">              请求行：[                    url:请求地址（http://192.168.100.2:8080/index.html）                    method:请求方式（POST/GET）                 ]                请求头：[                              请求参数信息【GET】                 ]                空白行：[                        没有任何内容，起到隔离作用                 ]                 请求体:[                               请求参数信息【POST】                  ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="Post与Get区别："><a href="#Post与Get区别：" class="headerlink" title="Post与Get区别："></a>Post与Get区别：</h5><ul><li><p>在浏览器回退的时候，GET请求不会重新发送，而POST请求会重新发送。</p></li><li><p>GET 请求会被浏览器主动缓存，而POST不会。</p></li><li><p>GET 的请求参数直接暴露在URL中，相对不隐私、不安全。POST请求的参数放在请求体中，相对隐私、安全。</p></li><li><p>GET 的请求参数会被保存到浏览器的历史记录中，POST 不会。</p></li><li><p>GET 请求参数有大小限制，一般 2KB 左右。POST 理论上没有传递参数没有大小限制，有些后端服务及会有一个大小限制，比如 Tomcat 的大小限制为 2M。</p></li></ul><h4 id="Http响应协议包"><a href="#Http响应协议包" class="headerlink" title="Http响应协议包"></a>Http响应协议包</h4><p>Http服务器在定位到被访问的资源文件之后。负责创建一个Http响应协议包，Http服务器将定位文件内容或则文件命令以二进制形式写入到Http响应协议包各个空间，由Http服务器负责将Http响应协议包推送回发起请求的浏览器上。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Http%E5%93%8D%E5%BA%94%E5%8D%8F%E8%AE%AE%E5%8C%85%E7%BB%93%E6%9E%84.png" alt="Http响应协议包"></p><h5 id="Http响应协议包内部结构"><a href="#Http响应协议包内部结构" class="headerlink" title="Http响应协议包内部结构"></a>Http响应协议包内部结构</h5><ol><li><p>按照自上而下划分，分为4个空间</p></li><li><p>空间划分：</p><pre class="line-numbers language-http内部空间"><code class="language-http内部空间">                    状态行：[                          Http状态码                      ]                     响应头：[                          content-type: 指定浏览器采用对应编译器                          对响应体二进制数据进行解析                      ]                     空白行：[                          没有任何内容，起到隔离作用                      ]                     响应体：[                         可能被访问静态资源文件内容                         可能被访问的静态资源文件命令                         可能被访问的动态资源文件运行结果                          *****都是以二进制形式***                      ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet(02)</title>
      <link href="/posts/ff2de692.html"/>
      <url>/posts/ff2de692.html</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="初识Servlet"><a href="#初识Servlet" class="headerlink" title="初识Servlet"></a>初识Servlet</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>Servlet 是 JavaEE 规范之一。 规范就是接口</li><li>Servlet 就 JavaWeb 三大组件之一。 三大组件分别是： Servlet 程序、 Filter 过滤器、 Listener 监听</li><li>Servlet 是运行在服务器上的一个 java 小程序， 它可以接收客户端发送过来的请求， 并响应数据给客户端。 </li></ol><h3 id="Servlet规范"><a href="#Servlet规范" class="headerlink" title="Servlet规范"></a>Servlet规范</h3><ul><li>作用：<ol><li>在Servlet规范中，指定【动态资源文件】开发步骤。</li><li>在Servlet规范中，指定Http服务器调用动态资源文件规则。</li><li>在Servlet规范中，指定Http服务器管理动态资源文件实例对象规则。</li></ol></li></ul><h2 id="Servlet基本使用"><a href="#Servlet基本使用" class="headerlink" title="Servlet基本使用"></a>Servlet基本使用</h2><ol><li><p>Servlet接口实现类</p><ul><li><p>Tomcat服务器下lib文件下有一个servlet-api.jar存放的Servlet接口(javax.servlet.Servlet接口)</p></li><li><p>Servlet规范中任务，Http服务器能调用的【动态资源文件】必须是一个Servlet接口实现类</p><p>  例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不是动态文件，Tomcat无权调用</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Tearcher</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 合法动态文件，Tomcat可以调用</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>将Servlet接口实现类信息【注册】到Tomcat服务器</p><p> 【网站】–&gt;【web】–&gt;【WEB-INF】—&gt;web.xml</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>将servlet接口实现类类路径地址交给Tomcat<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>ServletTest01<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>lesson01<span class="token punctuation">.</span>ServletTest01<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>为servlet接口实现类提供一个简短的别名<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>ServletTest01<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span>Test01<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在浏览器向Tomcat索要ServletTest01时的地址：</p><p> <a href="http://localhost:8080/ServletTest01/Test01">http://localhost:8080/ServletTest01/Test01</a></p></li></ol><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ol><li><p>网站中所有的Servlet接口实现类的实例对象，只能由Http服务器负责创建，开发人员不能手动创建Servlet接口实现类的实例对象。</p></li><li><p>在默认的情况下，Http服务器接收到对于当前Servlet接口实现类第一次请求时自动创建这个Servlet接口实现类的实例对象，在手动配置情况下，要求Http服务器在启动时自动创建某个Servlet接口实现类的实例对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>ServletTest03<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明一个变量存储servlet接口实现类类路径<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>lesson01<span class="token punctuation">.</span>ServletTest03<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>以上填写一个大于<span class="token number">0</span>的整数即可<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Http服务器运行期间，一个Servlet接口实现类只能被创建出一个实例对象</p></li><li><p>在Http服务器关闭时刻，自动将网站中所有的Servlet对象进行销毁</p></li></ol><h3 id="HttpServletResponse接口-响应对象"><a href="#HttpServletResponse接口-响应对象" class="headerlink" title="HttpServletResponse接口(响应对象)"></a>HttpServletResponse接口(响应对象)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li>HttpServletResponse接口来自于Servlet规范中，在Tomcat中存在servlet-api.jar。</li><li>HttpServletResponse接口实现类由Http服务器负责提供。</li><li>HttpServletResponse接口负责将doGet/doPost方法执行结果写入到【响应体】交给浏览器。</li><li>开发人员习惯于将HttpServletResponse接口修饰的对象称为【响应对象】。</li></ul><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ol><li>将执行结果以二进制形式写入到【响应体】</li><li>设置响应头中[content-type]属性值，从而控制浏览器使用对应编译器将响应体二进制数据编译为【文字，图片，视频，命令】。</li><li>设置响应头中【location】属性，将一个请求地址赋值给location，从而控制浏览器向指定服务器发送请求。</li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>getWriter();    获取Tomcat服务器输出流对象(返回PrintWriter对象)</li><li>sendRedirect()：在响应体中添加请求地址</li><li>setContentType()：在响应体中针对相应输出数据指定浏览器采用正确格式输出，及编码格式</li><li>write()方法：通过Tomcat服务器输出流对象为响应体输出二进制数据<br> 注意：一般返回【字符】、【字符串】、【ASCII码】</li><li>print()方法：通过Tomcat服务器输出流对象为响应体输出二进制数据<br> 注意：print方法可以输出任何数据且不会转变成ASCII码，所以大多数使用print方法</li></ol><h3 id="HttpServletRequest接口-请求对象"><a href="#HttpServletRequest接口-请求对象" class="headerlink" title="HttpServletRequest接口(请求对象)"></a>HttpServletRequest接口(请求对象)</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><ul><li>HttpServletRequest接口来自于Servlet规范中，在Tomcat中存在servlet-api.jar。</li><li>HttpServletRequest接口实现类由Http服务器负责提供。</li><li>HttpServletRequest接口负责在doGet/doPost方法运行时读取Http请求协议包中信息。</li><li>HttpServletRequest接口实现了service方法，此方法可以处理get/post请求。</li><li>开发人员习惯于将HttpServletRequest接口修饰的对象称为【请求对象】。</li></ul><h4 id="主要功能-1"><a href="#主要功能-1" class="headerlink" title="主要功能"></a>主要功能</h4><ol><li>可以读取Http请求协议包中【请求行】信息</li><li>可以读取保存在Http请求协议包中【请求头】或则【请求体】中请求参数信息</li><li>可以代替浏览器向Http服务器申请资源文件调用</li></ol><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>getRequestURL()：获取【请求行】中【url】信息</li><li>getMethod()：获取【请求行】中【method】(请求方式)信息</li><li>getRequestURI()：获取【请求行】中uri信息</li><li>setCharacterEncoding：修改请求字符集编码格式</li></ol><blockquote><p>URI：</p><ul><li>资源文件精准定位地址，在请求行中并没有URI这个属性</li><li>实际上是截取的URL中的字符串，这个字符串格式：“/网站名/资源文件名”</li><li>URI用于HTTP服务器对访问的资源文件进行定位</li></ul></blockquote><ol start="4"><li><p>getParameterNames()：获取请求参数名称</p></li><li><p>getParameter()：获取请求参数值</p></li></ol><h3 id="请求对象与响应对象的生命周期"><a href="#请求对象与响应对象的生命周期" class="headerlink" title="请求对象与响应对象的生命周期"></a>请求对象与响应对象的生命周期</h3><p>1.在Http服务器接收到浏览器发送的【Http请求协议包】之后，自动为当前的【Http请求协议包】生成一个【请求对象】和一个【响应对象】。</p><p>2.在Http服务器调用doGet/doPost方法时，负责将【请求对象】和【响应对象】作为实参传递到方法，确保doGet/doPost正确执行。</p><p>3.在Http服务器准备推送Http响应协议包之前，负责将本次请求关联的【请求对象】和【响应对象】销毁。</p><blockquote><p>【请求对象】和【响应对象】生命周期贯穿一次请求的处理过程中【请求对象】和【响应对象】相当于用户在服务端的代言人。</p></blockquote><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="请求对象与响应对象的生命周期"></p><h3 id="欢迎资源文件"><a href="#欢迎资源文件" class="headerlink" title="欢迎资源文件"></a>欢迎资源文件</h3><h4 id="引例："><a href="#引例：" class="headerlink" title="引例："></a>引例：</h4><p>用户发送了一个针对某个网站的【默认请求】时，此时由Http服务器自动从当前网站返回的资源文件。</p><p>例：正常请求(网址)：<a href="https://www.baidu.com:80/index.html">https://www.baidu.com:80/index.html</a><br>        常用请求(网址)：<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h4 id="Tomcat对于默认欢迎资源文件规则："><a href="#Tomcat对于默认欢迎资源文件规则：" class="headerlink" title="Tomcat对于默认欢迎资源文件规则："></a>Tomcat对于默认欢迎资源文件规则：</h4><ol><li><p>规则位置：Tomcat安装位置/conf/web.xml</p></li><li><p>规则命令：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="设置当前网站的默认欢迎资源文件规则"><a href="#设置当前网站的默认欢迎资源文件规则" class="headerlink" title="设置当前网站的默认欢迎资源文件规则"></a>设置当前网站的默认欢迎资源文件规则</h4><ol><li><p>规则位置：网站/web/WEB-INF/web.xml</p></li><li><p>规则命令：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>login.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>注意</strong>：网站设置自定义默认文件定位规则，此时Tomcat自带定位规则将失效.</p><h4 id="欢迎资源文件运行步骤："><a href="#欢迎资源文件运行步骤：" class="headerlink" title="欢迎资源文件运行步骤："></a>欢迎资源文件运行步骤：</h4><ol><li>Tomcat服务器自上而下查找第一行的资源文件是否存在，如存在则返回。</li><li>如不存在则查找第二个文件，如果第二个不存在则查找下条，直到将配置的资源文件查找完毕。</li><li>如查找完毕都找不到，则Tomcat返回404。</li></ol><h3 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><ol><li>由100—599三位数字组成的一个一串数字为状态码。</li><li>Http服务器在推送响应包之前，根据本次请求处理情况，将Http状态码写入到响应包中【状态行】上。</li><li>如果Http服务器针对本次请求，返回了对应的资源文件，通过Http状态码通知浏览器应该如何处理这个结果。</li><li>如果Http服务器针对本次请求，无法返回对应的资源文件，通过Http状态码向浏览器解释不能提供服务的原因。</li></ol><h4 id="分类-以下为常见状态码"><a href="#分类-以下为常见状态码" class="headerlink" title="分类(以下为常见状态码)"></a>分类(以下为常见状态码)</h4><h5 id="1XX："><a href="#1XX：" class="headerlink" title="1XX："></a>1XX：</h5><p>100：通知浏览器本次返回的资源文件，并不是一个独立的资源文件，需要浏览器在接收响应包之后，继续向Http服务器所要依赖的其他资源文件。</p><h5 id="2XX："><a href="#2XX：" class="headerlink" title="2XX："></a>2XX：</h5><p>200：通知浏览器本次返回的资源文件是一个完整独立资源文件，浏览器在接收到之后不需要所要其他关联文件。</p><h5 id="3XX："><a href="#3XX：" class="headerlink" title="3XX："></a>3XX：</h5><p>302：通知浏览器本次返回的不是一个资源文件内容而是一个资源文件地址，需要浏览器根据这个地址自动发起请求来索要这个资源文件。</p><p>例：response.sendRedirect(“资源文件地址”)写入到响应头中<br>以上行为会让Tomcat服务器将302状态码写入到状态行。</p><h5 id="4XX："><a href="#4XX：" class="headerlink" title="4XX："></a>4XX：</h5><p>404：通知浏览器，由于在服务端没有定位到被访问的资源文件，因此无法提供帮助。</p><p>405：通知浏览器，在服务端已经定位到被访问的资源文件（Servlet），但是这个Servlet对于浏览器采用的请求方式不能处理。</p><p>例如：浏览器是以get方式请求的，而服务器端只写了一个post方式接受请求，就会返回405。</p><h5 id="5XX："><a href="#5XX：" class="headerlink" title="5XX："></a>5XX：</h5><p> 500：通知浏览器，在服务端已经定位到被访问的资源文件（Servlet），这个Servlet可以接收浏览器采用请求方式，但是Servlet在处理请求期间，由于Java异常导致处理失败。</p><h3 id="Servlet之间调用"><a href="#Servlet之间调用" class="headerlink" title="Servlet之间调用"></a>Servlet之间调用</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>某些来自于浏览器发送请求，往往需要服务端中多个Servlet协同处理。但是浏览器一次只能访问一个Servlet，导致用户需要手动通过浏览器发起多次请求才能得到服务。这样增加用户获得服务难度，导致用户放弃访问当前网站。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>无论本次请求涉及到多少个Servlet,用户只需要【手动】通知浏览器发起一次请求即可。</p><h4 id="重定向解决方案"><a href="#重定向解决方案" class="headerlink" title="重定向解决方案"></a>重定向解决方案</h4><h5 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h5><p>服务器端：</p><p>用户第一次通过【手动方式】通知浏览器访问第一个Servlet动态文件。当第一个Servlet工作完毕后，将第二个Servlet地址写入到响应头location属性中，导致Tomcat将302状态码写入到状态行。</p><p>浏览器端：</p><p>在浏览器接收到响应包之后，会读取到302状态。此时浏览器自动根据响应头中location属性地址发起第二次请求，访问第二个Servlet去完成请求中剩余任务。</p><h5 id="实现命令"><a href="#实现命令" class="headerlink" title="实现命令:"></a>实现命令:</h5><ul><li>以上命令是将地址写入到响应包中响应头中location属性中。</li></ul><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h5><p>请求地址</p><p>既可以把当前网站内部的资源文件地址发送给浏览器 （/网站名/资源文件名）也可以把其他网站资源文件地址发送给浏览器(<a href="http://ip地址:端口号/网站名/资源文件名)。">http://ip地址:端口号/网站名/资源文件名)。</a></p><p>请求次数</p><p>浏览器至少发送两次请求，但是只有第一次请求是用户手动发送。后续请求都是浏览器自动发送的。</p><p>请求方式</p><p>重定向解决方案中，通过地址栏通知浏览器发起下一次请求，因此  通过重定向解决方案调用的资源文件接收的请求方式一定是【GET】。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>重定向解决方案需要在浏览器与服务器之间进行多次往返，大量时间消耗在往返次数上，增加用户等待服务时间。</p><h5 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h5><p>因为第二次的Servlet是通过第一个Servlet的响应头location属性发送到浏览器中的，所以当浏览器发送第二次Servlet时候是以网址发送，网址发送都是以Get方式发送请求。</p><h4 id="请求转发解决方案"><a href="#请求转发解决方案" class="headerlink" title="请求转发解决方案"></a>请求转发解决方案</h4><h5 id="工作原理：-1"><a href="#工作原理：-1" class="headerlink" title="工作原理："></a>工作原理：</h5><p>用户第一次通过手动方式要求浏览器访问第一个Servlet。当抵押给Servlet工作完毕后，通过当前的请求对象代替浏览器向Tomcat发送请求，申请调用第二个Servlet。Tomcat在接收到这个请求之后，自动调用第二个Servlet来完成剩余任务。</p><h5 id="实现命令："><a href="#实现命令：" class="headerlink" title="实现命令："></a>实现命令：</h5><ul><li>请求对象代替浏览器向Tomcat发送请求</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.通过当前请求对象生成资源文件申请报告对象</span>RequestDispatcher  report <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/资源文件名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>一定要以<span class="token string">"/"</span>为开头<span class="token comment" spellcheck="true">//2.将报告对象发送给Tomcat</span>report<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>当前请求对象，当前响应对象<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="特征：-1"><a href="#特征：-1" class="headerlink" title="特征："></a>特征：</h5><p>请求地址：<br>只能向Tomcat服务器申请调用当前网站下资源文件地址。</p><p>请求次数：</p><p>在请求转发过程中，浏览器只发送一次请求。</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li><p>无论本次请求涉及到多少个Servlet，用户只需要手动通过浏览器发送一次请求。</p></li><li><p>Servlet之间调用发生在服务端计算机上，节省服务端与浏览器之间往返次数增加处理服务速度。</p></li></ul><h5 id="请求方式：-1"><a href="#请求方式：-1" class="headerlink" title="请求方式："></a>请求方式：</h5><p>在请求转发过程中，浏览器只发送一个了个Http请求协议包。参与本次请求的所有Servlet共享同一个请求协议包，因此这些Servlet接收的请求方式与浏览器发送的请求方式保持一致。</p><h3 id="Servlet数据共享"><a href="#Servlet数据共享" class="headerlink" title="Servlet数据共享"></a>Servlet数据共享</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>当第一个Servlet工作完毕后，将产生的数据交给第二个Servlet来使用。这两者之间的数据传递称之为”数据共享。</p><h4 id="数据共享的方案："><a href="#数据共享的方案：" class="headerlink" title="数据共享的方案："></a>数据共享的方案：</h4><h5 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h5><h6 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h6><ul><li><p>来自于Servlet规范中一个接口。在Tomcat中存在servlet-api.jar，Tomcat服务器负责提供这个接口实现类。</p></li><li><p>如果两个Servlet来自于同一个网站。彼此之间通过网站的ServletContext实例对象实现数据共享。</p></li><li><p>开发人员习惯于将ServletContext对象称为【全局作用域对象】。</p></li></ul><h6 id="工作原理：-2"><a href="#工作原理：-2" class="headerlink" title="工作原理："></a>工作原理：</h6><p>每一个网站都存在一个全局作用域对象。 这个全局作用域对象【相当于】一个Map集合，在这个网站中第一个Servlet可以将一个数据存入到全局作用域对象，当前网站中其他Servlet此时都可以从全局作用域对象得到这个数据进行使用。</p><h6 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h6><ol><li>在Http服务器启动过程中，自动为当前网站在内存中创建一个全局作用域对象。</li><li>在Http服务器运行期间时，一个网站有且只有一个全局作用域对象。</li><li>在Http服务器运行期间，全局作用域对象一直处于存活状态。</li><li>在Http服务器准备关闭时，负责将当前网站中全局作用域对象进行销毁处理。</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/ServletContext%E6%8E%A5%E5%8F%A3%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="ServletContext流程图"></p><p><strong>总结</strong>：全局作用域对象生命周期贯穿网站整个运行期间。</p><h6 id="命令实现："><a href="#命令实现：" class="headerlink" title="命令实现："></a>命令实现：</h6><pre class="line-numbers language-java"><code class="language-java"> OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.通过【请求对象】向Tomcat索要当前网站中【全局作用域对象】</span>        ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：一般全局作用域对象名为：application</span>        <span class="token comment" spellcheck="true">//2.将数据添加到全局作用域对象作为【共享数据】</span>        application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>TwoServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.通过【请求对象】向Tomcat索要当前网站中【全局作用域对象】</span>        ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.从全局作用域对象得到指定关键字对应数据</span>        Object 数据 <span class="token operator">=</span>  application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Cookie类"><a href="#Cookie类" class="headerlink" title="Cookie类"></a>Cookie类</h5><h6 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h6><ul><li>Cookie来自于Servlet规范中一个工具类，存在于Tomcat提供servlet-api.jar中。</li><li>如果两个Servlet来自于同一个网站，并且为同一个浏览器/用户提供服务，此时借助于Cookie对象进行数据共享。</li><li>Cookie存放当前用户的私人数据，在共享数据过程中提高对用户的服务质量。</li><li> 在现实生活场景中，Cookie相当于用户在服务端得到【会员卡】</li></ul><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ol><li>cookie相当于一个map集合，但是这个键值对的key与value只能是String。</li><li>键值对中key不能是中文。</li></ol><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><ol><li><p>用户通过浏览器第一次向这个网站发送请求申请Servlet。 Servlet在运行期间创建一个Cookie存储与当前用户相关数据，Servlet工作完毕后，【将Cookie写入到响应头】交还给当前浏览器，浏览器收到响应响应包之后，将cookie存储在浏览器的缓存。</p></li><li><p>一段时间之后，用户通过【同一个浏览器】再次向【myWeb网站】发送请求申请TwoServlet时。【浏览器需要无条件的将myWeb网站之前推送过来的Cookie，写入到请求头】发送过去，此时第二个Servlet在运行时，就可以通过读取请求头中cookie中信息，得到第一个Servlet提供的共享数据。</p></li></ol><h6 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h6><ol><li><p>在默认情况下，Cookie对象存放在浏览器的缓存中。因此只要浏览器关闭，Cookie对象就被销毁掉</p></li><li><p>在手动设置情况下，可以要求浏览器将接收的Cookie存放在客户端计算机上硬盘上，同时需要指定Cookie<br> 在硬盘上存活时间。在存活时间范围内，关闭浏览器关闭客户端计算机，关闭服务器，都不会导致Cookie被销毁。在存活时间到达时，Cookie自动从硬盘上被删除。</p><pre class="line-numbers language-java"><code class="language-java">cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//cookie在硬盘上存活time分钟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Cooking%E6%B5%81%E7%A8%8B%E5%9B%BE3.jpg" alt="Cooking流程图"></p></li></ol><h6 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h6><p>例：同一个网站 OneServlet 与  TwoServlet 借助于Cookie实现数据共享</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一个Servlet</span>OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个cookie对象，保存共享数据（当前用户数据）</span>        Cookie card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie card1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"efg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.【发卡】将cookie写入到响应头，交给浏览器</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>card1<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>card2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*浏览器/用户    &lt;---    响应包,状态码：【200】                    【cookie: key1=abc; key2=eft】浏览器向网站发送请求访问TwoServlet ---> 请求包 【url:/myWeb/two method:get】                                      请求参数：xxxx                                      Cookie   key1=abc;key2=efg*/</span><span class="token comment" spellcheck="true">// 第二个Servlet     </span>TwoServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.调用请求对象从请求头得到浏览器返回的Cookie</span>        Cookie  cookieArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.循环遍历数据得到每一个cookie的key 与 value</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie card<span class="token operator">:</span>cookieArray<span class="token punctuation">)</span><span class="token punctuation">{</span>            String key <span class="token operator">=</span>   card<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 读取key  <span class="token string">"key1"</span>            String value <span class="token operator">=</span> card<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取value <span class="token string">"abc"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HttpSession接口"><a href="#HttpSession接口" class="headerlink" title="HttpSession接口"></a>HttpSession接口</h5><h6 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h6><ul><li>HttpSession接口来自于Servlet规范下一个接口。存在于Tomcat中servlet-api.jar，其实现类由Http服务器提供，Tomcat提供实现类存在于servlet-api.jar。</li><li>如果两个Servlet来自于同一个网站，并且为同一个浏览器/用户提供服务，此时 借助于HttpSession对象进行数据共享。</li><li>开发人员习惯于将HttpSession接口修饰对象称为【会话作用域对象】</li></ul><h6 id="HttpSession-与-Cookie-区别：【面试题】"><a href="#HttpSession-与-Cookie-区别：【面试题】" class="headerlink" title="HttpSession 与  Cookie 区别：【面试题】"></a>HttpSession 与  Cookie 区别：【面试题】</h6><ol><li>存储位置：<ul><li> Cookie：存放在客户端计算机（浏览器内存/硬盘）。</li><li>HttpSession：存放在服务端计算机内存。</li></ul></li><li>数据类型：<ul><li>Cookie对象存储共享数据类型只能是String。</li><li>HttpSession对象可以存储任意类型的共享数据Object。</li></ul></li><li>数据数量：<ul><li>一个Cookie对象只能存储一个共享数据。</li><li>HttpSession使用map集合存储共享数据，所以可以存储任意数量共享数据。</li></ul></li><li>参照物：<ul><li> Cookie相当于客户在服务端【会员卡】</li><li>HttpSession相当于客户在服务端【私人保险柜】</li></ul></li></ol><h6 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h6><ol><li><p>用户与HttpSession关联时使用的Cookie只能存放在浏览器缓存中，在浏览器关闭时，意味着用户与他的HttpSession关系被切断。</p></li><li><p>由于Tomcat无法检测浏览器何时关闭，因此在浏览器关闭时并不会导致Tomcat将浏览器关联的HttpSession进行销毁。<br> 为了解决这个问题，Tomcat为每一个HttpSession对象设置【空闲时间】这个空闲时间默认30分钟，如果当前HttpSession对象空闲时间达到30分钟，此时Tomcat认为用户已经放弃了自己的HttpSession，此时Tomcat就会销毁掉这个HttpSession。</p></li><li><p>HttpSession空闲时间手动设置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--当前网站/web/WEB-INF/web.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>minute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--当前网站中每一个session最大空闲时间minute分钟--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h6><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%253A%25E5%25B9%25B4%252011%253A%25E6%259C%2588%252015%253A%25E6%2597%25A5%252015%253A%25E6%2597%25B6%252049%253A%25E5%2588%2586Tomcate%25E6%2595%25B0%25E6%258D%25AE%25E5%2585%25B1%25E4%25BA%25AB%25E6%25B5%2581%25E7%25A8%258B%25E5%259B%25BE-HttpSession%25E5%25AE%259E%25E7%258E%25B0%25E5%258E%259F%25E7%2590%2586%25E5%259B%25BE.jpg" alt="Tomcate数据共享流程图-HttpSession实现原理图"></p><h6 id="命令实现-1"><a href="#命令实现-1" class="headerlink" title="命令实现"></a>命令实现</h6><p>例：同一个网站 OneServlet 与  TwoServlet 借助于Cookie实现数据共享</p><pre class="line-numbers language-java"><code class="language-java">OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.调用请求对象向Tomcat索要当前用户在服务端的私人储物柜</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.将数据添加到用户私人储物柜</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>共享数据<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 浏览器访问/myWeb中TwoServlet</span>TwoServlet<span class="token punctuation">{</span>                      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.调用请求对象向Tomcat索要当前用户在服务端的私人储物柜</span>    HttpSession   session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.从会话作用域对象得到OneServlet提供的共享数据</span>    Object 共享数据 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Http服务器将用户与HttpSession关联起来"><a href="#Http服务器将用户与HttpSession关联起来" class="headerlink" title="Http服务器将用户与HttpSession关联起来"></a>Http服务器将用户与HttpSession关联起来</h6><ol><li><p>getSession()<br> 如果当前用户在服务端已经拥有了自己的私人储物柜，要求tomcat将这个私人储物柜进行返回，如果当前用户在服务端尚未拥有自己的私人储物柜要求Tocmat为当前用户创建一个全新的私人储物柜。</p></li><li><p>getSession(false)<br> 如果当前用户在服务端已经拥有了自己的私人储物柜，要求tomcat将这个私人储物柜进行返回<br> 如果当前用户在服务端尚未拥有自己的私人储物柜，此时Tomcat将返回null。</p></li></ol><p><strong>总结</strong>：以上两种方法第一种更适合登陆成功使用，第二个则用户未登录成功使用。</p><h5 id="HttpServletRequest接口"><a href="#HttpServletRequest接口" class="headerlink" title="HttpServletRequest接口"></a>HttpServletRequest接口</h5><h6 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h6><ul><li><p>在同一个网站中，如果两个Servlet之间通过【请求转发】方式进行调用，彼此之间共享同一个请求协议包。而一个请求协议包只对应一个请求对象，因此servlet之间共享同一个请求对象，此时可以利用这个请求对象在两个Servlet之间实现数据共享。</p></li><li><p>在请求对象实现Servlet之间数据共享功能时，开发人员将请求对象称为【请求作用域对象】</p></li></ul><h6 id="命令实现-2"><a href="#命令实现-2" class="headerlink" title="命令实现"></a>命令实现</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// OneServlet通过请求转发申请调用TwoServlet时，需要给TwoServlet提供共享数据</span>OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.将数据添加到【请求作用域对象】中attribute属性</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据类型可以任意类型Object</span>        <span class="token comment" spellcheck="true">//2.向Tomcat申请使用请求转发方式调用TwoServlet</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/two"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>response<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>TwoServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从当前请求对象得到OneServlet写入到共享数据</span>        Object 数据 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ol><li>当请求转发时，只有请求对象有请求作用域对象，而响应对象是没有作用域对象的。</li><li>在多个请求转发时，一般只有最后一个Servletv才会将最后的结果发送给浏览器。</li></ol><h3 id="监听器接口"><a href="#监听器接口" class="headerlink" title="监听器接口"></a>监听器接口</h3><h4 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h4><ul><li>一组来自于Servlet规范下接口，共有8个接口。在Tomcat存在servlet-api.jar包。</li><li>监听器接口需要由开发人员亲自实现，Http服务器提供jar包并没有对应的实现类。</li><li>监听器接口用于监控【作用域对象生命周期变化时刻】以及【作用域对象共享数据变化时刻】。</li></ul><h4 id="作用域对象"><a href="#作用域对象" class="headerlink" title="作用域对象"></a>作用域对象</h4><ul><li><p>在Servlet规范中，认为在服务端内存中可以在某些条件下为两个Servlet之间提供数据共享方案的对象，被称为【作用域对象】。</p></li><li><p>Servlet规范下作用域对象:</p><ol><li>ServletContext：全局作用域对象</li><li>HttpSession：会话作用域对象</li><li>HttpServletRequest：请求作用域对象</li></ol></li></ul><h4 id="监听器接口实现类开发规范"><a href="#监听器接口实现类开发规范" class="headerlink" title="监听器接口实现类开发规范"></a>监听器接口实现类开发规范</h4><ol><li>根据监听的实际情况，选择对应监听器接口进行实现。</li><li>重写监听器接口声明【监听事件处理方法】。</li><li>在web.xml文件将监听器接口实现类注册到Http服务器。</li></ol><h4 id="监听器接口-全局作用域接口"><a href="#监听器接口-全局作用域接口" class="headerlink" title="监听器接口(全局作用域接口)"></a>监听器接口(全局作用域接口)</h4><h5 id="ServletContextListener接口"><a href="#ServletContextListener接口" class="headerlink" title="ServletContextListener接口"></a>ServletContextListener接口</h5><h6 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h6><ul><li>通过这个接口合法的检测全局作用域对象被初始化时刻以及被销毁时刻。</li></ul><h6 id="监听事件处理方法"><a href="#监听事件处理方法" class="headerlink" title="监听事件处理方法"></a>监听事件处理方法</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> contextInitialized（） <span class="token comment" spellcheck="true">// 在全局作用域对象被Http服务器初始化被调用</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 在全局作用域对象被Http服务器销毁时候触发调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="ServletContextAttributeListener接口"><a href="#ServletContextAttributeListener接口" class="headerlink" title="ServletContextAttributeListener接口"></a>ServletContextAttributeListener接口</h5><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><ul><li>通过这个接口合法的检测全局作用域对象共享数据变化时刻。</li></ul><h6 id="监听事件处理方法-1"><a href="#监听事件处理方法-1" class="headerlink" title="监听事件处理方法"></a>监听事件处理方法</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 在全局作用域对象添加共享数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 在全局作用域对象更新共享数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 在全局作用域对象删除共享数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="全局作用域对象共享数据变化时刻"><a href="#全局作用域对象共享数据变化时刻" class="headerlink" title="全局作用域对象共享数据变化时刻"></a>全局作用域对象共享数据变化时刻</h6><pre class="line-numbers language-java"><code class="language-java">ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取全局作用域对象</span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新增共享数据</span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新共享数据                 </span>application<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//删除共享数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤器接口-Filter"><a href="#过滤器接口-Filter" class="headerlink" title="过滤器接口(Filter)"></a>过滤器接口(Filter)</h3><h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><ul><li>来自于Servlet规范下接口，在Tomcat中存在于servlet-api.jar包。</li><li>Filter接口实现类由开发人员负责提供，Http服务器不负责提供。</li><li>Filter接口在Http服务器调用资源文件之前，对Http服务器进行拦截。</li></ul><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ol><li>拦截Http服务器，帮助Http服务器检测当前请求合法性。</li><li>拦截Http服务器，对当前请求进行增强操作。</li></ol><h4 id="Filter接口实现类开发步骤"><a href="#Filter接口实现类开发步骤" class="headerlink" title="Filter接口实现类开发步骤"></a>Filter接口实现类开发步骤</h4><ol><li>创建一个Java类实现Filter接口。</li><li>重写Filter接口中doFilter方法。</li><li>web.xml将过滤器接口实现类注册到Http服务器。</li></ol><h4 id="Filter拦截地址格式"><a href="#Filter拦截地址格式" class="headerlink" title="Filter拦截地址格式"></a>Filter拦截地址格式</h4><h5 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--1.将过滤器移交给Tomcat--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>filterName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>filter类文件地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.调用何种资源文件时，需要被当前过滤器拦截--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>filterName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--调用这个资源文件时，过滤器进行拦截--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>将要拦截的资源文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="拦截的资源文件格式"><a href="#拦截的资源文件格式" class="headerlink" title="拦截的资源文件格式"></a>拦截的资源文件格式</h5><ul><li>在调用何种资源文件之前需要调用Filter过滤器进行拦截。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用某一个具体文件之前，来调用Filter拦截--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/imgs/photo.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用某一个文件夹下所有的资源文件之前，来调用Filter拦截--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/img/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用任意文件夹下某种类型文件之前，来调用Filter拦截--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用网站中任意文件时，来调用Filter拦截--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习笔记(01)</title>
      <link href="/posts/27437e40.html"/>
      <url>/posts/27437e40.html</url>
      
        <content type="html"><![CDATA[<h2 id="初始JDBC"><a href="#初始JDBC" class="headerlink" title="初始JDBC"></a>初始JDBC</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>Java DataBase Connectivity ：Java数据库连接，Java语言操作数据库。官方定义一套操作所有关系型数据库的规则，即接口，各数据库厂商去实现这套接口，提供数据库驱动jar包，可以使用接口编程，真正执行的代码时驱动jar包中的实现类。</p><h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><p>这里演示idea导入jar包：快捷键shift+alt+ctrl+s打开项目结构进行导入：</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/JDBCDemo%E2%80%94%E2%80%9401.png" alt="1"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/JDBCDemo%E2%80%94%E2%80%9402.png" alt="2"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/JDBCDemo%E2%80%94%E2%80%9403.png" alt="3"></p><h2 id="JDBC基本使用："><a href="#JDBC基本使用：" class="headerlink" title="JDBC基本使用："></a>JDBC基本使用：</h2><h3 id="DriverManager-驱动管理对象"><a href="#DriverManager-驱动管理对象" class="headerlink" title="DriverManager(驱动管理对象)"></a>DriverManager(驱动管理对象)</h3><p>驱动管理对象：告诉程序该使用哪一个品牌的数据库。(注册驱动)</p><ul><li>数据库连接</li></ul><pre class="line-numbers language-java"><code class="language-java">url<span class="token operator">:</span>指定连接的路径               #语法：jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ip地址（域名）<span class="token operator">:</span>端口号<span class="token operator">/</span>数据库名称               #例子：jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>tb_student               注意：如果连接的是本机mysql服务器，并且端口为<span class="token number">3306</span>，则url简写为：jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>数据库名称       user<span class="token operator">:</span>用户名       password：密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Connection-数据库连接对象"><a href="#Connection-数据库连接对象" class="headerlink" title="Connection(数据库连接对象)"></a>Connection(数据库连接对象)</h3><p>数据库连接对象：用于将数据连接上之后使用的对象。</p><h3 id="Statement-执行sql的对象"><a href="#Statement-执行sql的对象" class="headerlink" title="Statement(执行sql的对象)"></a>Statement(执行sql的对象)</h3><p>执行sql的对象</p><ul><li>boolean execute(String sql) #执行给定的 SQL 语句，该语句可能返回多个结果<br>  可以执行任意的sql，了解即可</li><li>int executeUpdate(String sql)<br>  执行DML（insert ，update ， delete）语句、DDL（create，alter，drop）语句<br>  返回值：影响的行数，通过影响的行数判断DML语句是否执行成功，返回值&gt;0，执行成功，反之失败。</li><li>ResultSet executeQuery(String sql)<br>  执行DQL(select) 语句</li></ul><h3 id="PreparedStatement-执行sql的对象"><a href="#PreparedStatement-执行sql的对象" class="headerlink" title="PreparedStatement(执行sql的对象)"></a>PreparedStatement(执行sql的对象)</h3><p>执行sql的对象（是 Statement的子接口）：此对象是先编译sql后执行sql语句的对象</p><h4 id="SQL注入问题："><a href="#SQL注入问题：" class="headerlink" title="SQL注入问题："></a>SQL注入问题：</h4><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<br>  a:输入用户随便，输入密码：a’ or ‘a’ = ‘a，最后sql编译时候会变成以下sql语句，从而使sql曲解了sql语句的原意。</p><pre class="line-numbers language-mysql"><code class="language-mysql"> select * from user where username = ‘admin’ and password = 'a' or 'a' = 'a'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解决SQL注入问题："><a href="#解决SQL注入问题：" class="headerlink" title="解决SQL注入问题："></a>解决SQL注入问题：</h4><p>使用PrepareStatement对象可以解决sql注入问题，PrepareStatement特点先编译sql语句后执行sql语句，也就是说无论用户输入什么字符都不会参与到sql执行中，从而达到无法sql注入现象。</p><h4 id="使用PreparedStatement对象"><a href="#使用PreparedStatement对象" class="headerlink" title="使用PreparedStatement对象"></a>使用PreparedStatement对象</h4><p>参数可以使用 ? 作为占位符，从而让sql语句先编译，然后，在调用setInt或其他数据类型(调用什么数据类型的方法取决于sql数据中是什么数据类型)</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"update tb_student set sname = ? where cno=101"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为sname在sql中式varchar数据类型所以不可设置其他数据类型方法</span>preparedStatement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResultSet-结果集对象"><a href="#ResultSet-结果集对象" class="headerlink" title="ResultSet(结果集对象)"></a>ResultSet(结果集对象)</h3><p>返回结果集对象</p><ul><li><p>Boolean next()：游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果有数据则返回true，如果没有数据则返回false。       </p></li><li><p>getXXX(参数)：代表数据类型</p><ul><li><p>XXX：表是数据类型（若获取int的则为getInt()，如果是String则是getString，其余的与之类似）</p></li><li><p>参数1：可以按照sql查询出来的列查询(不推荐)</p><pre class="line-numbers language-java"><code class="language-java">sql语句<span class="token operator">:</span> sql语句<span class="token punctuation">(</span>select cno<span class="token punctuation">,</span>cname from tb_student<span class="token punctuation">)</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cno</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>参数2：可以按照sql语句名称(别名)查询(推荐)</p><pre class="line-numbers language-java"><code class="language-java">sql语句<span class="token operator">:</span> sql语句<span class="token punctuation">(</span>select cno<span class="token punctuation">,</span>cname from tb_student<span class="token punctuation">)</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"cno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cno</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"cname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>结果集执行顺序：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果有数据，则取数据</span>    <span class="token comment" spellcheck="true">// 以下程序是以列行数获取，注：起始列：1</span>    <span class="token comment" spellcheck="true">/*String cno = rs.getString(1);    String cname = rs.getString(2);    System.out.println(cno + "," + cname);*/</span>    <span class="token comment" spellcheck="true">// 以下程序不是以下标获取以列的名字获取，注：如果select中有别名则以别名获取，没有则以字段名获取</span>    String cno <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"cno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String cname <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"cname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cno <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> cname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>遍历结果集执行顺序</strong>：</p><ol><li>游标向下移动一行，</li><li>判断是否有数据</li><li>如果有数据返回true，获取数据</li><li>如果无数据返回false，循环结束</li></ol></li></ul></li></ul><h3 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h3><p>JDBC中默认默认是自动提交事务。如果需要手动提交事务需要修改。</p><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">void</span> <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将此连接的自动提交模式设置为给定状态。</span> <span class="token comment" spellcheck="true">// 调用该方法，设置参数为false，即开启事务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使所有上一次提交/回滚后进行的更改成为持久更改，并释放此Connection对象当前持有的所有数据库锁。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 取消在当前事务中进行的所有更改，并释放此Connection对象当前持有的所有数据库锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理(01)</title>
      <link href="/posts/8f7372e9.html"/>
      <url>/posts/8f7372e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>代理，在我们日常生活之中就有体现，代购，中介，换IP，商家等等，比如有一家美国的大学，可以对全世界招生留学中介(代理 )</p><p>留学中介(代理)：帮助这家美国的学校招生，中介是学校的代理中介是代替学校完成招生功能。</p><h3 id="代理特点："><a href="#代理特点：" class="headerlink" title="代理特点："></a>代理特点：</h3><ol><li>中介和代理他们要做的事情是一致的：招生。</li><li>中介是学校代理，学校是目标。</li><li>家长——–&gt;中介(学校介绍，办理入学手续)——–&gt;美国学校。</li><li>中介是代理，收取费用。</li></ol><h3 id="为什么要找中介？"><a href="#为什么要找中介？" class="headerlink" title="为什么要找中介？"></a>为什么要找中介？</h3><ol><li>中介是专业的，方便。</li><li>家长现在不能自己去找学校，家长没有能力访问学校或美国学校不接收个人来访。</li><li>买东西都是商家卖，商家是某个商品的代理，你个人买东西，肯定不会让你接触到厂家的。</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2020%3A%E6%97%B6%2038%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt="动态代理结构图"></p><h2 id="代理模式作用"><a href="#代理模式作用" class="headerlink" title="代理模式作用"></a>代理模式作用</h2><ol><li>功能增强：在你原有的功能上，增加了额外的功能：新增加的功能，叫做功能增强。</li><li>控制访问：代理类不让你访问目标，例如商家不让用户访问厂家。</li></ol><h2 id="实现代理方式"><a href="#实现代理方式" class="headerlink" title="实现代理方式"></a>实现代理方式</h2><ol><li>静态代理：手动增加代理类，在原有代理类基础上增加功能。</li><li>动态代理：使用JDK反射实现动态添加代理的方法。</li></ol><h2 id="静态代理-1"><a href="#静态代理-1" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>模拟一个用户购买U盘的行为。</p><ul><li>用户：消费者、只能从商家购买商品。</li><li>商家：代理类、代理U盘品牌的商品。</li><li>厂家：目标类。</li><li>三者之间的关系：用户(客户端)—&gt;商家(代理)—&gt;厂家(目标)。</li><li>总结：商家和厂家都是卖某品牌的U盘，他们完成的功能是一致的。</li></ul><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>创建一个接口，定义卖U盘的方法，表示你的厂家和商家做的事情。</li><li>创建厂家类，实现一步骤的接口。</li><li>创建商家，就是代理，也需要实现一步骤中的接口。</li><li>创建客户端类，调用商家的方法买一个U盘。</li></ol><h3 id="静态代理创建"><a href="#静态代理创建" class="headerlink" title="静态代理创建"></a>静态代理创建</h3><h4 id="Package结构："><a href="#Package结构：" class="headerlink" title="Package结构："></a>Package结构：</h4><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2021%3A%E6%97%B6%2015%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86package%E7%BB%93%E6%9E%84.jpg" alt="动态代理package结构"></p><h4 id="实现类："><a href="#实现类：" class="headerlink" title="实现类："></a>实现类：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 购买U盘的方法     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbKingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 厂家的购买方法     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> amount <span class="token operator">*</span> <span class="token number">80.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 商家类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">pinxixi</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UsbKingFactory usbKingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向厂家发送订单，告诉厂家，我订购了U盘，让厂家发货，并返回报价</span>        <span class="token keyword">float</span> floorPrice <span class="token operator">=</span> usbKingFactory<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在厂家底价的基础上，没件加25元利润</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> amount <span class="token operator">*</span> <span class="token number">25.0f</span> <span class="token operator">+</span> floorPrice<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在调用sell()方法后，增强的功能</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼兮兮给您返回优惠券或红包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 消费者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">shopMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pinxixi pinxixi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pinxixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> pinxixi<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼兮兮U盘的价格是："</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>优点：<ol><li>实现简单。</li></ol></li><li>缺点：当你的项目，目标类(厂家类)有很多时候，代理类(商家类)也会随之增多。<ol><li>目标类增多、代理类也会随之增多。</li><li>接口中方法修规、增加后，众多的目标类和代理类都需要修改。</li></ol></li></ul><h2 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>使用JDK的反射机制，创建对象的能力，创建的是代理类的的对象，而不用手动创建类文件更不用手动写具体的Java文件，且在程序执行时，调用JDK提供的方法自动创建代理类的对象。换句话说：动态代理是一种创建Java象的能力，让你不用创建代理类(商家类)就能创建代理类对象，除去了中间商。</p><h3 id="静态代理和动态代理对比"><a href="#静态代理和动态代理对比" class="headerlink" title="静态代理和动态代理对比"></a>静态代理和动态代理对比</h3><ul><li>动态代理可以实现低耦合、高内聚，可以在修改、增加接口方法时，不会影响代理类对象。</li><li>代理类数量可以很少，不用创建很多的代理方法。</li></ul><h3 id="动态代理介绍"><a href="#动态代理介绍" class="headerlink" title="动态代理介绍"></a>动态代理介绍</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2021%3A%E6%97%B6%2033%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BB%8B%E7%BB%8D.png" alt="动态代理介绍"></p><ol><li>动态代理是指代理类对象在程序运行时由JVM根据反射机制动态生成的，不需要定义代理类的java源文件。</li><li>动态代理其实就是JDK运行期间动态创建Class字节码并加载到JVM。</li></ol><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="JDK动态代理-理解"><a href="#JDK动态代理-理解" class="headerlink" title="JDK动态代理(理解)"></a>JDK动态代理(理解)</h4><ul><li>使用Java反射包(java.lang.reflect)中的反射包中类和接口实现动态代理的功能，会使用到以下三个类/接口：InvocationHandler、Method、Proxy。</li></ul><h4 id="CGLlB动态代理-了解"><a href="#CGLlB动态代理-了解" class="headerlink" title="CGLlB动态代理(了解)"></a>CGLlB动态代理(了解)</h4><ul><li>CGLlB原理是继承，CGLlB通过继承目标类，创建它的子类，在子类中重写父类中同名的方法，实现功能的修改。因为CGLlB使用的是继承、重写方法，所以要求目标类何方法均不能使用final。CGLlB的要求目标类比较宽松，只要能继承就可以了。CGLlB在很多的框架中使用，比如Mybatis，Spring框架中都有使用。</li><li>InvocationHandler(调用处理器接口)：<ul><li>方法：invoke()抽象方法、需要实现。</li><li>说明：代理对象要执行的功能代码，即代理类要完成的功能就写在invoke()方法中。</li></ul></li><li>Method(类)：表示目标类中所要调用的方法，通过Method可以执行某个目标类中的方法、 JDK会自动提供目标类方法，无需手动指定。<ul><li>方法：invoke(目标类对象，方法的参数)</li><li>说明：<strong>目标类对象：</strong>执行某个目标类中的方法、<strong>方法的参数：</strong>调用目标类方法的参数。</li><li>例如：Object obj = method.invoke(service,”参数”);</li><li>注意：Method.invok()与InvocationHandler接口中invoke()方法是两个方法，只不过是重名，不是一个方法。</li></ul></li><li>Proxy(类)：核心对象，创建代理对象。之前创建对象都是new类的构造方法()，现在可以使用Proxy类的方法，代理new使用。<ul><li>方法(静态方法)：public static Object newProxyInstance(Classloader loader , Class&lt;?&gt;[] interfaces , InvocationHandler h);</li><li>说明：创建代理对象，等同于静态代理中的new UsbKingFactory();</li><li>参数说明：<ol><li><strong>Classloader loader：</strong>a.getCalss().getClassLoader()、目标对象类加载器，负责向内存中加载对象(使用反射获取对象)</li><li><strong>Class&lt;?&gt;[] interfaces：</strong>目标对象实现的接口，也是通过反射要获取的。</li><li><strong>InvocationHandler h：</strong>代理类要完成的功能。</li><li><strong>返回值：</strong>目标类的代理对象。</li></ol></li></ul></li></ul><h3 id="JDK动态代理创建"><a href="#JDK动态代理创建" class="headerlink" title="JDK动态代理创建"></a>JDK动态代理创建</h3><h4 id="目标类实现功能："><a href="#目标类实现功能：" class="headerlink" title="目标类实现功能："></a>目标类实现功能：</h4><ol><li>实现业务逻辑的功能。</li></ol><h4 id="代理类实现功能："><a href="#代理类实现功能：" class="headerlink" title="代理类实现功能："></a>代理类实现功能：</h4><ol><li>调用目标类方法并执行目标方法所有功能。</li><li>基于目标类方法功能调用时，增加功能。</li></ol><h4 id="创建步骤："><a href="#创建步骤：" class="headerlink" title="创建步骤："></a>创建步骤：</h4><ol><li>创建接口，定义目标类要完成的功能。</li><li>床架目标类实现接口。</li><li>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能。<ol><li>调用目标方法。</li><li>增强功能。</li></ol></li><li>使用Proxy；类的静态方法，创建代理对象，并将返回值转为接口类型。</li></ol><p>Package结构：</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2023%3A%E6%97%B6%2020%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8C%85%E7%BB%93%E6%9E%84.jpg" alt="动态代理包结构"></p><h4 id="实现类：-1"><a href="#实现类：-1" class="headerlink" title="实现类："></a>实现类：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 购买U盘的方法     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbKingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 厂家的购买方法（目标类）     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标类中，执行sell目标方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price <span class="token operator">=</span>  amount <span class="token operator">*</span> <span class="token number">80.0f</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态代理类</span><span class="token comment" spellcheck="true">// 必须实现InvocationHandler接口，完成代理类要做的功能</span><span class="token comment" spellcheck="true">// 1.调用目标类中的方法</span><span class="token comment" spellcheck="true">// 2.功能增强啊</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysellHander</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        动态代理：目标代理是活动的，不是固定的，需要传进来，穿的是什么就是给谁创建代理。    */</span>    <span class="token keyword">private</span> Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MysellHander</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 给目标对象赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// == float price = amount * 25.0f + floorPrice;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向厂家发送订单，告诉厂家，我订购了U盘，让厂家发货，并返回报价</span>        Object res  <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行目标类方法</span>        res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// == float floorPrice = usbKingFactory.sell(amount);</span>        <span class="token comment" spellcheck="true">// 在厂家底价的基础上，没件加25元利润</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Float price <span class="token operator">=</span> <span class="token punctuation">(</span>Float<span class="token punctuation">)</span> res<span class="token punctuation">;</span>            price <span class="token operator">=</span> <span class="token number">25.0f</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> price<span class="token punctuation">;</span>            res <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在调用sell()方法后，增强的功能</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼兮兮给您返回优惠券或红包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加后的价格</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">shopMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建目标对象</span>        UsbSell factory <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.创建InvocationHandler对象</span>        MysellHander handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysellHander</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.创建代理对象</span>        UsbSell proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UsbSell<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.通过代理执行方法</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>动态代理，必须要有接口出现，如果没有，可以使用CGLlB实现。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记(01)</title>
      <link href="/posts/874fa88f.html"/>
      <url>/posts/874fa88f.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h1><h2 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h2><table><thead><tr><th align="center">DB</th><th align="center">DBMS</th><th align="center">SQL</th></tr></thead><tbody><tr><td align="center">DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）</td><td align="center">DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer…）</td><td align="center">结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。<br>        SQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。<br>        SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）</td></tr></tbody></table><ul><li>DB：数据库</li><li>DBMS：数据库管理系统：DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。</li><li>SQL：数据库执行语句</li></ul><p>执行过程：SQL(语句) -(输入)-&gt;  DBMS-(执行SQL语句)-&gt; DB(通过SQL语句管理数据库)</p><h2 id="语句构成"><a href="#语句构成" class="headerlink" title="语句构成"></a>语句构成</h2><table><thead><tr><th align="center">DQL（数据查询语言）</th><th align="center">DML（数据操作语言）</th><th align="center">DDL（数据定义语言）</th><th align="center">TCL（事务控制语言）</th><th align="center">DCL（数据控制语言）</th></tr></thead><tbody><tr><td align="center">查询语句，凡是select语句都是DQL。</td><td align="center">insert、delete、update，对表当中的数据进行增删改。</td><td align="center">create、drop、alter，对表结构的增删改。</td><td align="center">commit提交事务，rollback回滚事务。(TCL中的T是Transaction)</td><td align="center">grant授权、revoke撤销权限等。</td></tr></tbody></table><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.jpg" alt="SQL执行顺序"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote><p>增删改查有一个术语：CRUD操作</p><p>分别代表：Create（增） Retrieve（检索） Update（修改） Delete（删除）</p><p>数据库默认端口号：3306</p></blockquote><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><ol><li>表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。</li><li>行和列：<ul><li>行：被称为数据/记录(data)</li><li>列：被称为字段(column)</li></ul></li><li>字段包括属性：<ul><li>字段名</li><li>数据类型</li><li>相关的约束</li></ul></li></ol><h1 id="创建、修改、复制、删除表"><a href="#创建、修改、复制、删除表" class="headerlink" title="创建、修改、复制、删除表"></a>创建、修改、复制、删除表</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE 表名 (     属性名 数据类型 [完整性约束条件],    属性名 数据类型 [完整性约束条件],    ...    属性名 数据类型 [完整性约束条件]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">整数型(Java中的int)</td></tr><tr><td align="center">bigint</td><td align="center">长整型(Java中的long)</td></tr><tr><td align="center">float</td><td align="center">浮点型(Java中的float double)</td></tr><tr><td align="center">char</td><td align="center">定长字符串(String)</td></tr><tr><td align="center">varchar</td><td align="center">可变长字符串(Java中的StringBuffer/StringBuilder)</td></tr><tr><td align="center">date</td><td align="center">日期类型(对应Java中的Java.,sql.Date类型)</td></tr><tr><td align="center">blob</td><td align="center">二进制大对象(存储图片、视频等流媒体信息) Binary Large OBject(对应java中的 Object)</td></tr><tr><td align="center">clob</td><td align="center">字符大对象(存储较大的文本，比如，可以存储4G的字符串) Character Large OBject(对应java中的 Object)</td></tr><tr><td align="center">…</td><td align="center"></td></tr></tbody></table><blockquote><p>char与varchar的区别：</p><p>在实际开发中，当某个字串中的数据长度不发生改变的时候，是定长的，例：性别、生日都是采用char，当一个字段数据长度不确定，例如：简介、姓名都是采用varchar。</p></blockquote><p><strong>注意</strong>：像BLOB与CLOB这种数据类型是不可以在吗MySQL中直接输入的，需要使用Java中的IO流。</p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><blockquote><p>列级约束：</p><p>列级约束：当前字段添加的某个约束。</p><p>表级约束：    </p><p>表级约束：多个字段联合起来添加某个约束。</p></blockquote><h4 id="关键字-1"><a href="#关键字-1" class="headerlink" title="关键字"></a>关键字</h4><table><thead><tr><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">primary key</td><td align="center">主键</td></tr><tr><td align="center">foreign key</td><td align="center">外键</td></tr><tr><td align="center">not null</td><td align="center">非空约束</td></tr><tr><td align="center">unique</td><td align="center">唯一索引</td></tr><tr><td align="center">auto_increment</td><td align="center">自增增加</td></tr><tr><td align="center">default</td><td align="center">默认值(主键自增与默认值互斥)</td></tr><tr><td align="center">unsigned</td><td align="center">无符号</td></tr><tr><td align="center">check</td><td align="center">检查约束：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</td></tr></tbody></table><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><h5 id="主键作用："><a href="#主键作用：" class="headerlink" title="主键作用："></a>主键作用：</h5><ul><li>表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键。</li><li>主键的作用：主键值是这行记录在这张表当中的唯一标识。(就像一个人的身份证号一样)。</li></ul><h5 id="主键相关术语："><a href="#主键相关术语：" class="headerlink" title="主键相关术语："></a>主键相关术语：</h5><ul><li>主键约束：primary key</li><li>主键字段：id字段添加primary key之后，id叫做主键字段</li><li>id字段中的每一个值都是主键值</li></ul><h6 id="主键字段数量划分："><a href="#主键字段数量划分：" class="headerlink" title="主键字段数量划分："></a>主键字段数量划分：</h6><ul><li>单一主键(常用，推荐) 又名：列级约束</li><li>复合主键(多个字段联合起来添加一个主键约束) 又名：表级约束。<br>  注：复合主键不建议使用，因为复合主键违背三范式。</li></ul><h6 id="主键性质划分："><a href="#主键性质划分：" class="headerlink" title="主键性质划分："></a>主键性质划分：</h6><ul><li>自然主键：在主键字段中不和系统的业务挂钩，称为自然主键。</li><li>业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键,拿着身份证号码作为主键。(不推荐用)注：<strong>最好不要拿着和业务挂钩的字段作为主键</strong>，因为以后的业务一旦发生改变的时候，主键值可能也需要随着发生改变，但有的时候没办法发生变化。</li></ul><p><strong>注意</strong>：一张表的主键约束只能有一个。</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><h5 id="主键作用：-1"><a href="#主键作用：-1" class="headerlink" title="主键作用："></a>主键作用：</h5><ul><li>外键约束用于保证在一张表中某个字段数据与另一张表中的数据的一致性。</li></ul><h5 id="主键相关术语：-1"><a href="#主键相关术语：-1" class="headerlink" title="主键相关术语："></a>主键相关术语：</h5><ul><li>外键约束：foreign key</li><li>外键字段：添加有外键约束的字段</li><li>外键值：外键字段中的每一个值。</li></ul><h5 id="顺序要求："><a href="#顺序要求：" class="headerlink" title="顺序要求："></a>顺序要求：</h5><ul><li><p>创建表时，先创建父表，在创建子表。</p></li><li><p>删除表时，先删除子表，在删除父表。</p></li><li><p>删除数据时，先删除子表，在删除父表。</p></li><li><p>添加数据时，先添加父表，在添加子表。</p></li></ul><p><strong>注意</strong>：子表绑定父表中的字段最低要求必须是：绑定的父表中的字段可以不是主键但是至少是父表中的唯一标识。</p><h5 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h5><pre class="line-numbers language-mysql"><code class="language-mysql">业务背景：请设计数据库表,用来维护学生和班级的信息?第一种方案: 一张表存储所有数据no(pk)    name    classno        classname----------------------------------------------1       zs1      101        衡水一中高中一班2       zs2      102        衡水一中高中一班3       zs3      103        衡水一中高中一班4       zs4      104        衡水一中高中二班5       zs5      105        衡水一中高中二班以上表存在缺点：冗余。第二种方案: 两张表(班级表和学生表)-- 班级表create table tb_class (     cno int primary key auto_increment,     cname varchar(255)     );-- 学生表create table tb_student (     sno int primary key auto_increment,     sname varchar(25),     cno int,     foreign key(cno) references tb_class(cno)           -- 绑定班级表中cno字段     );-- 两表查询结果select s.sname'学生姓名',c.cname'班级' from tb_student s join tb_class c on s.cno = c.cno;+--------------+--------------+| 学生姓名     | 班级         |+--------------+--------------+| 张三         | 高中一班     || 李四         | 高中二班     |+--------------+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入表数据"><a href="#插入表数据" class="headerlink" title="插入表数据"></a>插入表数据</h2><h3 id="语法1："><a href="#语法1：" class="headerlink" title="语法1："></a>语法1：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">insert into 表名 values(值1,值2,值3,....);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：字段可以省略不写，但是后面插入的内容顺序都要与表的顺序与数量一致。</p><h3 id="语法2："><a href="#语法2：" class="headerlink" title="语法2："></a>语法2：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">insert into 表名(字段名1,字段名2,字段名3,....) values (值1,值2,值3,....),                                                       (值1,值2,值3,....);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：字段的数量和值的数量相同，并且数据类型要对应相同。</p><h2 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h2><h3 id="语法1：-1"><a href="#语法1：-1" class="headerlink" title="语法1："></a>语法1：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">delete from 表名 where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：没有条件则整张表的内容全部更新。</p><h3 id="语法2：-1"><a href="#语法2：-1" class="headerlink" title="语法2："></a>语法2：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">truncate table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：此语句是针对数据库中数据量较大时使用且<strong>表被截断不可回滚，永久丢失！！！</strong></p><h2 id="修改表数据"><a href="#修改表数据" class="headerlink" title="修改表数据"></a>修改表数据</h2><h3 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">update 表名 set 字段名1=值1,字段名2=值2... where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：没有条件则整张表的内容全部更新。</p><h2 id="复制表数据"><a href="#复制表数据" class="headerlink" title="复制表数据"></a>复制表数据</h2><h3 id="语法1：-2"><a href="#语法1：-2" class="headerlink" title="语法1："></a>语法1：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">create table 表名 as select 查询语句;    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：将查询结果当做表结构创建出来。</p><h3 id="语法2：-2"><a href="#语法2：-2" class="headerlink" title="语法2："></a>语法2：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">insert into 插入表名 select 查询语句;-- 将查询结果插入到表中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：插入表明必须与查询表中的字段一致。</p><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><h3 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">drop table if exists 表名;        -- 如果表存在则删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h1><h2 id="关键字-2"><a href="#关键字-2" class="headerlink" title="关键字"></a>关键字</h2><table><thead><tr><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">!=或&lt;&gt;</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">between … and …</td><td align="center">两值之间，等同于 &gt;= and &lt;= (闭区间)</td></tr><tr><td align="center">is null</td><td align="center">为null(is not null 不为空)</td></tr><tr><td align="center">and</td><td align="center">并且</td></tr><tr><td align="center">or</td><td align="center">或者</td></tr><tr><td align="center">in(条件1,条件2…)</td><td align="center">包含，相当于多个or(not in不在这个范围中)</td></tr><tr><td align="center">not</td><td align="center">not可以取非，主要用在is或in中</td></tr><tr><td align="center">like</td><td align="center">like称为模糊查询，支持%(百分号)_(下划线)匹配</td></tr><tr><td align="center">\</td><td align="center">转义符(将后面字符转换为任意字符)</td></tr></tbody></table><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="语法：-3"><a href="#语法：-3" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1 , 字段名2 from 表名 where 查询条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：</p><ol><li><p>函数不能在where中使用，因为函数是在where之后执行的。</p><pre><code>     2. 当一条语句中有 group by 的话, select 后面只能跟分组函数和参与分组的字段。</code></pre></li></ol><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="语法：-4"><a href="#语法：-4" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1 ‘别名’, 字段名2 ‘别名’ from 表名 where 字段名 like 查询条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">_t%</td><td align="center">查询第二个为t的数据</td></tr><tr><td align="center">_/%</td><td align="center">查询第二个为/的数据(其中”/“为转义符)</td></tr><tr><td align="center">%</td><td align="center">任意位置</td></tr></tbody></table><h2 id="分组查询-函数"><a href="#分组查询-函数" class="headerlink" title="分组查询/函数"></a>分组查询/函数</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ount()</td><td align="center">计数</td></tr><tr><td align="center">sum()</td><td align="center">求和</td></tr><tr><td align="center">avg()</td><td align="center">平均值</td></tr><tr><td align="center">max()</td><td align="center">最大值</td></tr><tr><td align="center">min()</td><td align="center">最小值</td></tr><tr><td align="center">rand()</td><td align="center">可以在0和1之间产生一个随机数</td></tr></tbody></table><p><strong>注意</strong>：</p><ol><li>以上函数会自动忽略null值。</li><li>SQL语法规定：任何数值与null运算均为null！</li><li>以上函数不能不出现在where关键字条件中。</li></ol><p>count(*)/count(字段名)区别：</p><ol><li>count(*)：<strong>不是</strong>统计某个字段中的个数，而是统计总记录数。</li><li>count(字段名)：表示统计此字段非null的总数量。</li></ol><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><h4 id="语法：-5"><a href="#语法：-5" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">select 函数(字段名),字段名...  from 表名 group by 字段名 having 过滤条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>group by：将要以什么字段分组。</li><li>having：过滤使用分组查询出来的数据(可以使用where过滤实现尽量不要使用having过滤数据，性能较差)。</li></ol><h2 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h2><h3 id="语法：-6"><a href="#语法：-6" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 默认不写为升序select 字段名1 , 字段名2 from 表名 order by 字段名;-- 升序select 字段名1 , 字段名2 from 表名 order by 字段名 asc;  -- 降序select 字段名1 , 字段名2 from 表名 order by 字段名 desc; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键字-3"><a href="#关键字-3" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">asc</td><td align="center">升序</td></tr><tr><td align="center">desc</td><td align="center">降序</td></tr></tbody></table><h2 id="其他关键字"><a href="#其他关键字" class="headerlink" title="其他关键字"></a>其他关键字</h2><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>distinct：关键字去除重复记录</p><h4 id="语法1：-3"><a href="#语法1：-3" class="headerlink" title="语法1："></a>语法1：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">select distinct 字段名 from 表名;-- distinct关键字可以放在函数里面select avg(distinct 字段名) from 表名;-- 以上表示对字段名去重然后在求平均数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-null-字段名-数值"><a href="#if-null-字段名-数值" class="headerlink" title="if null(字段名 , 数值)"></a>if null(字段名 , 数值)</h3><p>if null(字段名 , 数值)：判断该字段是否为空，若为空代替为什么数值。</p><h4 id="语法：-7"><a href="#语法：-7" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">select sum(if null(字段名1,0),字段名2) from 表名;-- 如果此字段为空则将此字段看作零，然后在与字段名2求和运算<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>union：可以合并结果集。</p><h4 id="语法：-8"><a href="#语法：-8" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1 from 表名 from 表名 union select 字段名2 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：合并结果集的时候，但需要查询字段对应个数相同。</p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>limit ：主要用于提取前几条或者中间某几行数据 。</p><h4 id="语法：-9"><a href="#语法：-9" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">-- 以下两种语法显示结果相同select 字符名 from 表名 limit 5;select 字符名 from 表名 limit 0,5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果，一般一个业务都会对应多张表，比如：学生和班级，起码两张表。</p><h2 id="SQL语法："><a href="#SQL语法：" class="headerlink" title="SQL语法："></a>SQL语法：</h2><h3 id="SQL92："><a href="#SQL92：" class="headerlink" title="SQL92："></a>SQL92：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1,字段名2... from 表1 , 表2  where 筛表条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>优点：</p><ol><li>条件和表链接写在一处方便简介；</li><li>多表链接操作简单易行</li></ol></li><li><p>缺点：</p><ol><li>条件和链接混合，易读性交叉</li><li>链接条件支持有限，不支持左连接右连接等高级操作</li></ol></li></ul><h3 id="SQL99-常用-："><a href="#SQL99-常用-：" class="headerlink" title="SQL99(常用)："></a>SQL99(常用)：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1,字段名2 from 表1 join 表2 on 筛表条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>优点：</p><ol><li>功能强大，左右链接外链接等强力支持。</li><li>条件链接分开，易读性好。</li></ol></li><li><p>缺点：</p><ol><li>多表链接时需要仔细选择表顺序和链接条件。</li><li>链接语句很长，书写麻烦。</li></ol></li></ul><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><h3 id="语法：-10"><a href="#语法：-10" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1,字段名2 from 表1 '别名1' join 表2 '别名2' on 筛表条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>执行效率高，在mysql查询时直接去找指定表中的字段不用挨个去寻找。</li><li>可读性好。</li></ol><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><h3 id="笛卡尔乘积现象"><a href="#笛卡尔乘积现象" class="headerlink" title="笛卡尔乘积现象"></a>笛卡尔乘积现象</h3><p>笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积，这一种现象被称为：笛卡尔积现象。（笛卡尔乘积现象）</p><p><strong>注意</strong>：如果避免了笛卡尔积现象，并不会减少记录的匹配次数，匹配次数还是原来匹配次数，只不过显示的是有效记录。</p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p><strong>特点</strong>：条件是等量关系。</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 找出员工与之对应的部门名称并显示与之对应的员工姓名、部门名称select e.员工姓名,m.部门名称 from 员工信息表 e , 部门表 m where e.部门编号 = m.部门编号;+---------------------+--------------+| 员工姓名            | 部门名称     |+---------------------+--------------+| 史密斯              | 研发部       || 艾伦                | 销售部       || 约翰逊              | 销售部       || 布朗                | 研发部       || 戴维斯              | 销售部       || 米勒                | 销售部       || 加西亚              | 会计部       || 威尔逊              | 研发部       || 摩尔                | 会计部       || 安德森              | 销售部       || 泰勒                | 研发部       || 托马斯              | 销售部       || 琼斯                | 研发部       || 杰克                | 会计部       || 阿富汗_勇格尔       | 研发部       || 西德尔_索泰         | 研发部       |+---------------------+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p><strong>特点</strong>：连接条件中的关系是非等量关系。</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 找出员工与之对应的工资等级并显示员工姓名、薪资、工资等级select e.员工姓名,e.薪资,m.等级'工资等级' from 员工信息表 e join 工资等级表 m on e.薪资 between m.最低值 and m.最高值;+---------------------+---------+--------------+| 员工姓名            | 薪资    | 工资等级     |+---------------------+---------+--------------+| 史密斯              |  800.00 |            1 || 艾伦                | 1600.00 |            3 || 约翰逊              | 1250.00 |            2 || 布朗                | 2975.00 |            4 || 戴维斯              | 1250.00 |            2 || 米勒                | 2850.00 |            4 || 加西亚              | 2450.00 |            4 || 威尔逊              | 3000.00 |            4 || 摩尔                | 5000.00 |            5 || 安德森              | 1500.00 |            3 || 泰勒                | 1100.00 |            1 || 托马斯              |  950.00 |            1 || 琼斯                | 3000.00 |            4 || 杰克                | 1300.00 |            2 || 阿富汗_勇格尔       |  820.00 |            1 || 西德尔_索泰         | 3090.00 |            5 |+---------------------+---------+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全连接-未学很少用"><a href="#全连接-未学很少用" class="headerlink" title="全连接(未学很少用)"></a>全连接(未学很少用)</h4><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p><strong>特点</strong>：不会忽略null字段的查询，查询到的行数只和表的前后位置相关。</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 左连接select 字段名1,字段名2 from 表1 left join 表2 on 筛表条件; -- 右连接select 字段名1,字段名2 from 表1 right join 表2 on 筛表条件; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键字-4"><a href="#关键字-4" class="headerlink" title="关键字"></a>关键字</h4><table><thead><tr><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">左连接</td></tr><tr><td align="center">right</td><td align="center">右连接</td></tr></tbody></table><p><strong>注意</strong>：每个左连接都可以写成右连接，每个右连接可以写成左连接。</p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">-- 查询所有员工的上级领导select e.* from 部门表 e left join 员工信息表 m on m.部门编号=e.部门编号 where m.员工编号 is null;+--------------+--------------+--------------+| 部门编号     | 部门名称     | 所在地区     |+--------------+--------------+--------------+|           40 | 运维部       | 波士顿       |+--------------+--------------+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="语法：-11"><a href="#语法：-11" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">select 字段名1,字段名2 from 表1 join 表2 on 筛表条件 join 表3 on 筛表条件 ... ; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">-- 找出每一个员工的部门名称、工资等级、以及上级领导select a.员工姓名,d.员工姓名'上级领导',b.部门名称,c.等级'工资等级' from 员工信息表 a join 员工信息表 d on a.上级领导编号 = d.员工编号 join 部门表 b on a.部门编号 = b.部门编号 join 工 资等级表 c on  a.薪资 between c.最低值 and c.最高值;+---------------------+--------------+--------------+--------------+| 员工姓名            | 上级领导     | 部门名称     | 工资等级     |+---------------------+--------------+--------------+--------------+| 史密斯              | 琼斯         | 研发部       |            1 || 艾伦                | 米勒         | 销售部       |            3 || 约翰逊              | 米勒         | 销售部       |            2 || 布朗                | 摩尔         | 研发部       |            4 || 戴维斯              | 米勒         | 销售部       |            2 || 米勒                | 摩尔         | 销售部       |            4 || 加西亚              | 摩尔         | 会计部       |            4 || 威尔逊              | 布朗         | 研发部       |            4 || 安德森              | 米勒         | 销售部       |            3 || 泰勒                | 威尔逊       | 研发部       |            1 || 托马斯              | 米勒         | 销售部       |            1 || 琼斯                | 布朗         | 研发部       |            4 || 杰克                | 加西亚       | 会计部       |            2 || 阿富汗_勇格尔       | 琼斯         | 研发部       |            1 || 西德尔_索泰         | 布朗         | 研发部       |            5 |+---------------------+--------------+--------------+--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><pre class="line-numbers language-mysql"><code class="language-mysql">    CREATE TABLE `tb_Demo` (        `dno` int(11) DEFAULT NULL    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;    -- 完整的建表语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>观察上表中的语句可得：</p><ul><li>MySQL默认使用的存储引擎是InnoDB方式。</li><li>默认采用的字符集是UTF8。</li></ul><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>存储引擎这个名字只有在MySQL中存在。（Oracle中有对应的机制，但是不叫做存储引擎。Oracle中没有特殊的名字，就是“表的存储方式”），mysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>查看当前MySQL支持的存储引擎：</p><pre class="line-numbers language-mysql"><code class="language-mysql">show engines \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看一下表的创建语句(含此表存储引擎)：</p><pre class="line-numbers language-mysql"><code class="language-mysql">show create table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改已存在的表的存储引擎：</p><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表明 engine = 存储引擎名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="存储引擎介绍-常见"><a href="#存储引擎介绍-常见" class="headerlink" title="存储引擎介绍(常见)"></a>存储引擎介绍(常见)</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ul><li>MyISAM这种存储引擎不支持事务。</li><li>MyISAM是mysql最常用的存储引擎，但是这种引擎不是默认的。</li><li>MyISAM采用三个文件组织一张表：<ol><li>xxx.frm（存储格式的文件）</li><li>xxx.MYD（存储表中数据的文件）</li><li>xxx.MYI（存储表中索引的文件）</li></ol></li><li>优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。</li><li>缺点：不支持事务。</li></ul><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul><li>表的结构存储在xxx.frm文件中</li><li>数据存储在tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换成只读。</li><li>这种InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制。</li><li>InnoDB支持级联删除和级联更新。</li><li>优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。</li></ul><h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><ul><li>缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的。</li><li>优点：查询速度最快。</li><li>拓展：以前叫做HEPA引擎。</li></ul><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>事务可以保证多个操作原子性，要么全成功，要么全失败。对于数据库来说事务保证批量的DML要么全成功，要么全失败。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E4%BA%8B%E5%8A%A1.png"></p><p>事务具有四个特征(ACID)：</p><ol><li>A 原子性(Atomicity)<br> 整个事务中的所有操作，必须作为一个单元全部完成（或全部取消）。</li><li>C 一致性(Consistency)<br> 在事务开始之前与结束之后，数据库都保持一致状态。</li><li>I 隔离性((Isolation))<br> 一个事务不会影响其他事务的运行。</li><li>D 持久性((Durability)</li></ol><h2 id="命令语句"><a href="#命令语句" class="headerlink" title="命令语句"></a>命令语句</h2><table><thead><tr><th align="center">命令语句</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">select @@autocommit;</td><td align="center">查看默认提交的状态是否是自动提交：0手动提交 1 自动提交</td></tr><tr><td align="center">set @@autocommit=0或1;</td><td align="center">开启或关闭事务</td></tr><tr><td align="center">rollback</td><td align="center">回滚事务</td></tr><tr><td align="center">commit</td><td align="center">提交事务</td></tr></tbody></table><blockquote><p>当执行DML语句是其实就是开启一个事务。<br>关于事务的回滚需要注意：只能回滚 insert、delete和update语句，不能回滚select(回滚<br>select没有任何意义)，对于 create、drop、 alter这些无法回滚，事务只对DML有效果。</p></blockquote><p><strong>注意</strong>：rollback，或者commit后事务就结束了。</p><h2 id="自动提交模式"><a href="#自动提交模式" class="headerlink" title="自动提交模式"></a>自动提交模式</h2><ul><li><p>概述：自动提交模式用于决定新事务如何及何时启动。</p></li><li><p>启用自动提交模式：</p><ol><li>如果自动提交模式被启用，则单条 DML 语句将缺省地开始一个新的事务。</li><li>如果该语句执行成功，事务将自动提交，并永久地保存该语句的执行结果。</li><li>如果语句执行失败，事务将自动回滚，并取消该语句的结果。</li><li>在自动提交模式下，仍可使用 start transaction语句来显式地启动事务。<br> 这时，一个事务仍可包含多条语句，直到这些语句被统一提交或回滚。  </li></ol></li><li><p>禁用自动提交模式：  </p><ol><li>如果禁用自动提交，事务可以跨越多条语句 。</li><li>在这种情况下，事务可以用commit和rollback语句来显式地提交或回滚。  </li></ol></li><li><p>自动提交模式可以通过服务器变量autocommit来控制。 </p><p>  例子：</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SET AUTOCOMMIT = OFF；mysql> SET AUTOCOMMIT = ON；或mysql> SET SESSION AUTOCOMMIT = OFF；mysql> SET SESSION AUTOCOMMIT = ON；show variables like '%auto%'; -- 查看变量状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>事务的隔离级别决定了事务之间可见的级别，当多个客户端并发地访问同一个表时，可能出现下面的一致性问题：</p><ul><li>脏读取(Dirty Read)<br>  一个事务开始读取了某行数据，但是另外一个事务已经更新了此数据但没有能够及时提<br>  交，这就出现了脏读取。</li><li>不可重复读(Non-repeatable Read)<br>  在同一个事务中，同一个读操作对同一个数据的前后两次读取产生了不同的结果，这就<br>  是不可重复读。</li><li>幻像读(Phantom Read)<br>  幻像读是指在同一个事务中以前没有的行，由于其他事务的提交而出现的新行。  </li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>InnoDB(存储引擎)实现了四个隔离级别，用以控制事务所做的修改，并将修改通告至其它并发<br>的事务：</p><table><thead><tr><th>级别</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>一级</td><td>read umcommitted(读未提交)</td><td>允许一个事务可以看到其他事务未提交的修改。</td></tr><tr><td>二级</td><td>read committed(读已提交)</td><td>允许一个事务只能看到其他事务已经提交的修改，未提交的修改是不可见的。</td></tr><tr><td>三级</td><td>repeatable read(可重复读)</td><td>确保如果在一个事务中执行两次相同的 SELECT 语句，都能得到相同的结果，不管其他<br>事务是否提交这些修改。 (银行总账)<br>该隔离级别为 InnoDB 的缺省设置。</td></tr><tr><td>四级</td><td>serializable(串行化) 【序列化】</td><td>将一个事务与其他事务完全地隔离 。</td></tr></tbody></table><h3 id="隔离级别与一致性问题的关系"><a href="#隔离级别与一致性问题的关系" class="headerlink" title="隔离级别与一致性问题的关系"></a>隔离级别与一致性问题的关系</h3><table><thead><tr><th>隔离级别</th><th>脏读取</th><th>不可重复读取</th><th>幻想读取</th></tr></thead><tbody><tr><td>读未提交</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读已提交</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读取</td><td>不可能</td><td>不可能</td><td>对InnoB不可能</td></tr><tr><td>串行化</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><h3 id="设置隔离级别命令"><a href="#设置隔离级别命令" class="headerlink" title="设置隔离级别命令"></a>设置隔离级别命令</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>select @@transaction_isolation;</td><td>查看隔离级别</td></tr><tr><td>set session transaction isolation level repeatable 隔离级别;</td><td>设置事务隔离级别</td></tr></tbody></table><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。</p><h2 id="索引特点"><a href="#索引特点" class="headerlink" title="索引特点"></a>索引特点</h2><p>BTREE 索引， HASH 索引</p><ul><li>优点：提高查询，联合查询，分级和排序的时间</li><li>缺点：索引占空间，维护（创建，更新，维护）索引时需要耗费时间  </li></ul><h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><ol><li>普通索引<br> 不加任何限制条件</li><li>唯一性索引<br> 使用 UNIQUE 参数</li><li>全文索引<br> 使用 FULLTEXT 参数，叧能创建在 CHAR、VARCHAR、TEXT 类型的字段上，叧有MyISAM 存储引擎支持全文索引。</li><li>单列索引<br> 在一个字段上建立的普通索引，唯一性索引或全文索引。</li><li>多列索引<br> 在多个字段上建立的普通索引，唯一性索引或全文索引。</li><li>空间索引<br> 使用 SPATIAL参数，只有 MyISAN存储引擎支持空间索引，必须建立在空间数据类型上，且必须非空。</li></ol><h2 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h2><ol><li>选择唯一性索引</li><li>为经常需要排序、分组和联合操作的字段建立索引<br> 如 ORDER BY、 GROUP BY、 DISTINCT， UNION 等操作的字段，特删是排序</li><li>为常作为查询条件的字段建立索引</li><li>限制索引的数目<br> 避免过多地浪费空间</li><li>尽量使用数据量少的索引</li><li>尽量使用前缀来索引<br> 如索引TEXT类型字段的前 N 个字符。<br> Oracle 中有函数数索引，这个是是相当于 left(field, n)式的函数索引</li><li>删除不在使用或者很少使用的索引  </li></ol><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><h3 id="语法：-12"><a href="#语法：-12" class="headerlink" title="语法："></a>语法：</h3><p>查看该查询是否使用索引：</p><pre class="line-numbers language-mysql"><code class="language-mysql">explain select 查询语句;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建表时创建索引"><a href="#创建表时创建索引" class="headerlink" title="创建表时创建索引"></a>创建表时创建索引</h3><pre class="line-numbers language-mysql"><code class="language-mysql">create table 表名 (    属性名 数据类型 [完整约束条件],    属性名 数据类型 [完整约束条件],    …    [unique|fulltext|spatial index|key [别名] (属性名 1 [(长度)] [asc|desc]));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建普通索引"><a href="#创建普通索引" class="headerlink" title="创建普通索引"></a>创建普通索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create table index1 (    id int,    name varchar(20),    sex boolean,    index(id));show create table index1\g;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建唯一性索引"><a href="#创建唯一性索引" class="headerlink" title="创建唯一性索引"></a>创建唯一性索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create table index2(    id int unique,    name varchar(20),    unique index index2_id(id asc));show create table index2\g;-- 看到在字段 id 上建立了两个唯一索引 id 和 index2_id，当然这样是没有必要的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建全文索引"><a href="#创建全文索引" class="headerlink" title="创建全文索引"></a>创建全文索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create table index3 (id int,    info varchar(20),    fulltext index index3_info(info)) engine=myisam;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建单列索引"><a href="#创建单列索引" class="headerlink" title="创建单列索引"></a>创建单列索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create table index4 (    id int,    subject varchar(30),    index index4_st(subject(10)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：令索引subject前10 个字符</p><h4 id="创建多列索引"><a href="#创建多列索引" class="headerlink" title="创建多列索引"></a>创建多列索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create table index5 (    id int,    name varchar(20),    sex char(4),    index index5_ns(name, sex))explain select * from index5 where name=’ 123’ \g;explain select * from index5 where name=’ 123’ and sex=’ n’ \g;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建空间索引"><a href="#创建空间索引" class="headerlink" title="创建空间索引"></a>创建空间索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create table index6 (    id int,    space geometry not null,    spatial index index6_sp(space))engine=myisam;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="已经存在的表上创建索引"><a href="#已经存在的表上创建索引" class="headerlink" title="已经存在的表上创建索引"></a>已经存在的表上创建索引</h3><pre class="line-numbers language-mysql"><code class="language-mysql">create [unique|fulltext|spatial] index 索引名 on 表名 (属性名[(长度)] [asc|desc]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建普通索引-1"><a href="#创建普通索引-1" class="headerlink" title="创建普通索引"></a>创建普通索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create index index7_id on example0(id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建唯一性索引-1"><a href="#创建唯一性索引-1" class="headerlink" title="创建唯一性索引"></a>创建唯一性索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create unique index index_8_id on index8(course_id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建全文索引-1"><a href="#创建全文索引-1" class="headerlink" title="创建全文索引"></a>创建全文索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create fulltext index index9_info on index9(info);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建单列索引-1"><a href="#创建单列索引-1" class="headerlink" title="创建单列索引"></a>创建单列索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create index index10_addr on index10(address(4));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建多列索引-1"><a href="#创建多列索引-1" class="headerlink" title="创建多列索引"></a>创建多列索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create index index11_na on index11(name, address);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建空间索引-1"><a href="#创建空间索引-1" class="headerlink" title="创建空间索引"></a>创建空间索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create spatial index index12_line on index12(line);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="用alter-table语句来创建索引"><a href="#用alter-table语句来创建索引" class="headerlink" title="用alter table语句来创建索引"></a>用alter table语句来创建索引</h3><pre class="line-numbers language-mysql"><code class="language-mysql">alter table 表名 add [unique|fulltext|spatial] index 索引名 (属性名[(长度)] [asc|desc]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建普通索引-2"><a href="#创建普通索引-2" class="headerlink" title="创建普通索引"></a>创建普通索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">alter table example0 add index index12_name(name(20));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建唯一性索引-2"><a href="#创建唯一性索引-2" class="headerlink" title="创建唯一性索引"></a>创建唯一性索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql"> alter table index14 add unique index index14_id(course_id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建全文索引-2"><a href="#创建全文索引-2" class="headerlink" title="创建全文索引"></a>创建全文索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">alter table index15 add index index15_info(info);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建单列索引-2"><a href="#创建单列索引-2" class="headerlink" title="创建单列索引"></a>创建单列索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">alter table index 16 add index index16_addr(address(4));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建多列索引-2"><a href="#创建多列索引-2" class="headerlink" title="创建多列索引"></a>创建多列索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">alter table index17 add index index17_na(name, address);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建空间索引-2"><a href="#创建空间索引-2" class="headerlink" title="创建空间索引"></a>创建空间索引</h4><pre class="line-numbers language-mysql"><code class="language-mysql">alter table index18 add index index18_line(line);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre class="line-numbers language-mysql"><code class="language-mysql">drop index 索引名 on 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2><p>视图是一种根据查询(也就是select表达式)定义的数据库对象，用于获取想要看到和使用的局部数据。</p><ul><li>视图有时也被成为“虚拟表”。</li><li>视图可以被用来从常规表（称为“基表”）或其他视图中查询数据。</li><li>相对于从基表中直接获取数据，视图有以下好处：<ol><li>访问数据变得简单</li><li>可被用来对不同用户显示不同的表的内容</li><li>用来协助适配表的结构以适应前端现有的应用程序  </li></ol></li></ul><h2 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h2><ul><li>提高检索效率</li><li>隐藏表的实现细节【面向视图检索】    </li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Snipaste_2021-10-31_09-27-55.png"></p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><h4 id="语法：-13"><a href="#语法：-13" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">create view 视图名 as select 字段名1,字段名2 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><h4 id="语法：-14"><a href="#语法：-14" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-mysql"><code class="language-mysql">drop view 视图名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="DBA命令"><a href="#DBA命令" class="headerlink" title="DBA命令"></a>DBA命令</h1><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><h3 id="语法：-15"><a href="#语法：-15" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">create user username identified by 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><p>username：你将创建的用户名</p><p>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器。<br>例如：</p><pre class="line-numbers language-mysql"><code class="language-mysql">create user p361 identified by '123';-- 可以登录但是只可以看见一个库 information_schema  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="语法：-16"><a href="#语法：-16" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">grant all privileges on dbname.tbname to 'username'@'login ip' identified by 'password' with grant option;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li>dbname=*：表示所有数据库  </li><li>tbname=*：表示所有表  </li><li>login ip=%：表示任何 ip  </li><li>password为空，表示不需要密码即可登录  </li><li>with grant option：表示该用户还可以授权给其他用户  </li></ul><h3 id="细粒度授权"><a href="#细粒度授权" class="headerlink" title="细粒度授权"></a>细粒度授权</h3><p>root 用户登入mysql输入语法：</p><pre class="line-numbers language-mysql"><code class="language-mysql">grant select,insert,update,delete on *.* to p361 @localhost Identified by "123";-- 如果希望该用户能够在任何机器上登陆 mysql，则将localhost改为"%" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="粗粒度授权"><a href="#粗粒度授权" class="headerlink" title="粗粒度授权"></a>粗粒度授权</h3><p>root 用户登入mysql输入语法(测试用户一般使用该命令授权)：</p><pre class="line-numbers language-mysql"><code class="language-mysql">grant all privileges on *.* to 'p361'@'%' identified by "123";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令：</p><pre class="line-numbers language-mysql"><code class="language-mysql">grant all privileges on *.* to 'p361'@'%' identified by "123" with grant option;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>privileges 包括：</p><ul><li>alter：修改数据库的表</li><li>create：创建新的数据库或表</li><li>delete：删除表数据</li><li>drop：删除数据库/表</li><li>index：创建/删除索引</li><li>insert：添加表数据</li><li>select：查询表数据</li><li>update：更新表数据</li><li>all：允许任何操作</li><li>usage：只允许登录  </li></ul><h2 id="回收权限"><a href="#回收权限" class="headerlink" title="回收权限"></a>回收权限</h2><h3 id="语法：-17"><a href="#语法：-17" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 撤销权限revoke privileges on dbname[.tbname] from username;-- 撤销所有权限revoke all privileges on *.* from username;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改密码："><a href="#修改密码：" class="headerlink" title="修改密码："></a>修改密码：</h3><pre class="line-numbers language-mysql"><code class="language-mysql">update user set password = password('qwe') where user = 'p646';-- 刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><h4 id="语法：-18"><a href="#语法：-18" class="headerlink" title="语法："></a>语法：</h4><p>在 windows 的 dos 命令窗口中执行以下全部命令：  </p><pre class="line-numbers language-dos"><code class="language-dos">mysqldump 表名>输出路径+文件名.sql -u用户名 -p密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-dos"><code class="language-dos">mysqldump exercise_02>D:\exercise_02.sql -uroot -p123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="导出指定库下的指定表"><a href="#导出指定库下的指定表" class="headerlink" title="导出指定库下的指定表"></a>导出指定库下的指定表</h4><p>在 windows 的 dos 命令窗口中执行以下全部命令：  </p><pre class="line-numbers language-dos"><code class="language-dos">mysqldump 数据库名 表名>输出路径+文件名.sql -u用户名 –p密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>登录 MYSQL 数据库管理系统之后执行：  </p><pre class="line-numbers language-mysql"><code class="language-mysql">source sql脚本绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h1><h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p><strong>数据库表中不能出现重复记录，每个字段是原子性的不能再分。</strong>  </p><p>不符合第一范式的示例 ：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>联系方式</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td><a href="mailto:zs@gmail.com">zs@gmail.com</a>,1359999999</td></tr><tr><td>1002</td><td>李四</td><td><a href="mailto:ls@gmail.com">ls@gmail.com</a>,13699999999</td></tr><tr><td>1001</td><td>王五</td><td><a href="mailto:ww@163.net">ww@163.net</a>,13488888888</td></tr></tbody></table><p>以上表存在问题：</p><ul><li>最后一条记录的学生编号和第一条重复(不唯一，没有主键)</li><li>联系方式字段可以再分，不是原子性的。</li></ul><p>解决方案如下：</p><table><thead><tr><th>学生编号(pk)</th><th>学生姓名</th><th>email</th><th>联系电话</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td><a href="mailto:zs@gmail.com">zs@gmail.com</a></td><td>1359999999</td></tr><tr><td>1002</td><td>李四</td><td><a href="mailto:ls@gmail.com">ls@gmail.com</a></td><td>13699999999</td></tr><tr><td>1003</td><td>王五</td><td><a href="mailto:ww@163.net">ww@163.net</a></td><td>13488888888</td></tr></tbody></table><p>关于第一范式，每一行必须唯一，也就是每个表必须有主键， 这是我们数据库设计的最基本要求，主要通常采用数值型或定长字符串表示，关于列不可再分，应该根据具体的情况来决定。如联系方式，为了开发上的便利行可能就采用一个字段了。  </p><h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p><strong>第二范式是建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生部分依赖 。</strong></p><p>示例：  </p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>教师编号</th><th>教师姓名</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>001</td><td>王老师</td></tr><tr><td>1002</td><td>李四</td><td>002</td><td>赵老师</td></tr><tr><td>1003</td><td>王五</td><td>001</td><td>王老师</td></tr><tr><td>1001</td><td>张三</td><td>002</td><td>赵老师</td></tr></tbody></table><p>确定主键： </p><table><thead><tr><th>学生编号(pk)</th><th>教师编号(pk)</th><th>学生姓名</th><th>教师姓名</th></tr></thead><tbody><tr><td>1001</td><td>001</td><td>张三</td><td>王老师</td></tr><tr><td>1002</td><td>002</td><td>李四</td><td>赵老师</td></tr><tr><td>1003</td><td>001</td><td>王五</td><td>王老师</td></tr><tr><td>1001</td><td>002</td><td>张三</td><td>赵老师</td></tr></tbody></table><p>以上虽然确定了主键，但此表会出现大量的冗余，主要涉及到的冗余字段为“学生姓名”和“教师姓名”，出现冗余的原因在于，学生姓名部分依赖了主键的一个字段学生编号，而没有依赖教师编号，而教师姓名部门依赖了主键的一个字段教师编号，这就是第二范式部分依赖。  </p><p>解决方案如下：  </p><p>学生信息表</p><table><thead><tr><th>学生编号（ PK）</th><th>学生姓名</th></tr></thead><tbody><tr><td>1001</td><td>张三</td></tr><tr><td>1002</td><td>李四</td></tr><tr><td>1003</td><td>王五</td></tr></tbody></table><p>教师信息表  </p><table><thead><tr><th>教师编号（ PK）</th><th>教师姓名</th></tr></thead><tbody><tr><td>001</td><td>王老师</td></tr><tr><td>002</td><td>赵老师</td></tr></tbody></table><p>教师和学生的关系表  </p><table><thead><tr><th>学生编号(PK) fk→学生表的学生编号</th><th>教师编号(PK) fk→教师表的教师编号</th></tr></thead><tbody><tr><td>1001</td><td>001</td></tr><tr><td>1002</td><td>002</td></tr><tr><td>1003</td><td>001</td></tr></tbody></table><p>如果一个表是单一主键，那么它就复合第二范式，部分依赖和主键有关系<br>以上是一种典型的”多对多”的设计</p><h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>建立在第二范式基础上的，非主键字段不能传递依赖于主键字段。（ 不要产生传递依赖）  </p><table><thead><tr><th>学生编号（ PK）</th><th>学生姓名</th><th>班级编号</th><th>班级名称</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>01</td><td>一年一班</td></tr><tr><td>1002</td><td>李四</td><td>02</td><td>一年二班</td></tr><tr><td>1003</td><td>王五</td><td>03</td><td>一年三班</td></tr><tr><td>1004</td><td>赵六</td><td>03</td><td>一年三班</td></tr></tbody></table><p>从上表可以看出，班级名称字段存在冗余，因为班级名称字段没有直接依赖于主键，班级名称字段依赖于班级编号，班级编号依赖于学生编号，那么这就是传递依赖，解决的办法是将冗余字段单独拿出来建立表，如：  </p><p>学生信息表  </p><table><thead><tr><th>学生编号（ PK）</th><th>学生姓名</th><th>班级编号（ FK）</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>01</td></tr><tr><td>1002</td><td>李四</td><td>02</td></tr><tr><td>1003</td><td>王五</td><td>03</td></tr><tr><td>1004</td><td>赵六</td><td>03</td></tr></tbody></table><p>班级信息表  </p><table><thead><tr><th>班级编号（ PK）</th><th>班级名称</th></tr></thead><tbody><tr><td>01</td><td>一年一班</td></tr><tr><td>02</td><td>一年二班</td></tr><tr><td>03</td><td>一年三班</td></tr></tbody></table><p>以上设计是一种典型的一对多的设计，一存储在一张表中，多存储在一张表中，在多的那张表中添加外键指向一的一方的主键 。</p><h2 id="三范式总结"><a href="#三范式总结" class="headerlink" title="三范式总结"></a>三范式总结</h2><p>第一范式： 有主键，具有原子性，字段不可分割。</p><p>第二范式：完全依赖， 没有部分依赖  。</p><p>第三范式： 没有传递依赖。</p><p><strong>注意</strong>：数据库设计尽量遵循三范式，但是还是根据实际情况进行取舍，有时可能会拿冗余换速度，最终用目的要满足客户需求。  </p><p>一对一设计，有两种设计方案：<br>第一种设计方案：主键共享</p><pre class="line-numbers language-mysql"><code class="language-mysql">    t_user_login  用户登录表    id(pk)        username            password    --------------------------------------    1                zs                    123    2                ls                    456    t_user_detail 用户详细信息表    id(pk+fk)    realname            tel            ....    ------------------------------------------------    1                张三                1111111111    2                李四                1111415621<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种设计方案：外键唯一  </p><pre class="line-numbers language-mysql"><code class="language-mysql">    t_user_login  用户登录表    id(pk)        username            password    --------------------------------------    1                zs                    123    2                ls                    456    t_user_detail 用户详细信息表    id(pk)       realname            tel                userid(fk+unique)....    -----------------------------------------------------------    1                张三                1111111111        2    2                李四                1111415621        1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一对多设计方案：</p><p>口诀：一对多，两张表，多的表加外键。</p><pre class="line-numbers language-mysql"><code class="language-mysql">    班级t_class    cno(pk)            cname    --------------------------    1                    班级1    2                    班级2    学生t_student    sno(pk)            sname                classno(fk)    ---------------------------------------------    101                张1                1    102                张2                1    103                张3                2    104                张4                2    105                张5                2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多对多设计方案：</p><p>口诀：多对多，三张表，关系表，两个外键。</p><pre class="line-numbers language-mysql"><code class="language-mysql">    t_student学生表    sno(pk)        sname    -------------------    1                张三    2                李四    3                王五        t_teacher 讲师表    tno(pk)        tname    ---------------------    1                王老师    2                张老师    3                李老师    t_student_teacher_relation 学生讲师关系表    id(pk)        sno(fk)        tno(fk)    ----------------------------------    1                1                3    2                1                1    3                2                2    4                2                3    5                3                1    6                3                3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句(常用)(02)</title>
      <link href="/posts/77f55d43.html"/>
      <url>/posts/77f55d43.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语句-常用"><a href="#SQL语句-常用" class="headerlink" title="SQL语句(常用)"></a>SQL语句(常用)</h1><h2 id="Mysql自带数据库："><a href="#Mysql自带数据库：" class="headerlink" title="Mysql自带数据库："></a>Mysql自带数据库：</h2><h3 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h3><ul><li>主要用于收集数据库服务器性能参数</li><li>提供进程等待的详细信息，包括锁、互斥变量、文件信息；</li><li>保存历史的事件汇总信息，为提供MySQL服务器性能做出详细的判断；</li><li>对于新增和删除监控事件点都非常容易，并可以随意改变mysql服务器的监控周期，例如（CYCLE、MICROSECOND）</li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li>保存MySQL的权限、参数、对象和状态信息。</li><li>如哪些user可以访问这个数据、DB参数、插件、主从</li></ul><h3 id="performance-schema-1"><a href="#performance-schema-1" class="headerlink" title="performance_schema"></a>performance_schema</h3><ul><li>主要用于收集数据库服务器性能参数</li><li>提供进程等待的详细信息，包括锁、互斥变量、文件信息；</li><li>保存历史的事件汇总信息，为提供MySQL服务器性能做出详细的判断；</li><li>对于新增和删除监控事件点都非常容易，并可以随意改变mysql服务器的监控周期，例如（CYCLE、MICROSECOND）</li></ul><h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h3><ul><li>sys库所有的数据源来自：performance_schema。目标是把performance_schema的把复杂度降低，让DBA能更好的阅读这个库里的内容。让DBA更快的了解DB的运行情况。 </li></ul><h2 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h2><ol><li>mysql -u&lt;用户名一般为root&gt; -p;<br><br> 登录mysql </li><li>show databases;<br><br> 查看所有数据库</li><li>create database &lt;数据库名称&gt;;<br><br> 创建数据库</li><li>use &lt;数据库名称&gt;;<br><br> 选择数据库</li><li>show tabes;<br>查看数据库中所有的表</li><li>show create table &lt;表名&gt; ;<br><br> 查看建表语句</li><li>drop table &lt;表明&gt;;<br>删除表 </li><li>drop database &lt;数据库名&gt;;<br><br> 删除数据库</li><li>alter table &lt;旧表名&gt; rename &lt;新表名&gt;;<br><br> 修改表名</li><li>alter table &lt;表名&gt; modify &lt;字段名&gt; &lt;修改数据类型&gt;;<br><br> 修改字段类型</li><li>alter table &lt;表名&gt; change &lt;旧字段名&gt; &lt;新字段名&gt; &lt;此字段的数据类型&gt;;<br><br> 修改字段名</li><li>alter table &lt;表名&gt; add &lt;字段名&gt; &lt;数据类型&gt; &lt;完整性约束条件&gt;;<br><br>在最后一条添加字段</li><li>alter table &lt;表名&gt; add &lt;字段名&gt; &lt;数据类型&gt; &lt;完整性约束条件&gt; first;<br><br> 在第一行添加字段</li><li>alter table &lt;表名&gt; add &lt;字段名&gt; &lt;数据类型&gt; &lt;完整性约束条件&gt; after &lt;在这个字段之后添加，这里添加字段名&gt;;<br><br> 在指定字段后面添加字段</li><li>alter table &lt;表名&gt; drop &lt;字段名&gt;;<br><br> 删除字段</li><li>delete from &lt;表名&gt; where 筛选条件;<br> 删除数据(这里删除是一条数据)</li><li>alter table &lt;表名&gt; modify &lt;想移动字段名称&gt; &lt;字段数据类型&gt; first;<br><br> 移动字段到第一行</li><li>alter table &lt;表名&gt; modify &lt;想移动字段名称&gt; &lt;字段数据类型&gt; after &lt;在这个字段之后添加，这里添加字段名&gt;;<br><br>  移动到指定字段之后</li><li>alter table &lt;表名&gt; drop foreign key &lt;外键名称&gt;;<br><br>  删除外键<br><br>  如果数据表之间存在外键关联，那么直接删除主表，系统会提示错误信息，这种情况下，需要先删除与它关联的其他的表，在删除主表</li><li>desc 表名;<br><br> 查看表结构</li><li>update 表名 set 字段名1=值1,字段名2=值2… where 条件;<br><br> 修改表中数据</li><li>delete from 表名 where 筛选条件;<br>  删除表中数据</li><li>create table  &lt;表名&gt; ( <br><br>  属性名 数据类型 [完整性约束条件],<br><br>  属性名 数据类型 [完整性约束条件],<br><br>  ……<br><br>  属性名 数据类型 [完整性约束条件]<br>  );</li><li>drop table &lt;表名&gt;;<br><br>   删除没有被关联的表，这里可以一次选多个，也可以选一个</li><li>drop database &lt;数据库名称&gt;;<br><br>  删除数据库</li><li>show table &lt;表名&gt; <br></li><li>\c            结束一条sql语句<br></li><li>exit        退出mysql<br></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stema流(57)</title>
      <link href="/posts/aec47cfa.html"/>
      <url>/posts/aec47cfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="Stema流"><a href="#Stema流" class="headerlink" title="Stema流"></a>Stema流</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>几乎所有的集合（如 Collection 接口或 Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 传统遍历集合方式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"田四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历集合元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环遍历的弊端"><a href="#循环遍历的弊端" class="headerlink" title="循环遍历的弊端"></a>循环遍历的弊端</h2><p>Java 8的Lambda让我们可以更加专注于<strong>做什么</strong>（What），而不是<strong>怎么做</strong>（How），这点此前已经结合内部类进行了对比说明。现在，我们仔细体会一下上例代码，可以发现：  </p><ul><li>for循环的语法就是“<strong>怎么做</strong>”</li><li>for循环的循环体才是“<strong>做什么</strong>  </li></ul><p>为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而并不是从第一个到最后一个顺次循环。前者是目的后者是方式。</p><p>试想一下，如果希望对集合中的元素进行筛选过滤：  </p><ol><li>将集合A根据条件一过滤为<strong>子集B</strong>；</li><li>然后再根据条件二过滤为<strong>子集C</strong>。  </li></ol><p>那怎么办？在Java 8之前的做法可能为：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周芷若"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建存储姓张的姓名</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> zhangarrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历arrayList集合中并判断姓张的姓名</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果性张则添加到zhangarrayList集合中</span>                zhangarrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建字符大于三个集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断姓张并字符大于三的元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> zhangarrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果姓名字符大于3则添加到集合中</span>                num<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历最后的结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中含有三个循环，每一个作用不同：  </p><ol><li>首先筛选所有姓张的人；</li><li>然后筛选名字有三个字的人；</li><li>最后进行对结果进行打印输出。  </li></ol><p>每当我们需要对集合中的元素进行操作的时候，总是需要进行循环、循环、再循环。这是理所当然的么？<strong>不是。</strong>循环是做事情的方式，而不是目的。另一方面，使用线性循环就意味着只能遍历一次。如果希望再次遍历，只能再使用另一个循环从头开始。  </p><h2 id="Stream的更优写法"><a href="#Stream的更优写法" class="headerlink" title="Stream的更优写法"></a>Stream的更优写法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// JDK8更加优雅的遍历集合</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张二蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对集合元素进行处理</span>        arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：<strong>获取流、过滤姓张、过滤长度为</strong>3<strong>、逐一打印</strong>。代码中并没有体现使用线性循环或是其他任何算法进行遍历，我们真正要做的事情内容被更好地体现在代码中 。</p><h2 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h2><p>java.util.stream.Stream<t> 是Java 8新加入的最常用的流接口。（这并不是一个函数式接口。）  </t></p><p>获取一个流非常简单，有以下几种常用的方式：  </p><ul><li>所有的 Collection 集合都可以通过 stream 默认方法获取流；</li><li>Stream 接口的静态方法 of 可以获取数组对应的流。  </li></ul><p>根据Collection获取流  </p><p>首先， java.util.Collection 接口中加入了default方法 stream 用来获取流，所以其所有实现类均可获取流。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Collection集合获取Steam常用方式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将集合转换为数组</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vector<span class="token operator">&lt;</span>Object<span class="token operator">></span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// HashMap集合不是Collection所以需要将key值转换成Set集合再换换成Stream流</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> strings1 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> keySteam <span class="token operator">=</span>  strings1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组转换为Steame流</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"田六"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> strings2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>流模型的操作很丰富，这里介绍一些常用的API。这些方法可以被分成两种 :</p><ul><li>延迟方法：返回值类型仍然是 Stream 接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为延迟方法。）</li><li>终结方法：返回值类型不再是 Stream 接口自身类型的方法，因此不再支持类似 StringBuilder 那样的链式调<br>  用。本小节中，终结方法包括 count 和 forEach 方法。  </li></ul><h3 id="逐一处理：forEach"><a href="#逐一处理：forEach" class="headerlink" title="逐一处理：forEach"></a>逐一处理：forEach</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// forEach方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用Stream流中的forEeach方法遍历集合中的元素</span><span class="token comment" spellcheck="true">/*        arrayList.stream().forEach((s)->{            System.out.println(s);        });*/</span>        <span class="token comment" spellcheck="true">// 简化Lambda表达式</span>        arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤：filter"><a href="#过滤：filter" class="headerlink" title="过滤：filter"></a>过滤：filter</h3><p>可以通过 filter 方法将一个流转换成另一个子集流。方法签名：  </p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>Predicate<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该接口接收一个 Predicate 函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件 。</p><h4 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// filter方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建字符数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数组转换成Stream流</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用filer方法流转换成另一个子集流然后用函数式接口判断姓张的元素</span>        Stream stream2 <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h3><p>如果需要将流中的元素映射到另一个流中，可以使用 map 方法。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>R<span class="token operator">></span> Stream<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token operator">></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该接口需要一个 Function 函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// map方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建字符串</span>        String str <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将str转换成Stream</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用map方法将结果映射到另外一个流中</span>        Stream stream2 <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将String类型转换成Integer类型并将此数据加10</span>           <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出数据</span>        stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计个数：count"><a href="#统计个数：count" class="headerlink" title="统计个数：count"></a>统计个数：count</h3><p>正如旧集合 Collection 当中的 size 方法一样，流提供 count 方法来数一数其中的元素个数：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该方法返回一个long值代表元素个数（不再像旧集合那样是int值）。基本使用：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// count方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建ArrayList集合</span>        ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张二蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将集合转换成stream元素</span>        Stream<span class="token operator">&lt;</span>Object<span class="token operator">></span> stream <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用Stream中的count方法统计集合中有多少元素</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h3><p>limit 方法可以对流进行截取，只取用前n个。方法签名：  </p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作。基本使用：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// limit方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建字符数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"喜羊羊"</span><span class="token punctuation">,</span><span class="token string">"美羊羊"</span><span class="token punctuation">,</span><span class="token string">"暖洋洋"</span><span class="token punctuation">,</span><span class="token string">"沸羊羊"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将字符数组转化成Stream流</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数组前读取出来</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream2 <span class="token operator">=</span> stream1<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h3><p>如果希望跳过前几个元素，可以使用 skip 方法获取一个截取之后的新流：  </p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。基本使用：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// skip方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest09</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建字符串数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"喜羊羊"</span><span class="token punctuation">,</span><span class="token string">"美羊羊"</span><span class="token punctuation">,</span><span class="token string">"暖洋洋"</span><span class="token punctuation">,</span><span class="token string">"沸羊羊"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将字符串数组转化成Stream流</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用skip方法跳过前2个数据</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数据</span>        stream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合：concat"><a href="#组合：concat" class="headerlink" title="组合：concat"></a>组合：concat</h3><p>如果有两个流，希望合并成为一个流，那么可以使用 Stream 接口的静态方法 concat  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">concat</span><span class="token punctuation">(</span>Stream<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> a<span class="token punctuation">,</span> Stream<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>备注：这是一个静态方法，与 java.lang.String 当中的 concat 方法是不同的。  </p></blockquote><p>该方法的基本使用代码如下：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream流</span><span class="token comment" spellcheck="true">// concat方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest010</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建字符串数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"喜羊羊"</span><span class="token punctuation">,</span><span class="token string">"美羊羊"</span><span class="token punctuation">,</span><span class="token string">"暖洋洋"</span><span class="token punctuation">,</span><span class="token string">"沸羊羊"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将字符串数组转化成Stream流</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strs1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建字符串数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"田四"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将字符串数组转化成Stream流</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strs2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将以上两个Stream流合并为一个流</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stream1<span class="token punctuation">,</span> stream2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历最后合并的流</span>        result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习：集合元素处理"><a href="#练习：集合元素处理" class="headerlink" title="练习：集合元素处理"></a>练习：集合元素处理</h2><h3 id="题目-："><a href="#题目-：" class="headerlink" title="题目 ："></a>题目 ：</h3><p>现在有两个 ArrayList 集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）<strong>依次</strong>进行以下若干操作步骤：  </p><ol><li>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</li><li>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</li><li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li><li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li><li>将两个队伍合并为一个队伍；存储到一个新集合中。</li><li>根据姓名创建 Person 对象；存储到一个新集合中。</li><li>打印整个队伍的Person对象信息 。</li></ol><h3 id="不使用Stream流处理集合元素："><a href="#不使用Stream流处理集合元素：" class="headerlink" title="不使用Stream流处理集合元素："></a>不使用Stream流处理集合元素：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream小结练习01</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一支队伍</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"宋远桥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"苏星河"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"石破天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"石中玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"老子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"庄子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"洪七公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> one1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> one<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                one1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> one2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            one2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>one1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"古力娜扎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵丽颖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"尼古拉斯赵四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张天爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张二狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> two1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String o <span class="token operator">:</span> two<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                two1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> two2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> two1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            two2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>two1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5. 将两个队伍合并为一个队伍；存储到一个新集合中。</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> merge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        merge<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>one2<span class="token punctuation">)</span><span class="token punctuation">;</span>        merge<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>two2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6. 根据姓名创建Person对象；存储到一个新集合中。</span>        ArrayList<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> merge<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//7. 打印整个队伍的Person对象信息。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person person <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Stream流处理集合元素："><a href="#使用Stream流处理集合元素：" class="headerlink" title="使用Stream流处理集合元素："></a>使用Stream流处理集合元素：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Stream小结练习01</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest12</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一支队伍</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"宋远桥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"苏星河"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"石破天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"石中玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"老子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"庄子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"洪七公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</span>        <span class="token comment" spellcheck="true">//2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> oneStream <span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二支队伍</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"古力娜扎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"赵丽颖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"尼古拉斯赵四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张天爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张二狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。</span>        <span class="token comment" spellcheck="true">//4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> twoStream <span class="token operator">=</span> two<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 将两个队伍合并为一个队伍；存储到一个新集合中。</span>        <span class="token comment" spellcheck="true">//6. 根据姓名创建 Person 对象；存储到一个新集合中。</span>        <span class="token comment" spellcheck="true">//7. 打印整个队伍的Person对象信息</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>oneStream<span class="token punctuation">,</span>twoStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的函数式接口(56)</title>
      <link href="/posts/aec47cfa.html"/>
      <url>/posts/aec47cfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h1><h2 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h2><p><strong>java.util.function.Supplier<t></t></strong> 接口仅包含一个无参的方法： T get() 。用来获取一个泛型参数指定类型的对象数据。由于这是一个函数式接口，这也就意味着对应的Lambda表达式需要“<strong>对外提供</strong>”一个符合泛型类型的对象数据。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过函数式接口Supplier实现数字求最大值</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SupplierTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">getMax</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>Integer<span class="token operator">></span> sup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">546</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_value <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> ints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>anInt<span class="token operator">></span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    max <span class="token operator">=</span> anInt<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h2><p><strong>java.util.function.Consumer<t></t></strong> 接口则正好与Supplier接口相反，它不是生产一个数据，而是<strong>消费</strong>一个数据，其数据类型由泛型决定。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Consumer接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> con<span class="token punctuation">)</span> <span class="token punctuation">{</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用method</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法：andThen"><a href="#默认方法：andThen" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h3><p>如果一个方法的参数和返回值全都是 Consumer 类型，那么就可以实现效果：消费数据的时候，首先做一个操作，然后再做一个操作，实现组合。而这个方法就是 Consumer 接口中的default方法andThen 。</p><p>要想实现组合，需要两个或多个Lambda表达式即可，而 andThen 的语义正是“一步接一步”操作。例如两个步骤组合的情况：  </p><blockquote><p>优点：使用andThen方法可以使java.util.Objects 的 requireNonNull 静态方法将会在参数为null时主动抛出<br>NullPointerException 异常。这省去了重复编写if语句和抛出空指针异常的麻烦。  </p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Consumer接口默认方法andTHen</span><span class="token comment" spellcheck="true">// 两个接口共同消费一个数据</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span>  con1<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span>con2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种消费方式</span>        <span class="token comment" spellcheck="true">/*        con1.accept(name);        con2.accept(name);        */</span>        <span class="token comment" spellcheck="true">// 第二种消费方式</span>        con1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>con2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现方法一</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>con1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 消费方式：将此字符串转换为大写</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>con2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 消费方式：将此字符串转换为小写</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con2<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实现方法二</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>con1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>con2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con2<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h2><p>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用<br>java.util.function.Predicate<t> 接口。  </t></p><p>抽象方法：test  </p><p>Predicate 接口中包含一个抽象方法： boolean test(T t) 。用于条件判断的场景：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Predicate接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">PredicateDemo</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 测试此字符串是否大于5个字符</span>        String strTest <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*        Boolean aBoolean = PredicateDemo(strTest, (result) -> {            // 测试此字符串位数是否大于5            return strTest.length() > 5;        });*/</span>        <span class="token comment" spellcheck="true">// lambda语句优化</span>        Boolean aBoolean <span class="token operator">=</span> <span class="token function">PredicateDemo</span><span class="token punctuation">(</span>strTest<span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> strTest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法：and"><a href="#默认方法：and" class="headerlink" title="默认方法：and"></a>默认方法：and</h3><p>既然是条件判断，就会存在与、或、非三种常见的逻辑关系。其中将两个 Predicate 条件使用“与”逻辑连接起来实现“<strong>并且</strong>”的效果时，可以使用default方法 and 。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Predicate函数式接口</span><span class="token comment" spellcheck="true">// and方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">PredicateDemo02</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> str1<span class="token punctuation">,</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> str2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return str1.test(str) &amp;&amp; str2.test(str);</span>        <span class="token comment" spellcheck="true">// 使用and方法</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>        Boolean result <span class="token operator">=</span> <span class="token function">PredicateDemo02</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法：or"><a href="#默认方法：or" class="headerlink" title="默认方法：or"></a>默认方法：or</h3><p>与 and 的“与”类似，默认方法 or 实现逻辑关系中的“<strong>或</strong>”。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Predicate函数式接口</span><span class="token comment" spellcheck="true">// or方法</span><span class="token comment" spellcheck="true">// 下列方法实现一种则为true</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">PredicateDemo03</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> str1<span class="token punctuation">,</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> str2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"bcdsdsd"</span><span class="token punctuation">;</span>        Boolean result <span class="token operator">=</span> <span class="token function">PredicateDemo03</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法：negate"><a href="#默认方法：negate" class="headerlink" title="默认方法：negate"></a>默认方法：negate</h3><p>“与”、“或”已经了解了，剩下的“非”（取反）也会简单。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Predicate函数式接口</span><span class="token comment" spellcheck="true">// negate取反</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">PredicateDemo04</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> str1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        Boolean result <span class="token operator">=</span> <span class="token function">PredicateDemo04</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>           <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h2><p>java.util.function.Function&lt;T,R&gt; 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。</p><h3 id="抽象方法：apply"><a href="#抽象方法：apply" class="headerlink" title="抽象方法：apply"></a>抽象方法：apply</h3><p>Function 接口中最主要的抽象方法为： R apply(T t) ，根据类型T的参数获取类型R的结果。<br>使用的场景例如：将 String 类型转换为 Integer 类型。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Function方法</span><span class="token comment" spellcheck="true">// apply方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FunctionDemo01</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> rus<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span>  rus<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*FunctionDemo01(str,(rus)->{            return Integer.parseInt(rus);        });*/</span>        <span class="token comment" spellcheck="true">// Lambda优化</span>        <span class="token function">FunctionDemo01</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span>rus<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法：andThen-1"><a href="#默认方法：andThen-1" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h3><p>Function 接口中有一个默认的 andThen 方法，用来进行组合操作。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Function类</span><span class="token comment" spellcheck="true">// andThen方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">FunctionDemo02</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> str1<span class="token punctuation">,</span>Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> str2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意:以下apply方法先执行str1在执行str2</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> <span class="token function">FunctionDemo02</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> str2<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式(55)</title>
      <link href="/posts/aec47cfa.html"/>
      <url>/posts/aec47cfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="做什么，而不是怎么做"><a href="#做什么，而不是怎么做" class="headerlink" title="做什么，而不是怎么做"></a>做什么，而不是怎么做</h2><p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是：将 run 方法体内的代码传递给 Thread 类知晓。  </p><p>传递一段代码——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><h3 id="生活举例"><a href="#生活举例" class="headerlink" title="生活举例"></a>生活举例</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Java%E7%AC%94%E8%AE%B0.jpg" alt="生活举例"></h3><p>当我们需要从北京到上海时，可以选择高铁、汽车、骑行或是徒步。我们的真正目的是到达上海，而如何才能到达上海的形式并不重要，所以我们一直在探索有没有比高铁更好的方式——搭乘飞机。我们更加关注的不是怎么去上海而是怎样快速到上海。</p><p>而现在这种飞机（甚至是飞船）已经诞生：2014年3月Oracle所发布的Java 8（JDK 1.8）中，加入了<strong>Lambda****表达式</strong>的重量级新特性，为我们打开了新世界的大门。    </p><h2 id="分析：匿名内部类的好处与弊端"><a href="#分析：匿名内部类的好处与弊端" class="headerlink" title="分析：匿名内部类的好处与弊端"></a>分析：匿名内部类的好处与弊端</h2><h3 id="匿名内部类优点："><a href="#匿名内部类优点：" class="headerlink" title="匿名内部类优点："></a>匿名内部类优点：</h3><ul><li>​    匿名内部类可以帮我们<strong>省去实现类的定义</strong>；  </li></ul><h3 id="匿名内部类缺点："><a href="#匿名内部类缺点：" class="headerlink" title="匿名内部类缺点："></a>匿名内部类缺点：</h3><ul><li>匿名内部类的语法——<strong>确实太复杂了！</strong>  </li></ul><h3 id="语义分析-："><a href="#语义分析-：" class="headerlink" title="语义分析 ："></a>语义分析 ：</h3><p>仔细分析该代码中的语义， Runnable 接口只有一个 run 方法的定义：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即制定了一种做事情的方案（其实就是一个函数）：  </p><ul><li>无参数：不需要任何条件即可执行该方案。</li><li>无返回值：该方案不产生任何结果。</li><li>代码块（方法体）：该方案的具体执行步骤 。</li></ul><p>同样在Lambda语法中更加简单：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span> ‐<span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多线程任务执行！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>前面的一对小括号即 run 方法的参数（无），代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；<ul><li>后面的输出语句即业务逻辑代码 。</li></ul></li></ul><h2 id="Lambda标准格式"><a href="#Lambda标准格式" class="headerlink" title="Lambda标准格式"></a>Lambda标准格式</h2><p>Lambda省去面向对象的条条框框，格式由<strong>3</strong>个部分组成：  </p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的<strong>标准格式</strong>为：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">(</span>参数类型 参数名称<span class="token punctuation">)</span> ‐<span class="token operator">></span> <span class="token punctuation">{</span> 代码语句 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式说明：  </p><ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li>-&gt; 是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。  </li></ul><h2 id="Lambda省略格式"><a href="#Lambda省略格式" class="headerlink" title="Lambda省略格式"></a>Lambda省略格式</h2><h3 id="可推导即可省略"><a href="#可推导即可省略" class="headerlink" title="可推导即可省略"></a>可推导即可省略</h3><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如例1还可以使用Lambda的省略写法：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 优化前：</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> ‐<span class="token operator">></span> <span class="token punctuation">{</span>        a <span class="token operator">+</span> b    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 优化后：</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> ‐<span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li><p>小括号内参数的类型可以省略；  </p></li><li><p>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</p></li><li><p>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。  </p></li></ol><h2 id="Lambda的使用前提"><a href="#Lambda的使用前提" class="headerlink" title="Lambda的使用前提"></a>Lambda的使用前提</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：  </p><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br> 无论是JDK内置的 Runnable 、 Comparator 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。<br> 也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。  </li></ol><blockquote><p>备注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程(54)</title>
      <link href="/posts/aec47cfa.html"/>
      <url>/posts/aec47cfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h2><p>C/S结构 ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.png" alt="C/S结构"></p><p>B/S结构 ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等 。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02.png" alt="B/S结构"></p><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序 。</p><h2 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h2><ul><li>网络通信协议：通信协议是对计算机必须遵守的规则，只有遵守这些规则，计算机之间才能进行通信。这就<br>  好比在道路中行驶的汽车一定要遵守交通规则一样，协议中对数据的传输格式、传输速率、传输步骤等做了<br>  统一规定，通信双方必须同时遵守，最终完成数据交换。  </li><li>TCP/IP协议： 传输控制协议/因特网互联协议(Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。  </li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><h2 id="协议分类"><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h2><p>通信的协议还是比较复杂的,<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。  </p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：  </p><ul><li><p>TCP：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，<br>  在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><ul><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可<br>  靠。</p><ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。  </li></ul><p>  <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%BA%A4%E4%BA%92%E6%A8%A1%E6%8B%9F%E5%9B%BE.png"></p></li><li><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等 。</p></li></ul></li><li><p>UDP：用户数据报协议(User Datagram Protocol)。UDP协议是一个<strong>面向无连接</strong>的协议。传输数据时，不需要建立连接，不管对方端服务是否启动，直接将数据、数据源和目的地都封装在数据包中，直接发送。每个数据包的大小限制在64k以内。它是不可靠协议，因为无连接，所以传输速度快，但是容易丢失数据。日常应用中,例如视频会议、QQ聊天等。  </p></li></ul><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>协议：计算机网络通信必须遵守的规则。</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话码”。  </p><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成 a.b.c.d 的形式，例如 192.168.65.100 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>  有资料显示，全球IPv4地址在2011年2月分配完毕。<br>  为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 ，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><ul><li><p>查看本机IP地址，在控制台输入：  </p><pre class="line-numbers language-dos"><code class="language-dos">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查网络是否连通，在控制台输入：  </p><pre class="line-numbers language-dos"><code class="language-dos">ping 空格 IP地址例: ping 220.181.57.216<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <strong>特殊的IP地址</strong></p><p>  本机IP地址： <strong>127.0.0.1</strong> 、 <strong>localhost</strong> 。</p></li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？<br>如果说IP<strong>地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。  </p><ul><li>端口号：用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。  </li></ul><p>利用 <strong>协议</strong> + <strong>IP地址</strong> + <strong>端口号</strong> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。  </p><h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端(Server)。</p><p><strong>两端通信时步骤：</strong>  </p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。  </li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端： <strong>java.net.Socket</strong> 类表示。创建 Socket 对象，向服务端发出连接请求，服务端响应请求，两者建<br> 立连接开始通信。</li><li>服务端： <strong>java.net.ServerSocket</strong> 类表示。创建 ServerSocket 对象，相当于开启一个服务，并等待客户端<br> 的连接。    </li></ol><h3 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h3><p><strong>Socket</strong> 类：该类实现客户端套接字，套接字指的是<strong>两台设备之间通讯的端点。</strong>即：包含了IP地址和端口号的网络单位。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p><strong>public Socket(String host, int port)</strong> : 创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><blockquote><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本<br>地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。  </p></blockquote><p>构造举例，代码如下：  </p><pre class="line-numbers language-java"><code class="language-java">Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><strong>public InputStream getInputStream()</strong> ： 返回此套接字的输入流。  <ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。  </li></ul></li><li><strong>public OutputStream getOutputStream()</strong>  ：返回此套接字的输出流。  <ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。   </li></ul></li><li><strong>public void close()</strong> ：关闭此套接字。  <ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。  </li></ul></li><li><strong>public void shutdownOutput()</strong>  ：禁用此套接字的输出流。<ul><li>任何先前写出的数据将被发送，随后终止输出流。  </li></ul></li></ul><h3 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h3><p><code>ServerSocket</code> 类：这个类实现了服务器套接字，该对象等待通过网络的请求。  </p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><strong>public ServerSocket(int port)</strong> ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。  </li></ul><p>构造举例，代码如下：  </p><pre class="line-numbers language-java"><code class="language-java">ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><strong>public Socket accept()</strong> ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI(53)</title>
      <link href="/posts/e49f6a03.html"/>
      <url>/posts/e49f6a03.html</url>
      
        <content type="html"><![CDATA[<h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><ol><li>GUI：图形用户编程。</li><li>GUI核心技术：Swing/AWT。</li><li>缺点：<pre><code> 界面不美观且需要jre环境。</code></pre></li><li>为什么学GUI？<ul><li>可以自己实现一些小工具。</li><li>工作时候可能会维护到Swing界面，概率极小。</li><li>了解MVC架构，了解监听事件。</li></ul></li></ol><h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/swing%E7%BB%84%E4%BB%B6.png" alt="GUI继承结构图"></p><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>Java使用AWT和Swing类完成图形用户界面编程，AWT的全称是抽象窗口工具集，它是Sun最早提供的GUI库，提供了一些基本的功能，但功能比较有限，所以后来又提供了Swing库，Swing库替代了绝大部分的AWT组件，但需要使用AWT的事件处理机制通过使用AWT和Swing提供的图形界面组件库，Java的图形界面编程可以变得比较简单，程序只要依次创建所需的图形组件，并以合适的方式将这些组件组织在一起，就可以开发出不错的用户界面。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>任何窗口都可被分解成一个空的容器，容器里盛装了大量的基本组件，通过设置这些基本组件的大小，位置等属性，就可以将该空的容器和基本的组件组成一个整体的窗口。</p><p>AWT提供了两种主要的容器类型：</p><h4 id="Frame-窗口"><a href="#Frame-窗口" class="headerlink" title="Frame(窗口)"></a>Frame(窗口)</h4><p>Frame：它是一个容器，允许程序员把其他组件添加到它里面，把它们组织起来，并把它们呈现给用户。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个Frame对象</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见性</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口大小</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置背景颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 弹出的初始位置</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置固定大小</span>        frame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自适应大小</span>        frame<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Panel-面板"><a href="#Panel-面板" class="headerlink" title="Panel(面板)"></a>Panel(面板)</h4><p>Panel：可作为容器容纳其他组件，但不能独立存在，必须被添加到其它的容器中。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建界面</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置界面的坐标/宽高</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置界面背景色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见度</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置界面布局</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Panel面板对象</span>        Panel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置panel面板的坐标/宽高（相对于界面的坐标）</span>        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置panel面板的背景颜色</span>        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在frame界面中添加panel面板</span>        <span class="token comment" spellcheck="true">// 由于这种模式需要重写很多方法所以可以使用适配器模式来绑定关闭事件</span>        <span class="token comment" spellcheck="true">// 添加关闭close事件</span>        <span class="token comment" spellcheck="true">// 监听事件，监听窗口关闭事件 System.exit(0);</span>        <span class="token comment" spellcheck="true">// 以下方法是使用适配器模式来绑定关闭事件的</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 窗口点击关闭时候需要做的事情</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 结束程序</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Window：可独立存在的顶级窗口。"><a href="#Window：可独立存在的顶级窗口。" class="headerlink" title="Window：可独立存在的顶级窗口。"></a>Window：可独立存在的顶级窗口。</h4><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="TextField-文本框"><a href="#TextField-文本框" class="headerlink" title="TextField(文本框)"></a>TextField(文本框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyActIonLl03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyActIonLl03</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyActIonLl03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 窗口可见度</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口颜色</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 流式布局</span>        <span class="token comment" spellcheck="true">// 关闭窗口事件</span>        <span class="token function">windowClose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个文本框</span>        TextField text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置文本框中的字体</span>        text<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置用户输入内容替换为*号</span>        text<span class="token punctuation">.</span><span class="token function">setEchoChar</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将文本框添加到窗口中</span>        <span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 让窗口内的组件自适应大小(注：需要在组件添加到窗口后最后加自适应大小)</span>        <span class="token comment" spellcheck="true">// pack();</span>        <span class="token comment" spellcheck="true">// 监听文本框事件</span>        text<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyActIonLl04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭窗口事件</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">windowClose</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 文本监听事件</span><span class="token keyword">class</span> <span class="token class-name">MyActIonLl04</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回事件源对象(需要转型)</span>        TextField textField <span class="token operator">=</span> <span class="token punctuation">(</span>TextField<span class="token punctuation">)</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印文本框的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>textField<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每次一回车就清空文本框中的值</span>        textField<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Paint-画笔"><a href="#Paint-画笔" class="headerlink" title="Paint(画笔)"></a>Paint(画笔)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPaint</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建窗口</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 画笔</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置圆的颜色</span>        g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空心圆</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实心圆</span>        g<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空矩形</span>        <span class="token comment" spellcheck="true">// 注：画笔颜色用完还原为最初的颜色</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label(标签)"></a>Label(标签)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置背景颜色</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可见性</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 坐标/尺寸</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭</span>        <span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建标签</span>        Label label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>Java提供了布局管理器来组件在容器中的布局，而不是直接设置组件位置和大小。</p><p>常见的有：</p><h4 id="FlowLayout-流式布局"><a href="#FlowLayout-流式布局" class="headerlink" title="FlowLayout(流式布局)"></a>FlowLayout(流式布局)</h4><p>FlowLayout：组件向某个方向排列，遇到边界就折回，从头开始排列。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 流式布局</span>        <span class="token comment" spellcheck="true">// 创建窗口</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置大小</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见度</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置流式布局</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建组件</span>        Button button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口添加组件</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button2<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button3<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button4<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BorderLayout-东西南北中布局"><a href="#BorderLayout-东西南北中布局" class="headerlink" title="BorderLayout(东西南北中布局)"></a>BorderLayout(东西南北中布局)</h4><p>BorderLayout：将容器分为东，西，南，北，中五个区域普通组件被放置在这五个区域的任意一个中。注：这个布局不需要设置布局，只需添加组件时设置相应位置即可。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 东南西北中布局</span>        <span class="token comment" spellcheck="true">// 创建窗口</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置大小</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见度</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置流式布局</span>        <span class="token comment" spellcheck="true">// frame.setLayout(new BroderLayout());</span>        <span class="token comment" spellcheck="true">// 创建组件</span>        Button east <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button west <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"west"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button south <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"south"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button north <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"north"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button center <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"center"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口添加组件</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>east<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>west<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>south<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>north<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>center<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GridLayout-表格布局"><a href="#GridLayout-表格布局" class="headerlink" title="GridLayout(表格布局)"></a>GridLayout(表格布局)</h4><p>GridLayout：将容器分割成纵横线分隔的网格，每个网格所占的区域大小相同。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 表格布局</span>        <span class="token comment" spellcheck="true">// 创建窗口</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置大小</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置可见度</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置表格布局(3行2列布局)</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建组件</span>        Button button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button button6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"button6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口添加组件</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button2<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button3<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button4<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button5<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局小结：AWT的布局管理与前端布局类似，唯一区别就是，面板叠面板，但是根据界面样式，通过合理规划使用相应的布局管理嵌套做出来。</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h4><p>Frame和组件本身没有事件处理的能力，必须由特定对象（事件监听器）来处理。<br> 实现事件处理机制的步骤：</p><ol><li>实现事件监听类，必须实现XxxListener接口。</li><li>创建普通组件(事件源)，创建事件监听对象。</li><li>调用addXxxListener()方法，将事件监听器注册给普通组件，当事件源上发生指定的事件时，AWT会触发事件监听器，由事件监听器调用相应的方法(事件处理器)来处理事件，事件源上发生的事件会作为参数传入事件处理器。</li></ol><h4 id="鼠标监听"><a href="#鼠标监听" class="headerlink" title="鼠标监听"></a>鼠标监听</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 鼠标监听</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyPaint02</span><span class="token punctuation">(</span><span class="token string">"画画"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPaint02</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  ArrayList mouseXY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 画画需要监听鼠标当前的实时位置</span>    <span class="token keyword">public</span> <span class="token function">MyPaint02</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 鼠标监听，针对的是这个窗口的鼠标</span>        <span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 鼠标监听器</span>        <span class="token comment" spellcheck="true">// 读取鼠标中按下的点</span>        mouseXY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建画笔</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 画画，需要监听鼠标事件</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator integer <span class="token operator">=</span> mouseXY<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将迭代器中的对象转换成Point对象</span>            Point point <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span>integer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将获取到的值通过画笔画出来</span>            g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>point<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将鼠标按下的x/y坐标存储到集合</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMouseXY</span><span class="token punctuation">(</span>Point point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mouseXY<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 鼠标事件成员内部类</span>    <span class="token comment" spellcheck="true">// 鼠标抽象适配器类</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyMouseAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">MouseAdapter</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重写鼠标按下事件</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取事件源对象</span>            MyPaint02 frame <span class="token operator">=</span> <span class="token punctuation">(</span>MyPaint02<span class="token punctuation">)</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取鼠标源对象的x y坐标</span>            <span class="token function">getMouseXY</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注：Point对象参数要的是鼠标按下的对象不是frame对象</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"y:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每次点击鼠标都要重画一次</span>            frame<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 关闭窗口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="窗口监听"><a href="#窗口监听" class="headerlink" title="窗口监听"></a>窗口监听</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest09</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span><span class="token string">"窗口事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyWindow</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyWindow</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一种绑定窗口事件方法</span>        <span class="token comment" spellcheck="true">// addWindowListener(new MyWindowListener());</span>        <span class="token comment" spellcheck="true">// 推荐使用第二种绑定窗口事件方法：匿名内部类</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下只模拟窗口几种窗口事件</span>            <span class="token comment" spellcheck="true">// 当窗口激活触发事件</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowActivated</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前窗口已激活"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 当窗口关闭时触发事件</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前窗口已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// System.exit(0);</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第一种绑定窗口事件方法：成员内部类</span>    <span class="token comment" spellcheck="true">// 抽象类适配器</span><span class="token comment" spellcheck="true">/*    private class MyWindowListener extends WindowAdapter {        @Override        public void windowClosing(WindowEvent e) {            System.exit(0);        }    }*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 鼠标事件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">KeyBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">KeyBoard</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">KeyBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 鼠标按下事件</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取键盘上相应的码</span>                <span class="token keyword">int</span> keyboard <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前用户按下的码</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyboard <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您按下了上键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习：简易计算器"><a href="#练习：简易计算器" class="headerlink" title="练习：简易计算器"></a>练习：简易计算器</h4><h5 id="面向过程：实现简易计算器计算"><a href="#面向过程：实现简易计算器计算" class="headerlink" title="面向过程：实现简易计算器计算"></a>面向过程：实现简易计算器计算</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现两个按钮监听共同一个事件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"练习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 坐标/窗口大小</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 布局</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可见</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭</span>        <span class="token function">windowClosing02</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事件绑定处理</span>        Button btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn1<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事件绑定</span>        btn1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyActIonLl02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyActIonLl02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置按钮的标识</span>        <span class="token comment" spellcheck="true">// 按钮标识相当于html中的id与class具有一定的唯一性</span>        btn1<span class="token punctuation">.</span><span class="token function">setActionCommand</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">setActionCommand</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">windowClosing02</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 新建一个button事件的实现类</span><span class="token keyword">class</span> <span class="token class-name">MyActIonLl02</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String btn1 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String btn2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getActionCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btn1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"btn1被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>btn1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"btn2被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优化为：面向对象程序思想"><a href="#优化为：面向对象程序思想" class="headerlink" title="优化为：面向对象程序思想"></a>优化为：面向对象程序思想</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 优化为面向对象思路</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建计算器对象</span>        <span class="token keyword">new</span> <span class="token class-name">Calculator01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 计算器</span><span class="token keyword">class</span> <span class="token class-name">Calculator01</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性</span>    TextField textField1<span class="token punctuation">,</span>textField2<span class="token punctuation">,</span>textField3<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置窗口可见性</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置流式布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口关闭</span>        <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建三个文本框</span>        textField1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textField2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textField3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建标签(类似于前端的p标签专门添加文字的)</span>        Label label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建按钮</span>        Button button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给按钮创建监听事件</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyActIonLl06</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组件添加到窗口</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口自适应大小(注：需要在组件添加到窗口后最后加自适应大小)</span>        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 监听器</span><span class="token keyword">class</span> <span class="token class-name">MyActIonLl06</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前监听对象（使用OOP组合设计模式）</span>    Calculator01 calculator01 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyActIonLl06</span><span class="token punctuation">(</span>Calculator01 calculator01<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前计算器的对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>calculator01 <span class="token operator">=</span> calculator01<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将计算结果返回给第三个文本框</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>calculator01<span class="token punctuation">.</span>textField1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>calculator01<span class="token punctuation">.</span>textField2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator01<span class="token punctuation">.</span>textField3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>i1<span class="token operator">+</span>i2<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将文本框值清空</span>        calculator01<span class="token punctuation">.</span>textField1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator01<span class="token punctuation">.</span>textField2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优化为：内部类"><a href="#优化为：内部类" class="headerlink" title="优化为：内部类"></a>优化为：内部类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在面向对象基础上在进行优化</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreameTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建计算器对象</span>        <span class="token keyword">new</span> <span class="token class-name">Calculator01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 计算器</span><span class="token keyword">class</span> <span class="token class-name">Calculator02</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性</span>    TextField textField1<span class="token punctuation">,</span>textField2<span class="token punctuation">,</span>textField3<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置窗口可见性</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置流式布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口关闭</span>        <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建三个文本框</span>        textField1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textField2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textField3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建标签(类似于前端的p标签专门添加文字的)</span>        Label label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建按钮</span>        Button button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给按钮创建监听事件</span>        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyActIonLl07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组件添加到窗口</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textField3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口自适应大小(注：需要在组件添加到窗口后最后加自适应大小)</span>        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监听器</span>    <span class="token comment" spellcheck="true">// 内部类最大的优点就是畅通无阻访问外部类的属性和方法</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyActIonLl07</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将计算结果返回给第三个文本框</span>            <span class="token keyword">int</span> i1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>textField1<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>textField2<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            textField3<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>i1<span class="token operator">+</span>i2<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将文本框值清空</span>            textField1<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            textField2<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2><h3 id="概述：-2"><a href="#概述：-2" class="headerlink" title="概述："></a>概述：</h3><p>​    为了解决AWT组件的缺陷，特别是跨平台的问题，在JDK1.2版本后提供了新的Swing包，javax.swing提供，Swing是在AWT的基础上构建的一套新的图形界面组件，所有组建均是由java书写，具有良好的跨平台性，由于Swing没有使用本地方法实现图形功能，因此提出把Swing组件称之为轻量级组件。<br>注意：Swing组建是在AWT基础上建立的，而不是替代AWT的，AWT是根基，Swing是发展。</p><h3 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h3><p>任何窗口都可被分解成一个空的容器，容器里盛装了大量的基本组件，通过设置这些基本组件的大小，位置等属性，就可以将该空的容器和基本的组件组成一个整体的窗口。</p><p>Swing提供了两种主要的容器类型：</p><h4 id="JFrame-窗口"><a href="#JFrame-窗口" class="headerlink" title="JFrame(窗口)"></a>JFrame(窗口)</h4><ol><li><p>JFrame和Frame的区别：</p><ol><li><p>JFrame与Frame关闭窗口的方式不同：</p><ul><li>DO_NOTHING_ON_CLOSE（在 WindowConstants 中定义）：不执行任何操作；要求程序在已注册的WindowListener 对象的 windowClosing 方法中处理该操作。</li><li>HIDE_ON_CLOSE（在 WindowConstants 中定义）：调用任意已注册的 WindowListener 对象后自动隐藏该窗体。</li><li>DISPOSE_ON_CLOSE（在 WindowConstants 中定义）：调用任意已注册 WindowListener 的对象后自动隐藏并释放该窗体。</li><li>EXIT_ON_CLOSE（在 JFrame 中定义）：使用 System exit 方法退出应用程序。仅在应用程序中使用。</li></ul></li><li><p>Frame设置颜色与JFrame不同：</p><ul><li><p>Frame：直接设置颜色。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>JFrame：需要先获取当前窗口对象才可以设置颜色。</p><pre class="line-numbers language-java"><code class="language-java">        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取窗口对象</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置颜色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol></li><li><p>JFrame创建方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置JFrame窗口可见性</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置JFrame坐标/宽高</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JFrame为顶级窗口，所以不可以直接设置背景颜色，需要获取此窗口的对象才能设置</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取窗口对象</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置窗口颜色</span>        <span class="token comment" spellcheck="true">// 设置固定大小</span>        <span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置JFrame的关闭事件</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="JPanel-面板"><a href="#JPanel-面板" class="headerlink" title="JPanel(面板)"></a>JPanel(面板)</h4><p>JPanel：可作为容器容纳其他组件，但不能独立存在，必须被添加到其它的容器中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJPanel</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口可见</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 坐标/大小</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取窗口对象</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置颜色</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 东南西北布局</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建panel1面板</span>        JPanel jPanel1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        jPanel1<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口布局的北边</span>        <span class="token function">add</span><span class="token punctuation">(</span>jPanel1<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建panel2面板</span>        JPanel jPanel2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        jPanel2<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口布局的北边</span>        <span class="token function">add</span><span class="token punctuation">(</span>jPanel2<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建panel3面板</span>        JPanel jPanel3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        jPanel3<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口布局的北边</span>        <span class="token function">add</span><span class="token punctuation">(</span>jPanel3<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建panel4面板</span>        JPanel jPanel4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        jPanel4<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口布局的北边</span>        <span class="token function">add</span><span class="token punctuation">(</span>jPanel4<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建panel4面板</span>        JPanel jPanel5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        jPanel5<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>MAGENTA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口布局的北边</span>        <span class="token function">add</span><span class="token punctuation">(</span>jPanel5<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JDialog-弹窗"><a href="#JDialog-弹窗" class="headerlink" title="JDialog(弹窗)"></a>JDialog(弹窗)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame02</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame02</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 坐标/尺寸</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可见性</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 窗口关闭</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取窗口对象</span>        Container jFrame <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置颜色</span>        jFrame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绝对布局</span>        jFrame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建按钮</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"点我弹出弹窗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置按钮尺寸</span>        btn<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按钮添加事件</span>        btn<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 监听器</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点击按钮事件</span>                <span class="token comment" spellcheck="true">// 弹窗</span>                <span class="token keyword">new</span> <span class="token class-name">MyJDialog01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加按钮</span>        jFrame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyJDialog01</span> <span class="token keyword">extends</span> <span class="token class-name">JDialog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJDialog01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 弹窗可见性</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 坐标/尺寸</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回此对话框的contentPane对象。</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 颜色</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加标签</span>        JLabel jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是一个弹窗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jLabel<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置标签中的文字居中</span>        <span class="token comment" spellcheck="true">// 添加到弹窗中</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JScrollPane-滚动面板"><a href="#JScrollPane-滚动面板" class="headerlink" title="JScrollPane(滚动面板)"></a>JScrollPane(滚动面板)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyFrame05</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyFrame05</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个文本域</span>        TextArea textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个可滚动视图面板</span>        JScrollPane pane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>pane<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加btn按钮</span>        JButton btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到面板</span>        <span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h3><h4 id="JLabel-标签"><a href="#JLabel-标签" class="headerlink" title="JLabel(标签)"></a>JLabel(标签)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame03</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame03</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建JLabel标签</span>        JLabel jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"这是一个JLabel标签"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 居中文字</span>        jLabel<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口中</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置窗口可见度</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ICO-图片"><a href="#ICO-图片" class="headerlink" title="ICO(图片)"></a>ICO(图片)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyFrame04</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyFrame04</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建ICO图片</span>        JLabel jLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"ico图像"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从本类中获取相应的资源文件</span>        URL url <span class="token operator">=</span> MyFrame04<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"ico5.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建imageIcon并将url传进去</span>        ImageIcon imageIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// jLabel设置图片</span>        jLabel<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>imageIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 居中</span>        jLabel<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到窗口</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置窗口可见度</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="textArea-文本域"><a href="#textArea-文本域" class="headerlink" title="textArea(文本域)"></a>textArea(文本域)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyFrame06</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyFrame06</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        TextArea textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textArea<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"这是一个文本域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置窗口可见度</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TextArea-文本框"><a href="#TextArea-文本框" class="headerlink" title="TextArea(文本框)"></a>TextArea(文本框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame10</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame10</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文本框</span>        TextArea textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以配合滚动面板配合使用</span>        JScrollPane scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JPasswordField-密码框"><a href="#JPasswordField-密码框" class="headerlink" title="JPasswordField(密码框)"></a>JPasswordField(密码框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame11</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame11</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 密码框</span>        JPasswordField jPasswordField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPasswordField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jPasswordField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Button-按钮"><a href="#Button-按钮" class="headerlink" title="Button(按钮)"></a>Button(按钮)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame04</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame04</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取一个图片</span>        URL url <span class="token operator">=</span> MyJFrame04<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"ico5.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将一个图片转换为ico</span>        ImageIcon icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"普通按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置鼠标停留提示</span>        btn1<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"这是一个普通按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JButton btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"图片按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">setToolTipText</span><span class="token punctuation">(</span><span class="token string">"这是一个图片按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置鼠标停留提示</span>        <span class="token comment" spellcheck="true">// 将btn2按钮设置成图片按钮</span>        btn2<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置窗口可见度</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JRadioButton-单选框"><a href="#JRadioButton-单选框" class="headerlink" title="JRadioButton(单选框)"></a>JRadioButton(单选框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame05</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame05</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 单选框按钮</span>        JRadioButton jRadioButton1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"单选按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JRadioButton jRadioButton2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JRadioButton</span><span class="token punctuation">(</span><span class="token string">"单选按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由于单选按钮只能选择一个所以需要选项分组</span>        ButtonGroup buttonGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jRadioButton1<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jRadioButton2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jRadioButton1<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jRadioButton2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置窗口可见度</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JCheckBox-多选框"><a href="#JCheckBox-多选框" class="headerlink" title="JCheckBox(多选框)"></a>JCheckBox(多选框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame06</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame06</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复选框</span>        JCheckBox jCheckBox1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"复选框1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JCheckBox jCheckBox2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"复选框1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jCheckBox1<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jCheckBox2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JComboBox-下拉框"><a href="#JComboBox-下拉框" class="headerlink" title="JComboBox(下拉框)"></a>JComboBox(下拉框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame08</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame08</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建下拉框</span>        JComboBox jComboBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComboBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"正在热映.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComboBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"即将上映.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComboBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"已下架.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jComboBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jComboBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JList-列表框"><a href="#JList-列表框" class="headerlink" title="JList(列表框)"></a>JList(列表框)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyJFrame09</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyJFrame09</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token keyword">throws</span> HeadlessException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建列表框</span>        <span class="token comment" spellcheck="true">// 生成列表内容</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建列表框</span>        JList jList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        Container container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布局管理器-1"><a href="#布局管理器-1" class="headerlink" title="布局管理器"></a>布局管理器</h3><p>布局管理与AWT相似所以不在进行代码示例了。</p><h4 id="FlowLayout-流式布局-1"><a href="#FlowLayout-流式布局-1" class="headerlink" title="FlowLayout(流式布局)"></a>FlowLayout(流式布局)</h4><p>FlowLayout：组件向某个方向排列，遇到边界就折回，从头开始排列。</p><h4 id="BorderLayout-东西南北中布局-1"><a href="#BorderLayout-东西南北中布局-1" class="headerlink" title="BorderLayout(东西南北中布局)"></a>BorderLayout(东西南北中布局)</h4><p>BorderLayout：将容器分为东，西，南，北，中五个区域普通组件被放置在这五个区域的任意一个中。注：这个布局不需要设置布局，只需添加组件时设置相应位置即可。</p><h4 id="GridLayout-表格布局-1"><a href="#GridLayout-表格布局-1" class="headerlink" title="GridLayout(表格布局)"></a>GridLayout(表格布局)</h4><p>GridLayout：将容器分割成纵横线分隔的网格，每个网格所占的区域大小相同。</p><h3 id="事件处理-1"><a href="#事件处理-1" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="概述：-3"><a href="#概述：-3" class="headerlink" title="概述："></a>概述：</h4><p>Frame和组件本身没有事件处理的能力，必须由特定对象（事件监听器）来处理。<br> 实现事件处理机制的步骤：</p><ol><li>实现事件监听类，必须实现XxxListener接口。</li><li>创建普通组件(事件源)，创建事件监听对象。</li><li>调用addXxxListener()方法，将事件监听器注册给普通组件，当事件源上发生指定的事件时，AWT会触发事件监听器，由事件监听器调用相应的方法(事件处理器)来处理事件，事件源上发生的事件会作为参数传入事件处理器。</li></ol><h4 id="鼠标监听-1"><a href="#鼠标监听-1" class="headerlink" title="鼠标监听"></a>鼠标监听</h4><h4 id="窗口监听-1"><a href="#窗口监听-1" class="headerlink" title="窗口监听"></a>窗口监听</h4><h4 id="键盘监听-1"><a href="#键盘监听-1" class="headerlink" title="键盘监听"></a>键盘监听</h4><h2 id="GUI小结"><a href="#GUI小结" class="headerlink" title="GUI小结"></a>GUI小结</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/GUI.png" alt="GUI"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解(52)</title>
      <link href="/posts/3a0255f6.html"/>
      <url>/posts/3a0255f6.html</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ol><li><p>概念:说明程序的。给计算机看的</p></li><li><p>注释:用文字描述程序的。给程序员看的<br> 定义：注解( Annotation)，也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性,与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面,用来对这些元秦进行说明，注释。</p></li><li><p>概念描述：</p><ul><li><p>JDK：1.5之后的新特性</p></li><li><p>为了解释程序的</p></li><li><p>使用注解：@注解名称</p></li></ul></li><li><p>作用分类：</p><ul><li>编写文档：通过代码里标识的注解生成文档【生成html文档】</li><li>代码分析：通过代码里标识的注释对代码进行分析【使用反射】</li><li>编译检查：通过代理里的标识的注解让编译器能够实现基本的编译检查【Override】</li></ul></li><li><p>JDK中预定义的一些注解：</p></li></ol><ul><li>@Override：检测被该注解标注的方法是否继承自父类(接口)的</li><li>@Deprecated：该注解标注的内容，表示已过时</li><li>@SuppressWarnings(“all”)：压制警告(一般压制警告会在类上面声名，并且参数一般情况下是all)</li><li>@FunctionalInterface：该注解用于定义接口，用于检测该接口是否只有一个抽象方法。</li></ul><ol start="6"><li><p>自定义注解：</p><ul><li><p>格式(元注解)：<br>  public @interface 注解名称() {</p><p>  ​    属性列表;</p><p>  }</p></li><li><p>注：注解本质上就是一个接口，<strong>该接口默认继承的是</strong>Annotation接口<br>  public interface MyAnno extends java.lang.annotation.Annotation {}</p></li><li><p>属性：接口中的抽象方法</p><ol><li>(要求)属性值的返回类型：<ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>以上类型的数组</li></ul></li><li>定义了属性，在使用时需要给属性赋值<ul><li>如果定义属性时，使用default关键子给属性默认初始化值，则使用注解时，可以<strong>不进行属性的赋值</strong>。</li><li>如果只有一个属性需要赋值,并且属性的名称是 value，则value可以省略，直接定义值即可。</li><li>数组赋值时,值使用{}包裹。如果数组中只有一个值,则{}省略。</li></ul></li></ol></li><li><p>元注解：用于描述注解的注解</p><ol><li>Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention( RetentionPolicy. RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li>@ Documented：描述注解是否被抽取到API文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul></li></ol></li></ul></li><li><p>在程序使用(解析)注解：</p><ul><li><p>获取注解定义的位置对象(Class,Method,Field)</p></li><li><p>获取指定的注解</p><ul><li><p>getAnnotation(Class)<br>  其实就是在内存中生成了一个该注解接口的子类实现对象</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Pro</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"javaee.day12.AnnotationsExercise.Dome01"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"show"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>调用注解中的抽象方法获取配置的属性值</p></li></ul></li><li><p>小结：</p><ul><li>以后大多数时候，我们会使用注解，而不是自定义注解</li><li>注解的使用：<ol><li>编译器</li><li>给解析程序用(将要测试的程序使用)</li></ol></li><li>注解不是程序的一部分，可以理解为注解就是一个标签</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射(51)</title>
      <link href="/posts/8f6e4235.html"/>
      <url>/posts/8f6e4235.html</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote><p>概述：JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。<br>要想解剖一个类，必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象。</p></blockquote><p>例如：反射就是把java类中的各种成分映射成一个个的Java对象<br>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。（其实：一个类中这些成员方法、构造方法、在加入类中都有一个类来描述）如图是类的正常加载过程：反射的原理在与class对象。熟悉一下加载的时候：Class对象的由来是将class文件读入内存，并为之创建一个Class对象。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%8F%8D%E5%B0%84.png" alt="java反射"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程(50)</title>
      <link href="/posts/d48430c3.html"/>
      <url>/posts/d48430c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>线程指进程中的一个执行场景，也就是执行流程，那么进程和线程有什么区别呢?</p><ul><li>每个进程是一个应用程序，都有独立的内存空间</li><li>同一个进程中的线程共享其进程中的内存和资源</li><li>(共享的内存是堆内存和方法区内存，栈内存不共享，每个线程有自己属于自己栈内存)</li></ul></li><li><p>什么是进程？</p><p> 一个进程对应一个应用程序。例如：在 Windows操作系统启动Word就表示启动了一个进程。在java的开发环境下启动JVM，就表示启动了一个进程。现代的计算机都是支持多进程的，在同一个操作系统中，可以同时启动多个进程。</p></li><li><p>多进程有什么用？</p><ul><li>单进程计算机只能做一件事情。例：玩电脑，一边玩游戏(游戏进程)一边听音乐(音乐进程)。</li><li>对于单核计算机来讲，在同一个时间点上，游戏进程和音乐进程是同时在运行吗?不是。因为计算机的CPU只能在某个时间点上做一件事。计算机能以极快的速度来回切换线程，使得用户认为计算机运行两个线程。</li></ul></li><li><p>什么是线程？</p><ul><li>线程是一个进程中的执行场景。一个进程可以启动多个线程。<br>  <img src="https%EF%BC%9A//xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" alt="java多线程"></li></ul></li><li><p>多线程有什么作用?</p><ul><li>多线程不是为了提高执行速度，而是提高应用程序的使用率。</li><li>线程和线程共享“堆内存和方法区内存”，栈内存是独立的，一个线程个栈。<br>  <img src="https%EF%BC%9A//xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="java线程生命周期"></li></ul></li><li><p>注：在此之前学过的都是单线程的程序！</p></li><li><p>java线程的创建与启动：</p><ul><li><p>继承Thread类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继承Thread类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多态父类型引用指向子类型对象</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processor-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现Runnable接口(推荐使用)</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实现Runnable接口(推荐使用)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processor2-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="线程的调度与控制"><a href="#线程的调度与控制" class="headerlink" title="线程的调度与控制"></a>线程的调度与控制</h2><p>通常我们的计算机只有一个CPU，CPU在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。在单CPU的机器上线程不是并行运行的，只有在多个CPU上线程才可以并行运行。Java虚拟机要负责线程的调度，取得CPU的使用权目前有两种调度模型：分时调度模型和抢占式调度模型，Java使用抢占式调度模型。分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片抢占式调度模型：优先让优先级高的线程使用CPU(<strong>优先级高的线程获取的CPU时间片相对多一些</strong>)，<strong>如果线程的优先级相同，那么会随机选择一个</strong>。</p><ul><li><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建线程第二种方式(推荐写法)：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processor2-->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>线程优先级主要分三种：MAX_PRIORITY(最高级);MIN_PRIORITY(最低级);NORM_PRIORITY(标准)默认。注：最高：10、标准：5、最低：1。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程的优先级</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 优先级分为：1-10</span>        <span class="token comment" spellcheck="true">// 最小、标准、最大优先值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --> 1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --> 5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --> 10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认优先级都为5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改前"</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改前"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->6</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程优先级</span>        t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后"</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后"</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --->6</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor4</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程堵塞"><a href="#线程堵塞" class="headerlink" title="线程堵塞"></a>线程堵塞</h2><h3 id="使用sleep-方法堵塞线程"><a href="#使用sleep-方法堵塞线程" class="headerlink" title="使用sleep()方法堵塞线程"></a>使用sleep()方法堵塞线程</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.Thread.sleep(毫秒)</span><span class="token comment" spellcheck="true">// 2.sleep是一个静态方法</span><span class="token comment" spellcheck="true">// 3.该方法的作用是：阻塞当前的线程腾出CPU，让给其他线程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"------>"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建Thread</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor5</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"------>"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="yield-方法让给同一个优先级的线程让位。但是让位时间不固定。"><a href="#yield-方法让给同一个优先级的线程让位。但是让位时间不固定。" class="headerlink" title="yield()方法让给同一个优先级的线程让位。但是让位时间不固定。"></a>yield()方法让给同一个优先级的线程让位。但是让位时间不固定。</h3><p>注：<strong>yield()方法与sleep()方法相同，都是静态方法。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest09</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread09</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Thread09</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是20整数时候，让位给main线程</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-方法合并线程"><a href="#join-方法合并线程" class="headerlink" title="join()方法合并线程"></a>join()方法合并线程</h3><p>注：1.此方法是个成员方法。<br>        2.此方法在哪个线程，就跟哪个线程调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建线程</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重命名线程名称</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动t线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// t线程与主线程合并</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor10</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中断堵塞"><a href="#中断堵塞" class="headerlink" title="中断堵塞"></a>中断堵塞</h2><h3 id="使用interrupt-方法异常中断堵塞"><a href="#使用interrupt-方法异常中断堵塞" class="headerlink" title="使用interrupt()方法异常中断堵塞"></a>使用interrupt()方法异常中断堵塞</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 中断线程睡眠</span><span class="token comment" spellcheck="true">// 让t线程中从堵塞状态中断：使用异常中断线程堵塞</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置线程名称</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程延迟5秒后打断t线程的堵塞</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 终端对t线程的堵塞</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor7</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 注：用异常强制中断睡眠，睡眠以下的语句不会执行！</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正常方法中断堵塞"><a href="#正常方法中断堵塞" class="headerlink" title="正常方法中断堵塞"></a>正常方法中断堵塞</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread08 thread08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread08<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        thread08<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开关</span>        <span class="token comment" spellcheck="true">/*        * 以上程序执行过程：        * 创建线程并命名为t线程        * 主线程睡眠5秒钟，在5S中内CPU时间片均为t线程的,但是t线程每次执行需要1S，所以到最后        * 一秒钟时候，主线程结束堵塞，t线程被主线程关闭.*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Thread08</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声名t线程开关，默认此线程是开启的.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// t</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每次执行延迟1S</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果t线程关闭则直接return</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><blockquote><p>引入：</p><p>异步编程模型</p><p>同步编程模型</p><p>例：t1和t2线程：</p><p>异步编程模型：t1线程执行t1的,t2线程执行t2的,两个线程之间谁也不等谁。</p><p>同步编程模型：t1线程和七线程执行,当t线程必须等t线程执行结束之后,线程才能执行,这是同步编程模型。</p><p>什么时候要同步呢?为什么要引入线程同步呢?</p><p>1.为了数据的安全，尽管应用程序的使用率降低，但是为了保证数据是安全的，必须加入线程同步机制</p><p>线程同步机制使程序变成了(等同)单线程。</p><p>2.什么条件下要使用线程同步?</p><p>第一：必须是多线程环境</p><p>第二：多线程环境共享同一个数据</p><p>第三：共享的数据涉及到修改操作</p><p>以下程序演示取款例子。</p><p>多线程同时对同一个账户进行取款操作，会出现什么问题?</p><p>答：会出现余额数据没有及时更新而导致数据不安全.</p></blockquote><h3 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest11</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个对象</span>        Account account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Porcessor</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Porcessor</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 延迟执行t2线程</span><span class="token comment" spellcheck="true">/*        try {            Thread.sleep(1000);        } catch (InterruptedException e) {            e.printStackTrace();        }*/</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 取款流程</span><span class="token keyword">class</span> <span class="token class-name">Porcessor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建对象</span>    Account account<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">Porcessor</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取款1000.0成功，余额："</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象账户</span><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 账户名称</span>    <span class="token keyword">private</span> String actno<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 账户余额</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span>String actno<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setActno</span><span class="token punctuation">(</span>String actno<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对外提供一个取款方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把需要同步的代码，放到同步语句块中</span>        <span class="token comment" spellcheck="true">// 写法一</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 使用synchronized关键字将当前对象(this)使用对象锁</span>            <span class="token keyword">double</span> after <span class="token operator">=</span> balance <span class="token operator">-</span> money<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 延迟</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 更新余额</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 写法二</span>    <span class="token comment" spellcheck="true">// 把需要同步的代码，放到取款方法中</span><span class="token comment" spellcheck="true">/*    public synchronized void withdraw(double money) {       // 使用synchronized关键字将当前对象(this)使用对象锁        double after = balance - money;        // 延迟        try {            Thread.sleep(1000);        } catch (InterruptedException e) {            e.printStackTrace();        }        // 更新余额        this.setBalance(after);    }*/</span>    <span class="token comment" spellcheck="true">/*以上两种方法哪种更好？    * 第一种方法更好；因为相比第二种方法第一种方法对需要同步的数据更加精准，极大的缩减的运行时间*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类锁"><a href="#类锁" class="headerlink" title="类锁"></a>类锁</h3><p>当synchronized修饰静态方法时候，线程执行到此方法的时候会找类锁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 类锁* 以下程序m2方法会等m1方法执行完毕在执行m2方法吗?* 答：不会因为以下程序的synchronized修饰的是静态方法* 而修饰静态方法当线程执行到此处会直接使用类锁，与类锁无关* 所以m2不会等待m1方法，但是由于主线程含有睡眠所以m1会优先执行*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest13</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Myclass2 myclass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor13</span><span class="token punctuation">(</span>myclass2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor13</span><span class="token punctuation">(</span>myclass2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor13</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Myclass2 myClass2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Processor13</span><span class="token punctuation">(</span>Myclass2 myClass2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myClass2 <span class="token operator">=</span> myClass2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myClass2<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myClass2<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Myclass2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当synchronized修饰静态方法时候，线程执行到此方法的时候会找类锁.</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 死锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Myclass5</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Myclass6</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Myclass5</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Object o1<span class="token punctuation">;</span>    Object o2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Myclass5</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o2 <span class="token operator">=</span> o2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Myclass6</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Object o1<span class="token punctuation">;</span>    Object o2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Myclass6</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>o2 <span class="token operator">=</span> o2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 守护线程* 当其他所有的用户线程结束，则守护线程退出* 守护线程一般都是无限循环的* 例：GC(垃圾回收)就是线程守护*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest15</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将用户线程设置为守护线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 启动线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor15</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计定时器"><a href="#计定时器" class="headerlink" title="计定时器"></a>计定时器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定时器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest16</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建定时器</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        Timer t <span class="token operator">=</span> null<span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Processor16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd HH:mm:ss SSSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-10-8 23:48:00 0000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Processor16</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流(49)</title>
      <link href="/posts/c8a62631.html"/>
      <url>/posts/c8a62631.html</url>
      
        <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><ol><li>字符输入流<br> FileReader</li><li>字节输出流<br> FileWriter</li></ol><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><ol><li>字节输入流<br> FileInputStream</li><li>字节输出流<br> FileOutputStream</li></ol><h2 id="字节流与字符流区别："><a href="#字节流与字符流区别：" class="headerlink" title="字节流与字符流区别："></a>字节流与字符流区别：</h2><h3 id="字节流："><a href="#字节流：" class="headerlink" title="字节流："></a>字节流：</h3><p> <strong>Java中的字节流处理的最基本单位为单个字节</strong>，它通常用来处理二进制数据。Java中最基本的两个字节流类是InputStream和OutputStream，它们分别代表了组基本的输入字节流和输出字节流。InputStream类与OutputStream类均为抽象类，我们在实际使用中通常使用Java类库中提供的它们的一系列子类。</p><h3 id="字符流："><a href="#字符流：" class="headerlink" title="字符流："></a>字符流：</h3><p> <strong>Java中的字符流处理的最基本的单元是Unicode码元</strong>（大小2字节），它通常用来处理文本数据。所谓Unicode码元，也就是一个Unicode代码单元，范围是0x0000~0xFFFF。在以上范围内的每个数字都与一个字符相对应，Java中的String类型默认就把字符以Unicode规则编码而后存储在内存中。然而与存储在内存中不同，存储在磁盘上的数据通常有着各种各样的编码方式。使用不同的编码方式，相同的字符会有不同的二进制表示。</p><h2 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h2><ol><li>缓存输入流<br> BufferedInputStream</li><li>缓存输出流<br> BufferedOutputStream</li></ol><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ol><li>转换输入流<br> InputStreamReader</li><li>转换输出流<br> OutputStreamWriter</li></ol><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><blockquote><p>概述：在 Java 中，File 类是 java.io 包中唯一代表磁盘文件本身的对象。File 类定义了一些与平台无关的方法来操作文件，File类主要用来获取或处理与磁盘文件相关的信息，像文件名、 文件路径、访问权限和修改日期等，还可以浏览子目录层次结构。<br>File 类表示处理文件和文件系统的相关信息。也就是说，File 类不具有从文件读取信息和向文件写入信息的功能，它仅描述文件本身的属性。</p></blockquote><ol><li>File类的相关方法<ul><li>构造方法<br>  File(String pathname) 通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。<br>  File(String parent,String child) 根据指定的父路径和文件路径创建一个新File对象实例<br>  File(File parent,String child) 根据指定的父路径对象和文件路径创建一个新的File对象实例</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型初步(47)</title>
      <link href="/posts/d00d884d.html"/>
      <url>/posts/d00d884d.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型初步"><a href="#泛型初步" class="headerlink" title="泛型初步"></a>泛型初步</h1><blockquote><p>泛型能更早的发现错误，如类型转换错误，通常在运行期才会发现，如果使用泛型，那么在编译期将会发现，通常错误发现的越早，越容易调试，越容易减少成本。(泛型与包装类型一样都是编译阶段触发)</p></blockquote><ol><li><p>为什么可以引入泛型？</p><ol><li>可以统一集合中的数据类型。</li><li>可以减少将之类型的转换。</li></ol></li><li><p>泛型的优缺点？</p><ul><li>优点：统一类型，减少强制类型转换。</li><li>缺点：类型太统一。</li></ul></li><li><p>以下程序若没有使用泛型，有什么缺点？</p><ul><li>如果集合不使用泛型，则集合中的元素不统一,在大量集合遍历时候，只可以拿出Object类型，</li><li>需要做大量的强制类型转换，太麻烦。</li><li>示例代码01：</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个集合使用泛型</span>        SortedSet<span class="token operator">&lt;</span>Manager<span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Manager<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"MAkEE"</span><span class="token punctuation">,</span><span class="token number">4080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"ARRAY"</span><span class="token punctuation">,</span><span class="token number">8090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个迭代器使用泛型，并遍历集合内的数据</span>        Iterator<span class="token operator">&lt;</span>Manager<span class="token operator">></span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Manager<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Manager o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> wage1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wage<span class="token punctuation">;</span>        <span class="token keyword">int</span> wage2 <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getWage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wage1<span class="token operator">></span>wage2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wage1<span class="token operator">&lt;</span>wage2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Manager manager <span class="token operator">=</span> <span class="token punctuation">(</span>Manager<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> wage <span class="token operator">==</span> manager<span class="token punctuation">.</span>wage <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> manager<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> wage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工资</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> wage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> wage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Manager{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", wage="</span> <span class="token operator">+</span> wage <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWage</span><span class="token punctuation">(</span><span class="token keyword">int</span> wage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义泛型</p><blockquote><p>以下程序因为Test类中规定只能传入相同数据类型，当测试类String类型出入则后期不可以传入其他数据类型.这样可以规范数据类的统一，方便同时调用。</p></blockquote><ul><li><p>示例代码02：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义泛型</span>        Test<span class="token operator">&lt;</span>String<span class="token operator">></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for增强(48)</title>
      <link href="/posts/95735d7.html"/>
      <url>/posts/95735d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="for增强"><a href="#for增强" class="headerlink" title="for增强"></a>for增强</h1><h2 id="关于for增强："><a href="#关于for增强：" class="headerlink" title="关于for增强："></a>关于for增强：</h2><ol><li><p>语法：</p><blockquote><p>for(类型 变量: 数组名/变量名){}</p></blockquote></li><li><p>集合想要使用for增强必须使用泛型,如果不使用泛型的话for类型中声名Object。</p></li><li><p>for增强没有下标，for循环有下标。</p></li><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建int类型数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">342</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for增强</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>i1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意：a变量是集合/数组中的每个元素，而不是每循环一次的值</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!!!!!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        SortedSet<span class="token operator">&lt;</span>Test01<span class="token operator">></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test01 t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test01 t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token string">"Array"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test01 t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token string">"Teat"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 集合添加元素</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Test01 a<span class="token operator">:</span>s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Test01<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age1<span class="token operator">></span>age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age1<span class="token operator">&lt;</span>age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Test01</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Test01 test01 <span class="token operator">=</span> <span class="token punctuation">(</span>Test01<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> test01<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> test01<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Test01{"</span> <span class="token operator">+</span>                <span class="token string">"a='"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合排序类Comparable和Comparator区别小结(46)</title>
      <link href="/posts/26f930be.html"/>
      <url>/posts/26f930be.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合排序类Comparable和Comparator区别小结"><a href="#集合排序类Comparable和Comparator区别小结" class="headerlink" title="集合排序类Comparable和Comparator区别小结"></a>集合排序类Comparable和Comparator区别小结</h1><h2 id="Comparable简介"><a href="#Comparable简介" class="headerlink" title="Comparable简介"></a>Comparable简介</h2><p>　　Comparable是排序接口。若一个类实现了Comparable接口，就意味着该类支持排序。实现了Comparable接口的类的对象的列表或数组可以通过Collections.sort或Arrays.sort进行自动排序。注意：Comparable须实现compareTo方法。<br>测试代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义类</span>        Map m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set s <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object k <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"---->"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现compareTo方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> o1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token keyword">int</span> o2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person2<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token operator">==</span><span class="token number">02</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token operator">></span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Person2{"</span> <span class="token operator">+</span>                    <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                    <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Comparator简介"><a href="#Comparator简介" class="headerlink" title="Comparator简介"></a>Comparator简介</h2><p>　　Comparator是比较接口，我们如果需要控制某个类的次序，而该类本身不支持排序(即没有实现Comparable接口)，那么我们就可以建立一个“该类的比较器”来进行排序，这个“比较器”只需要实现Comparator接口即可。也就是说，我们可以通过实现Comparator来新建一个比较器，然后通过这个比较器对类进行排序。注意：Comparator须实现compare方法。<br>测试代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set s <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object k <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"---->"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person2{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person2Sort</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person2<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person2<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age1<span class="token operator">==</span>age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age1 <span class="token operator">></span> age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类"><a href="#注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类" class="headerlink" title="注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类"></a>注意：以上方法介绍的是非包装类型，包装类型的排序都已实现了Comparable类</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collections集合工具类(45)</title>
      <link href="/posts/c7f0b346.html"/>
      <url>/posts/c7f0b346.html</url>
      
        <content type="html"><![CDATA[<h1 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h1><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建List集合</span>        List a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为集合中添加元素</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token comment" spellcheck="true">// 在for中创建迭代器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span><span class="token operator">+</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用Collections集合工具类为ArrayList集合排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token comment" spellcheck="true">// 在for中创建迭代器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span><span class="token operator">+</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上方法使用Collections类中的sort排序方法,都是使用的包装类型,而包装类型</span>        <span class="token comment" spellcheck="true">// SUN公司都实现了:</span>        <span class="token comment" spellcheck="true">// 1.Comparable类中compareTo方法，注(形参只需要一个，另一个直接调用当前类的对象)</span>        <span class="token comment" spellcheck="true">// 2.Comparator中compare方法</span>        List a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i2 <span class="token operator">=</span> a2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 自定义类如果需要排序必须实现以上两种方法其中一种</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">></span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PersonSort</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token operator">></span>a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map集合(44)</title>
      <link href="/posts/dc777660.html"/>
      <url>/posts/dc777660.html</url>
      
        <content type="html"><![CDATA[<h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><ol><li><p>HashMap集合创建及常用方法</p><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 关于Map集合中的常用方法： * void clear(); 清空Map * boolean isEmpty();判断该集合是否为空 * int size(); 获取Map中的键值对的个数 * * Object put(Object key,Object value); 向集合中添加键值对 * * boolean containsKey(Object key); 判断Map中是否包含这样的key * boolean containsValue(Object value); 判断Map中是否包含这样的value * * set entrySet(); 返回此映射中包含的映射关系的Set视图 * * Object remove(Object key); 通过key将键值对删除 * * Set keySet(); 获取Map中所有的key * Collection values(); 获取Map集合中所有的value * * 注意：存储在Map集合Key部分的元素需要同时重写hashCaode+equals方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Map集合</span>        Map persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//HashMap中默认初始化容量是16，默认加载因子是0.75</span>        <span class="token comment" spellcheck="true">// 存储键值对</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"Cook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"Map1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.判断键值对的个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"persons键值对个数为："</span><span class="token operator">+</span>persons<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：Map中的键值对是无需不可重复的</span>        <span class="token comment" spellcheck="true">// 2.判断集合中是否包含这样的key</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -->true</span>        <span class="token comment" spellcheck="true">// 3.判断集合中是否包含这样的value</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> false</span>        <span class="token comment" spellcheck="true">// 结论：Map中如果key重复了，则value则采用后者"覆盖"前者value的方式存储</span>        <span class="token comment" spellcheck="true">// 4.通过key获取value值</span>        String key <span class="token operator">=</span> <span class="token string">"4"</span><span class="token punctuation">;</span>        Object value <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// --> Map1</span>        <span class="token comment" spellcheck="true">// 5.通过key删除键值对</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"persons删除键值对个数为："</span><span class="token operator">+</span>persons<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"···················"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.获取所有的value</span>        Collection values <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"···················"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7.获取所有的key</span>        Set keys <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i2 <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下程序演示了如何遍历Map集合</span>            Object k <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 8.获取映射关系的Set视图</span>        Set s <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator i3 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下程序演示了如何遍历Map集合</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Properties集合创建及常用方法</p><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * Hashtable默认初始化容量是11，默认加载因子是0.75 * Java.util.Properties; 也是由key和value组成的，但是key和value都是字符串类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        Properties p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span><span class="token string">"oracle.jdbc.driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"scott"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意:</span>        p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"passworld"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取:通过key值获取value</span>        String v1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v2 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v3 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"passworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TreeSet集合(43)</title>
      <link href="/posts/b08de21f.html"/>
      <url>/posts/b08de21f.html</url>
      
        <content type="html"><![CDATA[<h1 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h1><ol><li><p>TreeSet特点:无需不可重复但是可以按照元素的大写进行排序<br> 示例代码01：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建TressSet集合</span>        SortedSet ss1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动装箱 Integer类型装箱</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> ss1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建迭代器</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 0</span>            <span class="token comment" spellcheck="true">// 1</span>            <span class="token comment" spellcheck="true">// 111</span>            <span class="token comment" spellcheck="true">// 222</span>            <span class="token comment" spellcheck="true">// 555</span>            <span class="token comment" spellcheck="true">// 9999</span>            <span class="token comment" spellcheck="true">// 输出以上顺序</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建TressSet集合</span>        SortedSet ss2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        String tm1 <span class="token operator">=</span> <span class="token string">"2020-01-30"</span><span class="token punctuation">;</span>        String tm2 <span class="token operator">=</span> <span class="token string">"2021-03-20"</span><span class="token punctuation">;</span>        String tm3 <span class="token operator">=</span> <span class="token string">"2025-10-5"</span><span class="token punctuation">;</span>        String tm4 <span class="token operator">=</span> <span class="token string">"2026-06-30"</span><span class="token punctuation">;</span>        String tm5 <span class="token operator">=</span> <span class="token string">"2029-02-30"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建格式化日期对象</span>        SimpleDateFormat s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q3 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q4 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm4<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date q5 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tm5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加元素</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q3<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q4<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i2 <span class="token operator">=</span> ss2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建迭代器</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果直接写以下方法，不保险，因为如果传过来的不是Date类型则会直接报错</span>            <span class="token comment" spellcheck="true">// System.out.println(o instanceof Student);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Date d <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span>o<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 2020-01-30</span>                <span class="token comment" spellcheck="true">// 2021-03-20</span>                <span class="token comment" spellcheck="true">// 2025-10-05</span>                <span class="token comment" spellcheck="true">// 2026-06-30</span>                <span class="token comment" spellcheck="true">// 2029-03-02</span>                <span class="token comment" spellcheck="true">// 输出以上顺序</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>TreeSet实现自动排序原理：</p><ul><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建TressSet自动排序01</span><span class="token comment" spellcheck="true">/** * Sortedset集合存储元素实现自动排序原因：被存储的元素实现了Comparable接口， * SUN编写 TreeSet集合在添加元素的时候，会调用compareTo方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortedSetTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建TressSet集合</span>        SortedSet s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        Student5 a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student5 a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student5 a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student5 a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student5</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建迭代器</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * 以上程序报错：ClassCastException //类转换错误             * SortedSet集合存储元素可以自动排序的原理：             * 因为被存储的元素集合实现了Comparavle接口，SUN编写了TreeSet集合在添加元素的时候，             * 会调用compareTo方法进行比较，在包装类型中都已实现了Comparavle但是在自定义对象中             * 如果未实现Comparavle接口的方法，会在Comparable&lt;? super K> k = (Comparable&lt;?             *  super K>) key;强转失败从而报错。             */</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student5</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student5</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现Comparable接口中的方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Student5<span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 编写一个比较规则</span>        <span class="token keyword">return</span> age1 <span class="token operator">-</span> age2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student5{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例代码02：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 总结自动排序： * 自动排序实现的原理： * 当TreeSet集合添加元素时，如果元素不重复则自动会排序，在TreeSet内部强转成Comparator * 自动调用compareTo方法或在创建集合比较器进行排序. * 注：当自定义创建对象时候，使用TreeSet或其他自动排序集合时候需要实现以上两种的任意一种方法，以实现自动排序 * 1.实现类直接实现Comparable接口并实现compareTo方法：缺点：一旦实现Comparable不再是原来的类 * 2.直接创建一个类在这个类种实现Comparator接口中compare方法，然后在创建TreeSet或其他自动排序集合时 * 将参数直接创建该类对象即可.此方法可以实现代码的复用，值得推荐！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortedSetTest03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        SortedSet so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        Shoe s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">12.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shoe s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">14.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shoe s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shoe s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shoe</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        so<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> so<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Shoe</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Shoe</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Shoe{"</span> <span class="token operator">+</span>                <span class="token string">"price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> price1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Shoe<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>        <span class="token keyword">double</span> price2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Shoe<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>price1<span class="token operator">==</span>price2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>price1<span class="token operator">></span>price2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set集合(42)</title>
      <link href="/posts/77133371.html"/>
      <url>/posts/77133371.html</url>
      
        <content type="html"><![CDATA[<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><h2 id="Set集合存储过程："><a href="#Set集合存储过程：" class="headerlink" title="Set集合存储过程："></a>Set集合存储过程：</h2><ol><li><p>Hashset底层实际上是一个 HashMap， HashMap底层采用了哈希表数据结构。</p></li><li><p>哈希表又叫做散列表，哈希表底层是一个数组，这个数组中每一个元素是一个单向链表。每个单向链表都有一个独一无二的hash值，代表数组的下标。在某个单向链表中的每一个节点上的hash值是相等的，hash值实际上是key调用 hashcode方法，在通过” hash function”转换成的值。<br> 3.如何向哈希表中添加元素:<br> 先调用被存储的key的hashcode方法，经过某个算法得出hash值，如果在这个哈希表中不存在这个hash值，则直接加入元素。如果该hash值已经存在，继续调用key之间的equals方法，如果 equals方法返回 false，则将该元素添加。如果equals方法返回true，则放弃添加该元素。</p></li></ol><ul><li>示例代码01：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建HashSet集合</span>        Set h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        Iterator i <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h集合中元素个数有："</span><span class="token operator">+</span>h<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>深入Hashset数组<br> 示例代码02：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个HashSet集合</span>        Set employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"256"</span><span class="token punctuation">,</span><span class="token string">"KED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"256"</span><span class="token punctuation">,</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 3839054</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e6<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 3839054</span>        <span class="token comment" spellcheck="true">// e3与e6对象添加到HashSet中去，调用hashCode方法返回结果一样，HashSet会进一步调用equals</span>        <span class="token comment" spellcheck="true">// 方法来进行比较是否相同，如果相同则放弃添加，如果不相同则添加。</span>        Employee e4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"308"</span><span class="token punctuation">,</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"Monk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        <span class="token comment" spellcheck="true">// 因为以上添加的两个对象重复但是调用hashCode()方法不一样，不符合业务逻辑,</span>        <span class="token comment" spellcheck="true">// 所以需要重写hashCode方法。</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e3<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e4<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e5<span class="token punctuation">)</span><span class="token punctuation">;</span>        employee<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据现实的业务逻辑得知:该公司的员工编号是：1000-9999</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 编号</span>    String no<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String no<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Employee employee <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> employee<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> employee<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List集合(41)</title>
      <link href="/posts/37befa3e.html"/>
      <url>/posts/37befa3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><h2 id="list集合的特点："><a href="#list集合的特点：" class="headerlink" title="list集合的特点："></a>list集合的特点：</h2><ul><li><p>有序性可重复，有序，存进去什么顺序，取出来还是这个顺序取出。</p></li><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java">        List l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token comment" spellcheck="true">// 创建迭代器</span>        Iterator a1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深入List集合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 深入List集合</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        List l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建元素</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add方法</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在下标为2的地方添加元素</span>        <span class="token comment" spellcheck="true">// 使用Array方法遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用get方法获取每次下表的元素</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"迭代方法遍历元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用迭代方法遍历</span>        Iterator l3 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection集合(40)</title>
      <link href="/posts/92d95fa5.html"/>
      <url>/posts/92d95fa5.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li><p>集合概念：</p><ul><li>集合是Java中提供的一种容器，可以用来存储多个数据 。</li><li>数组的长度是固定的。集合的长度是可变的   。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。  </li></ul></li><li><p>集合框架：</p><ul><li>集合按照其存储结构可以分为两大类，分别是单列集合java.util.Collection和双列集合java.util.Map。</li><li>java.util.Collection特点：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是java.util.List和java.util.Set。其中，List的特点是元素有序、元素可重复。Set的特点是元素无序，而且不可重复。List接口的主要实现类有java.util.ArrayList和java.util.LinkedList，Set接口的<br>  主要实现类有java.util.HashSet和java.util.TreeSet。  </li><li>java.util.Map特点：中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。  </li></ul><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BECollection.png" alt="Collection"></p><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BEMap.png" alt="Map"></p></li><li><p>Collection常用方法：</p><ul><li><p>add(Object element); 向集合中添加元素</p></li><li><p>size(); 获取集合中的个数</p></li><li><p>boolean isEmpty(); 判断集合中是否有元素</p></li><li><p>clear(); 清空集合</p></li><li><p>toArray(); 将集合转换成数组</p></li><li><p>Iterator iterator(); 获取集合所依赖的迭代器对象</p></li><li><p>boolean contains(Object o); 判断集合中是否包含某个元素</p></li><li><p>boolean remove(Object o); 删除集合中某个元素</p></li><li><p>示例代码01：</p><pre class="line-numbers language-java"><code class="language-java">          <span class="token comment" spellcheck="true">// * add(Object element); 向集合中添加元素</span>        <span class="token comment" spellcheck="true">// * size(); 获取集合中的个数</span>        <span class="token comment" spellcheck="true">// * boolean isEmpty(); 判断集合中是否有元素</span>        <span class="token comment" spellcheck="true">// * clear(); 清空集合</span>        <span class="token comment" spellcheck="true">// * toArray(); 将集合转换成数组</span>        <span class="token comment" spellcheck="true">// 1.创建一个集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 多态</span>        <span class="token comment" spellcheck="true">// 2.添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其中10使用了JDK5.0中的自动装箱，将10转换成了Integer引用类型</span>        <span class="token comment" spellcheck="true">// Integer i = new Integer(10); // 以上等同于这条语句</span>        Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取集合中的元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1集合中的元素个数为："</span><span class="token operator">+</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断集合中是否有元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --》 false</span>        <span class="token comment" spellcheck="true">//4.将集合转换为数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5.清空集合</span>        c1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// --》 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>示例代码02：</p><pre class="line-numbers language-java"><code class="language-java">          <span class="token comment" spellcheck="true">// Iterator iterator(); 获取集合所依赖的迭代器对象</span>        <span class="token comment" spellcheck="true">// 创建ArrayList集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加对象</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 自动装箱</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 自动装箱</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 自动装箱</span>        <span class="token comment" spellcheck="true">// 创建迭代器</span>        Iterator i1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多态--夫类型接口引用子类型(迭代器)对象</span>        <span class="token comment" spellcheck="true">/*         * 迭代/遍历         * 1.不需要关系底层调用的是哪个迭代器，当前集合创建的集合是什么集合底层调取相应的迭代器         * 2.迭代器是面向接口的编程         * 3.例：ArrayList集合所依赖的迭代器是是java.util.ArrayList$Itr         *   例：LinkedList集合所依赖的迭代器是java.util.LinkedList$ListItr         */</span>        <span class="token comment" spellcheck="true">// while遍历</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"while遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Object o <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 自动拆箱</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for遍历</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"for遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator i2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o2 <span class="token operator">=</span> i2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例代码03：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// boolean contains(Object o); 判断集合中是否包含某个元素</span>        <span class="token comment" spellcheck="true">// 创建ArrayList集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// contains()比较</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> true</span>        <span class="token comment" spellcheck="true">/**         * 以上方法为什么返回true?         * 答：contains()方法的内部是使用的Integer的equals()，而Integer类重写了Object中的equals()         * 方法，所以最后比较的是i1与集合c1中的value值，所以返回true         */</span>        <span class="token comment" spellcheck="true">// Student使用contains()比较：</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20212000</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20212000</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(c1.contains(s2)); // --> false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 重写后true</span>        <span class="token comment" spellcheck="true">/**         * 以上方法为什么返回true?         * 答：contains()方法的内部是使用的Object中的equals()，而Object类中的equals()方法默认比较的是引用地址是否相同         * 所以返回false，但是与实际业务逻辑冲突所以在Student中重写equals()方法.         */</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写equals()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> id <span class="token operator">==</span> student<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> student<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>示例代码03：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * boolean remove(Object o); 删除集合中某个元素 * 注意： * remove和contains方法都需要集合中的元素重写equals方法 * 因为Object中的equals方法比较内存地址，在现实的业务逻辑当中不能比较内存地址，应该比较内容 */</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        Collection c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 0</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Javk"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Javk"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 0</span>        <span class="token comment" spellcheck="true">// 深入remove方法</span>        <span class="token comment" spellcheck="true">/**         * 问：迭代器中的remove方法与集合中自带的remove方法有什么不同？         */</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建迭代器</span>        Iterator a1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用迭代器中的remove方法删除</span>        <span class="token comment" spellcheck="true">/*while (a1.hasNext()) {  // next()如果迭代具有更多元素，则返回 true            a1.next();  // 游标下移            a1.remove();// 删除当前元素        }*/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --》 0</span>        <span class="token comment" spellcheck="true">// 使用集合中的remove方法删除</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object o <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用集合中的remove方法删除元素</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --》 Error: ConcurrentModificationException</span>        <span class="token comment" spellcheck="true">/**         * 报错原因：迭代器中remove中的方法与集合中remove方法区别：         * 1.如果需要批量删除集合中的元素的话，调用集合中的remove方法删除了集合中的元素，但是循环是使用的未删除之前的         * 集合元素，这样会使迭代器中记录集合元素不是最新的.所以每删除一个都需要重新定义迭代器，从而保证迭代器中的元素         * 与集合元素相同.所以这种方法不能用         * 2.迭代器中的remove方法可以实时记录当前集合删除多少元素从而实时更新游标，这种方式值得推荐         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>s</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类型(39)</title>
      <link href="/posts/a52b6dff.html"/>
      <url>/posts/a52b6dff.html</url>
      
        <content type="html"><![CDATA[<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><blockquote><p>引入：定义一个方法，该方法的作用是计算两个int类型数据的商，如果计算成功则该方法返回1，如果执行失败则该方法返回0程序执行成功，但是该程序会存在风险：</p><p>分析:存在什么风险?<br>程序中的问题能在编译阶段解决的，绝对不会放在运行期解决。所以下程序可以引入枚举类型”。</p></blockquote><ol><li>什么情况下使用枚举类型：</li></ol><p>  不重复且有限的元素使用枚举类型</p><p>  例子：</p><p>  1、一周有多少天？</p><p>  7天。像这样固定不变的一组数据，如果我们的程序有需要用到这“7天”的相关信息，例如：发工资分为工作日和周末，可以考虑使用枚举类型。</p><p>  2、太阳系有多少个行星？</p><p>  8个。当我们需要计算每个行星的表面重力的时候，像这样我们需要用到固定不变的一组信息中的每一个元素携带了不同的信息，可以考虑使用枚举类型。 </p><p>  3、计算器中的基础运算符。</p><p>   加减乘除。像这样我们需要用到固定不变的一组信息中的每一个元素都决定了不同的行为的时候，可以考虑使用枚举类型。</p><p>  4、web请求返回的状态。</p><p>  比如：error为-1，success为0，未登录为-9等可以设为枚举类型。</p><ol start="2"><li>示例代码： </li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * 定义一个方法，该方法的作用是计算两个int类型数据的商，如果计算成功则该方法返回1，如果执行失败则该方法返回0程序执行成功，但是该程序会存在风险：     * 分析:存在什么风险?     * 程序中的问题能在编译阶段解决的，绝对不会放在运行期解决。所以以下程序可以引入枚举类型"。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 分析:存在什么风险?</span>        <span class="token comment" spellcheck="true">// 程序中的问题能在编译阶段解决的，绝对不会放在运行期解决。所以下程序可以引入枚举类型"。</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成功</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 失败</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上程序如果执行成功则返回1，如果没返回则返回0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EnumTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成功</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span>FALL<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 失败</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上程序如果执行成功则返回1，如果没返回则返回0</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：声名类型是枚举名称而不是枚举类型</span>        Result result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span>Result<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">==</span>Result<span class="token punctuation">.</span>FALL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Result<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个枚举类型；</span>    <span class="token comment" spellcheck="true">// 规范要求：必须全部大写</span>    SUCCESS<span class="token punctuation">,</span>FALL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—随机数(38)</title>
      <link href="/posts/368f5c93.html"/>
      <url>/posts/368f5c93.html</url>
      
        <content type="html"><![CDATA[<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><ol><li><p>java.util.Random;示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        Random r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择0-101之间的数字</span>        <span class="token comment" spellcheck="true">// 循环生成5个随机数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>exercise：生成5个不重复的数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生成【1-5】个不重复的随机数</span>        Random r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> r2<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"___________________________________"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">contains</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"||||||||||||||||||||||||||||||||||||||"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i1<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> i1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—数字类(37)</title>
      <link href="/posts/a2f5d052.html"/>
      <url>/posts/a2f5d052.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用类—数字类"><a href="#常用类—数字类" class="headerlink" title="常用类—数字类"></a>常用类—数字类</h1><ol><li><p>DecimalFormat类型示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * java.text.DecimalFormat; * 数字格式化元素： * # 任意字符 * , 千分位 * . 小数点 * 0 不够补零 */</span>        <span class="token comment" spellcheck="true">// 练习一：</span>        <span class="token comment" spellcheck="true">// 创建数字格式化对象并加入千分位</span>        DecimalFormat df1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始格式化</span>        <span class="token comment" spellcheck="true">// Number-->String</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 123,456</span>        <span class="token comment" spellcheck="true">// 练习二：</span>        <span class="token comment" spellcheck="true">// 加入千分位并保留两位小数</span>        DecimalFormat df2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###.##"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始格式化</span>        <span class="token comment" spellcheck="true">// Number-->String</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>df2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234567.123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 1,234,567.12</span>        <span class="token comment" spellcheck="true">// 练习二：</span>        <span class="token comment" spellcheck="true">// 加入千分位并保留四位小数，并且不够补零</span>        DecimalFormat df3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###.0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始格式化</span>        <span class="token comment" spellcheck="true">// Number-->String</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>df3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234567.123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 1,234,567.1230</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>BigDecimal类型示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * java.math.BigDecimal;         * 该类型的数据精确度极高,适合做财务软件         * 财务软件中 double 类型精确度太低         */</span>        <span class="token comment" spellcheck="true">// 创建BigDecimal对象</span>        BigDecimal v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：以上v1与v2都是引用数据数据类型，所以无法直接进行数字运算</span>        BigDecimal v3 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—日期类(36)</title>
      <link href="/posts/89ec6322.html"/>
      <url>/posts/89ec6322.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用类—日期类"><a href="#常用类—日期类" class="headerlink" title="常用类—日期类"></a>常用类—日期类</h1><ol><li><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 常用类—日期类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// currentTimeMillis()方法获取自1970年1月1日00时00分00秒000毫秒到当前的毫秒数</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前时间</span>        Date nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> Tue Sep 21 15:08:10 CST 2021</span>        <span class="token comment" spellcheck="true">// 以上输出结果说明，Java.Util.Date类已经重写了toString()方法</span>        <span class="token comment" spellcheck="true">// 输出结果对于中国人来说不太容易理解，可以使用java.text.SimpleDateFormat用来格式化日期对象并返回-->String</span>        <span class="token comment" spellcheck="true">/* 日期格式(注大小写)：         * y 年         * M 月         * d 日         * H 小时         * m 分         * s 秒         * S 毫秒         */</span>        <span class="token comment" spellcheck="true">// Date --> String</span>        <span class="token comment" spellcheck="true">// 1.创建一个日期格式化对象</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.开始格式化日期对象</span>        String strTime1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTime1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 2021年09月21日 15:21:31 736</span>        <span class="token comment" spellcheck="true">// String --> Date</span>        <span class="token comment" spellcheck="true">// 获取特定的日期</span>        <span class="token comment" spellcheck="true">// 1.创建一个格式化对象</span>        SimpleDateFormat sdf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意:格式化日期对象不可以随便写，需要与字符串格式相符。</span>        <span class="token comment" spellcheck="true">// 2.将String转化成Date对象</span>        String s1 <span class="token operator">=</span> <span class="token string">"2020-09-21 15:29:00 000"</span><span class="token punctuation">;</span>        Date t <span class="token operator">=</span> sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> Mon Sep 21 15:29:00 CST 2020</span>        <span class="token comment" spellcheck="true">// 1000毫秒是自1970年1月1日00:00:00 GMT的毫秒数</span>        Date t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 分配 Date对象并初始化它以表示自标准基准时间（称为“纪元”）以来的指定毫秒数，即1970年1月1日00:00:00 GMT。</span>        <span class="token comment" spellcheck="true">// 格式化日期对象</span>        SimpleDateFormat sdf3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy,MM,dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 北京属于东八区 所以比CST时区早八小时</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --》 1970,01,01 08:00:01 000</span>        <span class="token comment" spellcheck="true">// 获取当前时间的前十分钟</span>        Date t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2021,09,21 15:38:30 116</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>练习：获取2008 8 8 是星期几？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取系统当前的日期</span>        Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查看当前日历下"星期几"</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 6</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查看当前几号</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> 24</span>        <span class="token comment" spellcheck="true">// 练习获取2008 8 8 是星期几？</span>        <span class="token comment" spellcheck="true">// 获取2008 8 8日期</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String strTime<span class="token operator">=</span><span class="token string">"2008-08-08"</span><span class="token punctuation">;</span>            Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ---> 6</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动装箱/自动拆箱(35)</title>
      <link href="/posts/b894bec6.html"/>
      <url>/posts/b894bec6.html</url>
      
        <content type="html"><![CDATA[<h1 id="自动装箱-自动拆箱"><a href="#自动装箱-自动拆箱" class="headerlink" title="自动装箱/自动拆箱"></a>自动装箱/自动拆箱</h1><ol><li><p>自动装箱相关概念：</p><ul><li>自动装箱/拆箱是程序编译阶段的一个概念，与程序的运行无关，<br>  也就是说即使你编写的是Integer i3 = 200;在程序运行时还是Integer i3 = new Integer(200);两者创建手法相等。</li><li>自动拆箱与装箱主要目的是为了程序猿的方便编写程序。</li><li>在使用自动装箱时如果是Integer类型且在：-128~127范围内创建的对象，在程序运行创建时直接调用方法区中的”整形常量池”中数字，而不会在创建对象，也就是说：Integer i1 = 10; 与 Integer i2 = 10; 最后对比(i1==i2)出来的是true，但是不使用自动装箱。直接手动装箱不管在不在范围内都是(Integer i2 = new (Integer (10); Integer i3 = new (Integer (10); i2==i3)会直接返回false</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 包装类型的自动装箱(auto_boxing)、自动拆箱(auto_unboxing)</span>        <span class="token comment" spellcheck="true">// JDK5.0以后的版本可以直接使用自动装箱/拆箱，可以不用new一个对象出来调用了</span>        <span class="token comment" spellcheck="true">// JDK5.0之前的：</span>        <span class="token comment" spellcheck="true">// int ---> Integer 装箱</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0之前的装箱："</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// integer ---> Int 拆箱</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0之前的拆箱："</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JDK5.0之后的</span>        <span class="token comment" spellcheck="true">// int ---> Integer 自动装箱</span>        Integer i3 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0的自动装箱："</span> <span class="token operator">+</span> i3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// integer ---> Int 自动拆箱</span>        <span class="token keyword">int</span> i4 <span class="token operator">=</span> i3<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK5.0的自动拆箱："</span> <span class="token operator">+</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 深入了解自动装箱拆箱</span>        <span class="token comment" spellcheck="true">// 手动装箱</span>        Integer i7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7<span class="token operator">==</span>i8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> false</span>        <span class="token comment" spellcheck="true">// Integer重写了equals方法，使得在Integer中比较的是两者的数值并非内存地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> true</span>        <span class="token comment" spellcheck="true">// 自动装箱</span>        <span class="token comment" spellcheck="true">// 如果不超出范围值的话是搜索整型常量池中数值，然后对比i5与i6的相应数值，因为两者都是从整形常量池中创建出来的，自然是true</span>        Integer i5 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        Integer i6 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5<span class="token operator">==</span>i6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> true</span>        <span class="token comment" spellcheck="true">// 自动装箱超出范围</span>        <span class="token comment" spellcheck="true">// 如果超出范围值的话是程序在堆内存创建对象，然后直接对比i9与i10的内存地址，结果内存地址不一样返回false</span>        Integer i9 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>        Integer i10 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i9<span class="token operator">==</span>i10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --> false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer常用方法(34)</title>
      <link href="/posts/627e0986.html"/>
      <url>/posts/627e0986.html</url>
      
        <content type="html"><![CDATA[<h1 id="Integer常用方法"><a href="#Integer常用方法" class="headerlink" title="Integer常用方法"></a>Integer常用方法</h1><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// int --> Integer</span>        <span class="token comment" spellcheck="true">// 基本类型-->引用数据类型</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Integer --> int</span>        <span class="token comment" spellcheck="true">// 引用数据类型-->基本数据类型</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重要: parseInt(String s) 将字符串参数解析为带符号的十进制整数。</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 26</span>        <span class="token comment" spellcheck="true">// 重要：parseDouble(String s) 返回一个新 double初始化为指定的代表的值 String ，如通过执行 valueOf类的方法 Double 。</span>        <span class="token keyword">double</span> price <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 4.0</span>        <span class="token comment" spellcheck="true">// 其他类型值转换性质同理</span>        <span class="token comment" spellcheck="true">// 进制之间转换</span>        <span class="token comment" spellcheck="true">// 十进制二进制转换</span>        String s1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 1010</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 十进制十六进制转换</span>        String s2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> a</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 十进制八进制转换</span>        String s3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 12</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int --> Integer</span>        Integer q1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String --> Integer</span>        Integer q2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 1234</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总结：关于三种类转换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总结：关于三种类转换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.int --> Integer</span>        Integer w1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.Integer --> int</span>        <span class="token keyword">int</span> w2 <span class="token operator">=</span> w1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.String --> Integer</span>        Integer w3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.Integer --> String</span>        String s4 <span class="token operator">=</span> w3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.String --> int</span>        <span class="token keyword">int</span> w4 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.int --> String</span>        String s5 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包装类型(33)</title>
      <link href="/posts/46b5ab92.html"/>
      <url>/posts/46b5ab92.html</url>
      
        <content type="html"><![CDATA[<h1 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h1><h2 id="Java中八种基本数据对应的包装类型"><a href="#Java中八种基本数据对应的包装类型" class="headerlink" title="Java中八种基本数据对应的包装类型"></a>Java中八种基本数据对应的包装类型</h2><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类型</th><th align="center">包装名称</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">java.lang.Byte;</td><td align="center">字节型</td></tr><tr><td align="center">short</td><td align="center">java.lang.short;</td><td align="center">短整型</td></tr><tr><td align="center">long</td><td align="center">java.lang.Long;</td><td align="center">长整型</td></tr><tr><td align="center">int</td><td align="center">java.lang.Integer;</td><td align="center">整形</td></tr><tr><td align="center">float</td><td align="center">java.lang.Float;</td><td align="center">单精度浮点数</td></tr><tr><td align="center">double</td><td align="center">java.lang.Double;</td><td align="center">双精度浮点数</td></tr><tr><td align="center">boolean</td><td align="center">java.lang.Boolean;</td><td align="center">布尔类型</td></tr><tr><td align="center">char</td><td align="center">java.lang.Character;</td><td align="center">字符型</td></tr></tbody></table><h2 id="继承关系结构图："><a href="#继承关系结构图：" class="headerlink" title="继承关系结构图："></a>继承关系结构图：</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="继承关系结构图"></p><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">///需求:规定m1方法可以接收java中任何一种数据类型</span>    <span class="token comment" spellcheck="true">//m1方法如果想接收byte类型的数据,可以将byte类型先包装成java.1ang,Byte;再传递参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里Boolean重写了Object的o.toString()方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用常用的布尔构造函数创建对象</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用java.lang.Boolean;包装类型转换成引用类型</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象类型传到形参中</span>        <span class="token function">m1</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ===> true</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringBuffer和StringBuilder(32)</title>
      <link href="/posts/4aba4abd.html"/>
      <url>/posts/4aba4abd.html</url>
      
        <content type="html"><![CDATA[<h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><blockquote><ol><li><p>Java.lang.StringBuffer和Java.lang.StringBuilder是什么？</p><p> 答：是一个字符串缓冲区</p></li><li><p>工作原理</p><p> 预先在内存中申请一块空间,以容纳字符序列,如果预留的空间不够用,则进行自动扩容,以容纳更多字符序列</p></li><li><p>Java.lang.StringBuffer和Java.lang.StringBuilder 和 String最大的区别是什么？</p><p> 答：String是不可变得字符序列,存储字符串常量池中</p><p> ​        StringBuffer底层是一个char数组,但是该char数组是可变的并且可以自动扩容</p></li><li><p>StringBuffer 和 StringBuilder的默认初始化容量是16</p><ul><li>最好在创建 stringBuffer之前,预测 StringBuffer的存储字符数量</li></ul><ul><li><pre><code> 然后再创建 stringBuffer的时候采用指定初始化容量的方式创建StringBuffer</code></pre></li><li><pre><code> 为了减少底层数组的拷贝。提高效率</code></pre></li></ul></li><li><p>在使用字符串拼接时使用String类型会消耗很大内存，可以使用StringBuffer和StringBuilder来进行字符串的拼接</p></li><li><p>StringBuffer和StringBuilder的区别？</p><ul><li><pre><code> stringBuffer是线程安全的。(可以在多线程的环境下使用不会出现问题.)</code></pre></li><li><pre><code> stringBui1der是非线程安全的。(在多线程环境下使用可能出现问题.)</code></pre></li></ul></li></ol></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">            <span class="token comment" spellcheck="true">// 创建字符串缓冲区对象</span>            StringBuffer s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认初始化=16</span>            <span class="token comment" spellcheck="true">// 可以向StringBuffer中追加字符串</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sport"</span><span class="token punctuation">,</span><span class="token string">"PhysicalEducation"</span><span class="token punctuation">,</span><span class="token string">"Sleep"</span><span class="token punctuation">,</span><span class="token string">"Food"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》Sport,PhysicalEducation,Sleep,Food</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="StringBuffer和StringBuilder的区别"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类—String类(31)</title>
      <link href="/posts/e67e1481.html"/>
      <url>/posts/e67e1481.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用类—String类"><a href="#常用类—String类" class="headerlink" title="常用类—String类"></a>常用类—String类</h1><blockquote><p>String类是<strong>不可变</strong>类，也就是说String对象声名后，将<strong>不可修改</strong></p></blockquote><ol><li><p>字符串一旦创建不可再改变，即：”abc”字符一旦创建不可在变成”abcd”<br>  注意：上面说的不可变，是指字符串不可变，但是引用可以重新指向其他字符串。</p></li><li><p>为了提升字符串的访问效率，在程序中使用了“缓存”技术，所以在Java中所有使用”双引号”<br>  括起来的字符串命令都会在”字符串常量池”中创建一份，字符串常量池在方法区中被存储。</p></li><li><p>使用String的时候我们应该注意的问题：尽量不要做字符串频繁的拼接操作，因为字符串一且创建不可改变，只要频繁拼接，就会在<strong>字符串常量池</strong>中创建大量的字符串对象，给垃圾回收带来问题。</p><p> 示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        String a1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String a2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上判断==>true，但是字符类型不推荐以上判断因为遇到以下判断就不是true了；</span>        String a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token operator">==</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上方法==>false，因为一旦创建对象后，引用对象地址指向了不同的内存地址所以不存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals()方法判断==>"</span><span class="token operator">+</span>a3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串常量池</span>        String b1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String b2<span class="token operator">=</span><span class="token string">"cba"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// b1首先会去字符串常量池中搜索是否存在abc，然后如果没有会在字符常量符中存储</span>        <span class="token comment" spellcheck="true">// b2首先会去字符串常量池中搜索是否存在abc，因为存在所以直接提取使用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token operator">+</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一般不推荐以上方法，因为字符串连接会大大降低字符串的"缓存"技术，因为因为字符串           // 一且创建不可改变，只要频繁拼接，就会在字符串常量池中创建大量的字符串对象，给垃</span>        <span class="token comment" spellcheck="true">//圾回收带来问题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以下代码会创建几个对象：</p><pre class="line-numbers language-java"><code class="language-java">    String b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   答：以上对象总共创建了三个对象，<strong>方法区字符串常用池：1个；堆内存: 2个</strong></p></li><li><p>String构造方法</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 字符串常用构造方法</span>        <span class="token comment" spellcheck="true">// 1.</span>        String a1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.</span>        String a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将字符类型转换成阿斯克码值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>abcd</span>        <span class="token comment" spellcheck="true">// 4.</span>        String a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>bc</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'国'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String a5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.</span>        String a6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a6<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串常用方法</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// String常用方法</span>        <span class="token comment" spellcheck="true">// 1. charAt(int index) 返回指定索引处的 char值。</span>        String q1 <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> q2 <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 中</span>        <span class="token comment" spellcheck="true">// 2. endsWith(String suffix) 测试此字符串是否以指定的后缀结尾。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> false</span>        <span class="token comment" spellcheck="true">// 3. indexOf(String str) 返回指定子字符串第一次出现的字符串中的索引。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abcJava"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 3</span>        <span class="token comment" spellcheck="true">// 4. equalsIgnoreCase(String anotherString) 将此String与另一个String比较，忽略了大小写。 如果两个字符串具有相同的长度并且两个字符串中的相应字符等于忽略大小写，则认为它们是相等的忽略大小写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 true</span>        <span class="token comment" spellcheck="true">// 5.  getBytes(String charsetName) 使用命名的字符集将此 String编码为字节序列，将结果存储到新的字节数组中。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q4 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q4<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回阿斯克码值：97 98 99 100</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 6. indexOf(int ch) 返回指定字符第一次出现的字符串中的索引。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.ClassTest.java"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 0</span>        <span class="token comment" spellcheck="true">// 7. lastIndexOf(int ch, int fromIndex) 返回指定字符最后一次出现的字符串中的索引，从指定的索引开始向后搜索。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.ClassTest.java"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 15</span>        <span class="token comment" spellcheck="true">// 8.  length() 返回此字符串的长度。</span>        <span class="token comment" spellcheck="true">// 注意：数组的length是属性，而字符类型的length()是方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"qwr"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>3</span>        <span class="token comment" spellcheck="true">// 9. replaceAll(String regex, String replacement) 将给定替换的给定 regular expression匹配的此字符串的每个子字符串替换。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.Class.Test.Animal.java"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> qwe.Class.Test.Animal.qwe</span>        <span class="token comment" spellcheck="true">// 10. split(String regex, int limit)</span>        String myTime <span class="token operator">=</span> <span class="token string">"2002,03,09"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> myTime2 <span class="token operator">=</span> myTime<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myTime2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myTime2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2002 03 09</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 11. startsWith(String prefix) 测试此字符串是否以指定的前缀开头。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"/abc/efg/hij/"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 true</span>        <span class="token comment" spellcheck="true">// 12.  substring(int beginIndex) 返回一个字符串，该字符串是此字符串的子字符串。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc//efg/hij/"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">/</span>efg<span class="token operator">/</span>hij<span class="token operator">/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc//efg/hij/"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">></span> efg        <span class="token comment" spellcheck="true">//13. toCharArray() 将此字符串转换为新的字符数组。</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c2 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ==> abcd</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 14. toUpperCase() 使用默认语言环境的规则将此 String所有字符转换为大写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ==> ABC</span>        <span class="token comment" spellcheck="true">// 15. toLowerCase() 使用默认语言环境的规则将此 String所有字符转换为小写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ==> abc</span>        <span class="token comment" spellcheck="true">// 16.  trim() 返回一个字符串，其值为此字符串，删除了所有前导和尾随空格，其中space被定义为其代码点小于或等于 'U+0020' （空格字符）的任何字符。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"    a   b   c     "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 17. valueOf(Object obj) 返回 Object参数的字符串表示形式。</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// java.lang.Object@3b6eb2ec内存地址</span>        Object o2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以下输出会不会报空指针异常？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会,因为并不是直接调用 tostring方法, string. valueof( Object)这个方法对空值进行处理了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 null</span>        <span class="token comment" spellcheck="true">// System.out.println(o2.toString()); // 会出现空指针异常：NullPointerException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays工具集(30)</title>
      <link href="/posts/5e6fc76a.html"/>
      <url>/posts/5e6fc76a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays工具集"><a href="#Arrays工具集" class="headerlink" title="Arrays工具集"></a>Arrays工具集</h1><blockquote><ul><li>Arrays是cun公司提供的一个工具集</li><li>该工具主要针对的是数组的操作</li><li>例如：排序/二分等…</li></ul></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二分查找</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12的下标为："</span><span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的常用算法(29)</title>
      <link href="/posts/6298d4a8.html"/>
      <url>/posts/6298d4a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的常用算法"><a href="#数组的常用算法" class="headerlink" title="数组的常用算法"></a>数组的常用算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 冒泡排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> a2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分法查找-折半查找"><a href="#二分法查找-折半查找" class="headerlink" title="二分法查找(折半查找)"></a>二分法查找(折半查找)</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开始下标</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束下标</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>begin<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 中间下标</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组(28)</title>
      <link href="/posts/a17b6fcd.html"/>
      <url>/posts/a17b6fcd.html</url>
      
        <content type="html"><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><ul><li><p>创建静态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历二维数组及二维数组的length的用法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的第一个一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的第一个一维数组中的元素</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二维数组中的一维数组中的第一个元素为："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的最后一个一维数组中的最后一个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个二维数组中的最后一个一维数组中的最后一个元素为："</span><span class="token operator">+</span>a1<span class="token punctuation">[</span>a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a1<span class="token punctuation">[</span>a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"```````````````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token comment" spellcheck="true">// 以下循环控制的是纵向</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下循环控制的是横向</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每次循环循环没个二维数组中的一维数组的每个元素</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历完一维数组后换行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li><p>创建动态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种创建一个动态数组方法：</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上创建的动态数组的意思是：每个二维数组最多创建二个一维数组</span>        <span class="token comment" spellcheck="true">//                         每个一维数组最多创建四个元素</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"```````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种创建一个动态数组方法：</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一维数组(27)</title>
      <link href="/posts/a49053be.html"/>
      <url>/posts/a49053be.html</url>
      
        <content type="html"><![CDATA[<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><p>​    数组中存储元素的类型是统一的，每一个元素在内存中所占的空间大小是相同的，知道数组的首元素的内存地址，要查找的元素只知道下标就可以快速的计算出偏移量，通过首元素内存地址加上偏移量快速计算出要查找元素的内存地址，通过内存地址快速定位该元素，所以数组查找元素的效率较高随机的对数组进行增删元素，当增加的元素的时候，为了保证数组中元素在空间存储上是有序的，所以被添加元素位置后面的所有元素都要向后移动删除元素也是，后面所有的元素要向前移动。所以数组的增删元素的效率很低</p><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><ul><li>创建静态数组语法：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 声名一个int类型的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span>，<span class="token number">200</span>，<span class="token number">300</span>，<span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个boolean类型的数组</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">true</span>，<span class="token boolean">false</span>，<span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个String类型的数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> a3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"qqq"</span>，<span class="token string">"www"</span>，<span class="token string">"eee"</span>，<span class="token string">"rrr"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个byte类型的数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个char类型的数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span>，<span class="token string">'b'</span>，<span class="token string">'c'</span>，<span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个object类型的数组</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a6 <span class="token operator">=</span> <span class="token punctuation">{</span>o1，o2，o3，o4<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>遍历数组及数组的length的用法：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span>，<span class="token number">4</span>，<span class="token number">3</span>，<span class="token number">2</span>，<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组length的用法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中第一个元素为："</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>in<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中最后一个元素为："</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>in<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组的修改：</span>        in<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"````````````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组：</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>in<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组的元素依次为:"</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li>动态初始化一维数组，会先在堆内存中分配这个数组，并且数组中每一个元素都采用默认值。</li></ul><table><thead><tr><th align="center">数据类型</th><th align="center">数据类型</th><th align="center">数据类型</th><th>数据类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">short</td><td align="center">int</td><td>long</td><td align="center">0</td></tr><tr><td align="center">float</td><td align="center">double</td><td align="center"></td><td></td><td align="center">0.0</td></tr><tr><td align="center">boolean</td><td align="center"></td><td align="center"></td><td></td><td align="center">false</td></tr><tr><td align="center">引用类型</td><td align="center"></td><td align="center"></td><td></td><td align="center">null</td></tr></tbody></table><ul><li><p>创建动态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 动态声明一个int类型的数组，最多可以存储i个元素</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 赋值 例如上面声名i个则最多可以创建i个元素</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建对象动态数组：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建对象动态数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// a2[i].toString();</span>            <span class="token comment" spellcheck="true">// Exception in thread "main" java.lang.NullPointerException</span>            <span class="token comment" spellcheck="true">// 空指针异常</span>            Object o <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 使用a2[i].toString();与System.out.println(o);抛出异常的区别：             * 1.使用a2[i].toString();抛出空指针异常             * 2.System.out.println(o);直接抛出null是因为println()底层代码中有一个             * return (obj == null) ? "null" : obj.eoString();             * 所以使用第二种方法不会抛出Error             */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>什么时候使用动态初始化，什么时候使用静态初始化?</p><ol><li>无论是动态初始化还是静态初始化，最终的内存分布都是一样的。</li><li>如果在创建数组的时候，知道数组中应该存储什么数据，这个时候当然采用静态初始化方式，如果在创建数组的时候，无法预测到数组中存储什么数据，只是先开辟空间，则使用动态初始化方式。</li></ol></li><li><p>数组的拷贝</p><p>  语法：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>数据源<span class="token punctuation">,</span>源数组的开始下标<span class="token punctuation">,</span>目标数组<span class="token punctuation">,</span>目标数组的开始下标<span class="token punctuation">,</span>拷贝长度<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数据源是指拷贝的数据源，目标数组是指的是拷贝的指定数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.arraycopy(数据源,源数组的开始下标,目标数组,目标数组的开始下标,拷贝长度);</span>        <span class="token comment" spellcheck="true">// 数据源是指拷贝的数据源，目标数组是指的是拷贝的指定数组</span>         System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>dest<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常-方法的覆盖(26)</title>
      <link href="/posts/4cf7d7a5.html"/>
      <url>/posts/4cf7d7a5.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常-方法的覆盖"><a href="#异常-方法的覆盖" class="headerlink" title="异常-方法的覆盖"></a>异常-方法的覆盖</h1><blockquote><p>重写的方法不能比父类重写的方法更宽泛。</p></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法一(错误方法)</span><span class="token comment" spellcheck="true">/*public class ErrorTest06 {    public void m1() throws FileNotFoundException {        System.out.println("父类方法");    }}class a extends ErrorTest06 {    public void m1() throws IOException {        System.out.println("子类方法");    }    public static void main(String[] args) {        public static void main(String[] args) {            try {                m1();            }catch (FileNotFoundException e) {                e.printStackTrace();            }        }        //        // java: javase2.day02.javareview02.a中的m1()无法覆盖javase2.day02.javareview02.ErrorTest06中的m1()        // 被覆盖的方法未抛出java.io.IOException        //    }}*/</span><span class="token comment" spellcheck="true">// 方法二(正确方法)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token keyword">extends</span> <span class="token class-name">ErrorTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义异常(25)</title>
      <link href="/posts/842032b.html"/>
      <url>/posts/842032b.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>自定义异常通常继承于 Exception或 RuntimeException,到底继承那个应该看具体情况来定。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理继承图"></p><ol><li><p>编译时异常,直接继承 Exception。</p><blockquote><p> (Exception)编译时异常：</p><ul><li>程序正确，但因为外在的环境条件不满足引发。例如：用户错误及I/O问题—-程序试图打开一个并不存在的远程Socket端口。</li><li>这不是程序本身的逻辑错误，而很可能是远程机器名字错误(用户拼写错误)。对商用软件系统，程序开发者必须考虑并处理这个问题。</li><li>Java编译器强制要求处理这类异常，如果不捕获这类异常，程序将不能被编译。</li></ul></blockquote></li><li><p>运行时异常,直接继承 RuntimeException。</p></li></ol><blockquote><p>(RuntimeException)运行时异常：</p><ul><li> 这意味着程序存在bug，如数组越界，0被除，入参不满足规范…..这类异常需要更改程序来避免，Java编译器强制要求处理这类异常。</li></ul></blockquote><p>实例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest05</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 顾客相关的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalNameException  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 完成注册</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建异常对象</span>            IllegalNameException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalNameException</span><span class="token punctuation">(</span><span class="token string">"用户名位数不能少于7位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 手动抛出异常对象</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalNameException</span><span class="token punctuation">(</span><span class="token string">"用户名位数不能少于7位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            throw new IllegalNameException("用户名位数不能少于7位");</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 代码如果执行到这里，则用户名是合法的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册成功！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ErrorTest05Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟注册</span>        <span class="token comment" spellcheck="true">// 假如用户提供用户名如下</span>        String userName <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册</span>        ErrorTest05 s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorTest05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalNameException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IllegalNameException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 编译时异常</span><span class="token comment" spellcheck="true">//class IllegalNameException extends RuntimeException { // 运行时异常</span>    <span class="token comment" spellcheck="true">// 定义异常一般提供两个构造方法</span>    <span class="token keyword">public</span> <span class="token function">IllegalNameException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">IllegalNameException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final、 finalize和 finally(24)</title>
      <link href="/posts/27802474.html"/>
      <url>/posts/27802474.html</url>
      
        <content type="html"><![CDATA[<h1 id="final、-finalize和-finally区别"><a href="#final、-finalize和-finally区别" class="headerlink" title="final、 finalize和 finally区别"></a>final、 finalize和 finally区别</h1><h2 id="final：java中的关键字，修饰符。"><a href="#final：java中的关键字，修饰符。" class="headerlink" title="final：java中的关键字，修饰符。"></a>final：java中的关键字，修饰符。</h2><p>用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</p><h2 id="finalize：java的一种异常处理机制。"><a href="#finalize：java的一种异常处理机制。" class="headerlink" title="finalize：java的一种异常处理机制。"></a>finalize：java的一种异常处理机制。</h2><p>finalize()是在对象内存回收前被调用一次异常处理语句，属于异常处理语句结构的一部分，表示总是执行。</p><h2 id="finally：中的一个方法名。"><a href="#finally：中的一个方法名。" class="headerlink" title="finally：中的一个方法名。"></a>finally：中的一个方法名。</h2><p>Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档中的is-a、is-like-a、has-a(22)</title>
      <link href="/posts/3c26ee52.html"/>
      <url>/posts/3c26ee52.html</url>
      
        <content type="html"><![CDATA[<h1 id="文档中的is-a、is-like-a、has-a"><a href="#文档中的is-a、is-like-a、has-a" class="headerlink" title="文档中的is-a、is-like-a、has-a"></a>文档中的is-a、is-like-a、has-a</h1><h2 id="is-a"><a href="#is-a" class="headerlink" title="is-a"></a>is-a</h2><ul><li>指的是类与类之间的继承关系</li></ul><h2 id="is-like-a"><a href="#is-like-a" class="headerlink" title="is-like-a"></a>is-like-a</h2><ul><li>指的是接口与类之间的泛化关系(实现关系)</li></ul><h2 id="has-a"><a href="#has-a" class="headerlink" title="has-a"></a>has-a</h2><ul><li>指的是类与变量/方法之间的关联关系</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error异常信息(23)</title>
      <link href="/posts/72d577b3.html"/>
      <url>/posts/72d577b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Error异常信息"><a href="#Error异常信息" class="headerlink" title="Error异常信息"></a>Error异常信息</h1><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理"></p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><ol><li><p>作用：如果在构造方法声明位置上使用 throws(向上抛)，则谁被调用需要使用throws或者try catch。</p></li><li><p>注意：throws只能往上报但是不能解决根本问题</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 异常     * throws 和 try catch     * throws：     * 1.如果在构造方法声明位置上使用 throws(向上抛)则谁调用它谁就要解决这个问题或者继续往上抛出才可以运行，     * 2.严格意义上来说throws不能够解决error报错，throws只能网上报但是不能够解决根本问题     * try catch：     * 1.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C://txt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * FileInputstream构造方法声明位置上使用 throws(向上抛)        * java: 未报告的异常错误java.io.FileNotFoundException; 必须对其进行捕获或声明以便抛出        */</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以继续往下执行~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * 在程序运行过程中发生了 FilNotFoundException类型的异常        * JVM为我们创建了一个FilNotFoundException类型的对象        * 该对象中携带以下的信息。        * 负责将该对象的信息打印到控制台并且JVM停掉了程序的运行        *   Exception in thread "main" java.io.FileNotFoundException: C:\txt.txt (系统找不到指定的文件。)            at java.base/java.io.FileInputStream.open0(Native Method)            at java.base/java.io.FileInputStream.open(FileInputStream.java:219)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:157)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:112)            at javase2.day02.javareview02.ErrorTest01.m3(ErrorTest01.java:23)            at javase2.day02.javareview02.ErrorTest01.m2(ErrorTest01.java:20)            at javase2.day02.javareview02.ErrorTest01.m1(ErrorTest01.java:17)            at javase2.day02.javareview02.ErrorTest01.main(ErrorTest01.java:30)        */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><ol><li><p>catch可以写多个,但是必须从上到下,从小到大捕捉，不然会报异常。</p></li><li><p>如果在try语句块中首次出现异常则在try语句块中后面语句不在执行。</p></li><li><p>catch的参数变量中的Object的toString方法重写了，不是一个存储地址，而是一个字符串。</p></li><li><p>语法：</p></li></ol><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">try</span> <span class="token punctuation">{</span>      可能出现异常的代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>      处理异常代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>      处理异常代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//       情况一.</span>        <span class="token comment" spellcheck="true">/*try {            FileInputStream fis = new FileInputStream("abc");            // 以上FileInputStreamerror属于FileNotFoundException错误            fis.read();            // 以上fis.read()属于IOException错误            // 因为FileNotFoundException属于IOException的子类            // 如果解决一个问题则会报错：            // java: 未报告的异常错误java.io.IOException; 必须对其进行捕获或声明以便抛出        } catch (FileNotFoundException e) {            System.out.println("执行1111");        } catch (IOException e) {            System.out.println("执行2222");        }*/</span><span class="token comment" spellcheck="true">//       情况二.</span>        <span class="token comment" spellcheck="true">/*try {            FileInputStream fis = new FileInputStream("abc");            // 以上FileInputStreamerror属于FileNotFoundException错误            // 注意：FileNotFoundException属于IOException的子类            fis.read();            // 以上fis.read()属于IOException错误        } catch (IOException e) {            System.out.println("执行2222");        } catch (FileNotFoundException e) {            System.out.println("执行1111");        }*/</span>        <span class="token comment" spellcheck="true">/*         * 报错：java: 已捕获到异常错误java.io.FileNotFoundException         * catch只能从小(子类)到大(父类)处理异常         * 如果从大(父类)到小(子类)会报错         * */</span><span class="token comment" spellcheck="true">//       情况三.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在try语句块中首次出现异常则在try语句块中后面语句不在执行~</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行2222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 报错：java: 已捕获到异常错误java.io.FileNotFoundException         * catch只能从小(子类)到大(父类)处理异常         * 如果从大(父类)到小(子类)会报错         * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="throws与try-catch区别："><a href="#throws与try-catch区别：" class="headerlink" title="throws与try catch区别："></a>throws与try catch区别：</h2><ol><li>（throws）实际例子：小王是公司小职员因操作不当让公司赔了100W，则小王给项目经理报，而项目经理给部门经理报，部门经理给董事长报，董事长宣布公司破产。其中：部门经理知道后将此事一直未的到解决直到报给董事长（JVM）就相当于直接报给JVM虚拟机停止运行。</li><li>（try catch）实际例子：小王是公司小职员因操作不当让公司赔了100W，则小王给项目经理报，而项目经理知道后给部门经理报，部门经理知道后将此事解决了，则不需要往上级报了只需要继续工作即可。其中：部门经理知道后将此事解决就是try catch</li></ol><h2 id="getMessage-与-printStackTrace-方法"><a href="#getMessage-与-printStackTrace-方法" class="headerlink" title="getMessage() 与 printStackTrace()方法"></a>getMessage() 与 printStackTrace()方法</h2><ol><li><p>取得异常描述信息：getMessage()</p></li><li><p>取得异常的堆栈信息(<strong>比较适合于程序调试阶段</strong>)：printStackTrace()</p></li><li><p>代码示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c://txt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            * java.io.FileNotFoundException: c:\txt.txt (系统找不到指定的文件。)            at java.base/java.io.FileInputStream.open0(Native Method)            at java.base/java.io.FileInputStream.open(FileInputStream.java:219)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:157)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:112)            at javase2.day02.javareview02.ErrorTest03.main(ErrorTest03.java:10)            * */</span>            <span class="token comment" spellcheck="true">//以下输出的是上面printStackTrace错误信息的一部分</span>            String s <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c:\txt.txt (系统找不到指定的文件。)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Wrold！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="finllay语句块"><a href="#finllay语句块" class="headerlink" title="finllay语句块"></a>finllay语句块</h2><ol><li><p>finally语句块可以直接和try语句块联用。try… finally…</p></li><li><p>try…catch…finally…也可以</p></li><li><p>在finally语句块中的代码是一定会执行的</p></li><li><p>在实际开发应用场景：finally语句块是一定会执行的,所以通常在程序中为了保证某资源一定会释放，所以一般在finally语句块中释放资源。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 情况一</span>        <span class="token comment" spellcheck="true">/*try {            System.out.println("执行结果1~~");            return;        }finally {            System.out.println("执行结果2~~");        }*/</span>        <span class="token comment" spellcheck="true">/*         * 以上程序的执行顺序：         * 1. 先执行try语句块中的System         * 2. 在执行finally语句块中的System         * 3. 最后执行try语句块中的return结束main方法         * 注意：一旦出现return则该方法自动关闭，除特殊情况如：finally语句块         */</span>        <span class="token comment" spellcheck="true">// 情况二</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*以上程序的执行顺序：         * 1. 初始化i变量         * 2. 执行try语句中的i = 10 并将i变量存储给temp变量         * 3. return temp变量         * 4. 执行finally中的i++         */</span>        <span class="token comment" spellcheck="true">/*            int i = 0;            try{                i = 10;                int temp = i;                return temp;            }finally {                i++;            }        */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致自己的一封信</title>
      <link href="/posts/b585e161.html"/>
      <url>/posts/b585e161.html</url>
      
        <content type="html"><![CDATA[<h2 id="致自己的一封信"><a href="#致自己的一封信" class="headerlink" title="致自己的一封信"></a>致自己的一封信</h2><p>亲爱的：</p><p>你好！    </p><p>​      时光飞逝，转眼间，自己已即将步入大二了，即将成为一名临近毕业的大学生，想想上一次还在憧憬大学的美好生活而现在已经过了一半，二年后的现在的你非常感谢二年前的你，因为你在二年前的对编程的坚持不懈，对编程的不放弃，在高中后，对编程充满热爱的你，如愿以偿上到自己所热爱的专业：软件工程，所以再次，在这里，感谢你一直以来的坚持不懈！所以决定给在给自己迷茫、焦虑、找不到生活与学习方向时写一封信，谨此激励自己。</p><ol><li><p>关于学业👨‍🎓</p><p>两年前你以一个极差的成绩进入到一所自己失望的大学，但是庆幸的是你痛下决心要接本，在这里想告诉你的是不要回头，坚持往前走，哪怕前路生无可恋这也是当初你自己选的路，都是成年人了要学会承担自己做的每个决定，这一路你可以哭、可以奔溃、但是绝不能回头。不论人生的任何时候，你都要一直努力和自律。不要因为一时的努力而感动了自己，这个世界上不缺乏努力的人，努力是生活的常态而不是一时的兴起。努力学习和自律成就更好的自己，在大学期间拿到更多的证书，得到更多的实习机会，成为更优秀的自己，不必太过于在意他人的目光，希望你要学会<strong>忍受孤独，因为能登上山顶的人很少</strong>。“努力奔跑是为了追上那个曾经被寄予厚望的自己。”<strong>愿你的成熟不是被迫，学着笑而不语，学着承认不相信，学着接受不尽人意。</strong>我知道，你是个急性子，但请慢慢来，不着急。</p></li><li><p>关于家人👨‍👧‍👦<br> 你一定要孝敬你的父母。因为有他们的存在你才有了现在的生活，他们辛勤的付出，只为你能拥有快乐幸福。不论身处何地都要与他们经常联系，与他们沟通交流，多多关心他们。不要等到在未来的一天，他们苍颜白发，你才想起他们的好，希望你永远的理解他们，他们把最好的都给我们，我也应当全力付出对他们好，他们和我血浓于水，所以一定要好好对待他们，可能有时候与父母会有一些分歧，但请你一定不要像以前那样不耐烦，学会体会他们对你爱的表达方式。</p></li><li><p>关于爱情👩‍❤‍👨</p><p> 知道你遇到几次挫败的爱情，但你要始终相信只是因为你没有遇到动心的女生。世界这么大，爱情之事就是可遇不可求。愿你经历过人间桑桑最后觉得世间一定会有一个值得自己去呵护爱护的女孩子，要知道任何一个优秀的人从来不缺优秀的追随者，这个时代不乏有许多优秀的女孩子，只是自己还没遇到而已，所以要努力、要优秀、要不负众望。</p></li><li><p>关于生活🌃</p><p> 我知道你一直是一个会照顾自己的人，但在这里还是要啰嗦几句：</p><p> <strong>作息</strong>：希望你在以后的日子里能够少熬夜，保持每天都在晚上11:00之前睡觉（除非特殊情况），一个好的睡眠不仅可以有效的解决你整个人的精神状态，还能提高自己学习的专注力。</p><p> <strong>生活</strong>：你Get到了一些技能，比如拿到了驾照，同时也开始记账，这在一定程度上还是帮助你节省了一些不必要的开支。也开始尝试着每天制定学习计划，这样让你以后学习中能够有明确地目标。</p><p> <strong>饮食</strong>：俗话说身体是革命的本钱，所以所有的基础都是在照顾好自己的基础上，我知道你是一个不喜欢吃早饭的人，但是在以后日子希望你能吃早饭，因为你不可以这么自私，你已经长大了，要知道以后父母还是需要你的，所以即使不为别人也要替自己父母想想，不要让他们担心你。</p><p> <strong>运动</strong>：知道你一直以来都是一个千年老宅男，但是有时候还是要出去运动运动，因为一个人的学习与事业是否成功的前提都是要有一个好的身体，所以即使自己在忙也要出去适当的运动运动。</p></li><li><p>关于兴趣爱好方面👨‍💻</p><p>编程：从高中时候你就对编程一发不可收拾，我知道你不仅对编程是热爱更是以后要从事的相关IT行业，所以，一定要对自己要求严格些，不能像以前那样毛毛躁躁，什么    HTML、JavaScript、Java都懂一点点基本的，你要开始学会静下心来从熟练一门语言再到另一门语言，我知道你一直以来都羡慕互联网大佬们所做的项目，但请你相信只要你坚持下来他们有的你也一定可以！！！</p><p>绘画、设计：一直以来你的绘画与设计都是背编程所耽误，主要原因是专接本以及编程事情比较多的原因，你一直没能静下心来好好绘画和设计、希望等你上岸后能慢慢拾起你的爱好。</p></li><li><p>关于性格🎯</p><p>一直以来你也算比较了解自己，曾经也问了很多人你这个人怎样？这个问题，所以二十多年来也相对来说比较了解自己在这里不妨我说一说：</p><p>做事太急躁，总想着快速到达自己想要的高度，但是有些事情不是你着急所有的就一下能完成，所以做事的时候多思考一步，分类汇总，然后把做事的标准明确好，确保每天都能把自己设定好的目标完成。</p><p>说话有时候不过脑子这个缺点其实你一直未曾改变，在这里引用一句《小窗幽记·集醒篇》所记的”多读两句书，少说一句话，读得两行书，说得几句话。“所以少说话，多读书才是你现在主要做的事情。</p><p>做成点作品太容易自傲：可以理解你现在的年纪太急于炫耀，但是还是时刻要谨记：天外有天人外有人，学会自谦。比你优秀的大佬还是有很多，所以一定要学会谦虚受教。</p><p>打开某个软件打算做一件事经常性被其他事务所吸引，时刻提醒自己当前在做什么别轻易分心。</p><p>在做事情没有做完之前，一定不要轻易张扬出去。因为一旦没有成功，不但事情没有完成，还会让自己的同学和朋友取笑！所以时刻谨记先行，其言而后从之~~</p></li></ol><p>​      愿你在最无趣无力的日子仍对世界保持好奇，撑不住了就去睡一觉。等等再说，世界很大，随时都会绽放奇迹。生活无需向任何人知会，就把坏心情强加给我们，然后又自作主张的收起，抛给我们一天彩虹或阴云。但也教会我们认清一些无法辨明的人事，不再坚持和固执。宽宥人生，迷茫和努力的时间，考量了我们承受与隐忍的能力，生命也因此变得厚重。这也许就是“经历”的意义所在。只是错误的命题再怎么证明也不会对！</p><p>​      最后，愿你奋力拼搏，去感受世间百态，愿你内心平静而强大，活的恣意潇洒；愿你在这鲜活而张扬的年纪，坦言不枉此生。切记一点：不忘初心，方得始终。不觉写了这么多，希望你别把”它们“变成空话，未来是什么样的就交给未来的自己回答吧，但别忘了自己最初的梦想。</p><p>祝：</p><p>一生久安，岁月无扰！</p><p>2021年08月24日</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习/生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决git push 443超时</title>
      <link href="/posts/6204da2e.html"/>
      <url>/posts/6204da2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="解决git-push-pull-clone操作时的443错误-GitHub无法访问问题"><a href="#解决git-push-pull-clone操作时的443错误-GitHub无法访问问题" class="headerlink" title="解决git push/pull/clone操作时的443错误/GitHub无法访问问题"></a>解决git push/pull/clone操作时的443错误/GitHub无法访问问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近从学校回到家打算使用家里的台式机来学习，但是下载完<code>Git</code>时候，使用git push发现总是等待长时间之后会返回Failed to connect to github.com port 443: Operation timed out错误，然后全程懵逼，不管git push/pull还是git clone都是全程超时(一脸懵逼)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>经过这两天的搜索终于从网上搜索到几种办法，在这里记录下，同时也分享给需要的小伙伴：</p><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><p>这种情况是自己没有代理(科学上网)，可以使用UsbEAm Hosts Editor这款软件修改DNS地址选择最低的延迟从而达到可以访问GITHUB的目的(前提是<strong>Git没有设置代理！！！Git没有设置代理！！！Git没有设置代理！！！重要事情说三遍</strong>~ . ~，如果设置代理用下面命令行取消Git代理即可)</p><p>UsbEAm Hosts Editor<a href="https://www.dogfight360.com/blog/475/">下载地址</a></p><p>【附使用教程】UsbEAm Hosts Editor<a href="https://jingyan.baidu.com/article/eae07827e9bef65eec5485fc.html">使用教程</a></p><p>使用教程和以上教程类似，只需要选择Github即可，选择低延迟的DNS</p><p>修改完毕使用CMD命令 ipconfig /flushdns 刷新下本地DNS缓存数据 （需要管理员权限）</p><h3 id="情况二："><a href="#情况二：" class="headerlink" title="情况二："></a>情况二：</h3><p>这种情况与上面情况类似，但是不需要UsbEAm Hosts Editor软件,但是需要手动修改DNS</p><p><a href="https://juejin.cn/post/6844904193170341896">参考文档</a></p><h3 id="情况三："><a href="#情况三：" class="headerlink" title="情况三："></a>情况三：</h3><p>这种情况是自己有代理(科学上网)自己可以查询下本机的代理端口(不知道自己代理端口的建议谷歌搜索教程这里不再叙述了)，然后给Git设置代理端口如下命令：</p><blockquote><p>设置Git全局代理</p></blockquote><p>以下是设置socks端口命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global http.proxy 'socks5://127.0.0.1:1080' // 1080替换成自己本机socks的端口名git config --global https.proxy 'socks5://127.0.0.1:1080' // 1080替换成自己本机socks的端口名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是设置http/s端口命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global http.proxy 'http://127.0.0.1:1080' // 1080替换成自己本机http的端口名git config --global https.proxy 'http://127.0.0.1:1080' // 1080替换成自己本机https的端口名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是删除全局代理命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global --unset http.proxygit config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是查看全局是否设置代理(如果没设置则不显示)</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global --get http.proxygit config --global --get https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="总结：以上三种情况结合自身而定，有时候git-push-pull-clone不上去有可能是网络问题，可以试试换下网络是否可以使用。"><a href="#总结：以上三种情况结合自身而定，有时候git-push-pull-clone不上去有可能是网络问题，可以试试换下网络是否可以使用。" class="headerlink" title="总结：以上三种情况结合自身而定，有时候git push/pull/clone不上去有可能是网络问题，可以试试换下网络是否可以使用。"></a>总结：以上三种情况结合自身而定，有时候git push/pull/clone不上去有可能是网络问题，可以试试换下网络是否可以使用。</h3>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二上学期目标</title>
      <link href="/posts/86c777df.html"/>
      <url>/posts/86c777df.html</url>
      
        <content type="html"><![CDATA[<h1 id="大二上学期目标🏳️‍🌈"><a href="#大二上学期目标🏳️‍🌈" class="headerlink" title="大二上学期目标🏳️‍🌈"></a>大二上学期目标🏳️‍🌈</h1><h3 id="一-专业知识📘"><a href="#一-专业知识📘" class="headerlink" title="一. 专业知识📘"></a>一. 专业知识📘</h3><ol><li><p>JavaSE基础(147节课每天学5节课，30天学完) (9月份学完)</p></li><li><p>MySQL数据库 (10月份学完)</p><ul><li>Mysql</li><li>jdbc：Java语言连接数据库。（使用java语言对数据库中数据进行增删改查等操作。）</li></ul></li><li><p>JavaWeb和Web前端(10月学完)</p></li><li><p>JavaSE学完    - Servlet    - JSP</p></li><li><p>Javaweb项目实战和SSM(11月份学完)</p><ol><li>Web前端<ul><li>HTML</li><li>CSS</li><li>JavaScript</li><li>AJAX</li><li>JQuery</li></ul></li></ol></li><li><p>Javaweb项目实战 </p><ul><li>基于Servlet + JSP + MySQL + JDBC + HTML + CSS + JavaScript + JQuery + AJAX能做一个Web项目。 </li></ul></li><li><p>SSM框架</p><ul><li>MyBatis</li><li>Spring</li><li>SpringMVC</li></ul></li><li><p>SSH（有时间就学） </p></li><li><p>互联网分布式开发</p></li><li><p>学习算法和刷力扣(12月学完)</p></li></ol><h3 id="二-专业知识📘"><a href="#二-专业知识📘" class="headerlink" title="二. 专业知识📘"></a>二. 专业知识📘</h3><ol><li><p>数学</p><ul><li><p>高数暑假班(线上班)</p></li><li><p>日常刷题</p></li><li><p>尚学：周六日上课</p></li></ul></li><li><p>英语：</p><ol><li><p>词汇：(每天必背)</p><ul><li>高中背完复习</li><li>日常单词20个/天</li></ul></li><li><p>语法：(待定)</p><ul><li><p>尚学：周六日上课</p></li><li><p>线上有课就学(看情况学)</p></li></ul></li></ol></li><li><p>微机原理与接口（含汇编语言）(10)</p><ul><li>学暑假班微机原理课程</li></ul></li><li><p>C语言(待定)</p><ol><li> C 语言程序的结构</li><li> 数据类型及其运算</li><li> 顺序结构程序设计</li><li> 选择结构程序设计</li><li> 循环结构程序设计</li><li> 数组</li><li> 函数</li><li> 预处理命令4</li><li> 指针</li><li> 结构体与共用体</li><li> 位运算</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习/生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和类之间的关系(21)</title>
      <link href="/posts/83141a13.html"/>
      <url>/posts/83141a13.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-类与类之间的关系"><a href="#Java-类与类之间的关系" class="headerlink" title="Java 类与类之间的关系"></a>Java 类与类之间的关系</h1><h2 id="一、继承关系"><a href="#一、继承关系" class="headerlink" title="一、继承关系"></a>一、继承关系</h2><p><strong>继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。</strong> 在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="继承关系"></p><h2 id="二、实现关系"><a href="#二、实现关系" class="headerlink" title="二、实现关系"></a>二、实现关系</h2><p><strong>实现指的是一个class类实现interface接口（可以 是多个）的功能，实现是类与接口之间最常见的关系。</strong> 在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png" alt="实现关系"></p><h2 id="三、依赖关系"><a href="#三、依赖关系" class="headerlink" title="三、依赖关系"></a>三、依赖关系</h2><p><strong>简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。</strong> 比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，为类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p><h2 id="四、关联关系"><a href="#四、关联关系" class="headerlink" title="四、关联关系"></a>四、关联关系</h2><p>关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。<strong>表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</strong> 在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="关联关系"></p><h2 id="五、聚合关系"><a href="#五、聚合关系" class="headerlink" title="五、聚合关系"></a>五、聚合关系</h2><p><strong>聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</strong> 比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="聚合关系"></p><h2 id="六、组合关系"><a href="#六、组合关系" class="headerlink" title="六、组合关系"></a>六、组合关系</h2><p><strong>组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，</strong> 比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="组合关系"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类总结(20)</title>
      <link href="/posts/d76d1ee1.html"/>
      <url>/posts/d76d1ee1.html</url>
      
        <content type="html"><![CDATA[<h1 id="内部类总结"><a href="#内部类总结" class="headerlink" title="内部类总结"></a>内部类总结</h1><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ol><li><p>概述：</p><ul><li>静态内部类可以等同看作静态方法/变量</li></ul></li><li><p>作用：</p><ul><li>静态内部类可以访问它的外部类中的私有属性和方法</li></ul></li><li><p>总结:</p><ul><li>静态内部类里面可以直接访问外部类的静态数据，但<strong>无法</strong>直接访问成员变量及方法</li><li>静态内部类可以添加修饰符public、protected、缺省</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name <span class="token operator">=</span> <span class="token string">"我是一个成员变量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String a1 <span class="token operator">=</span> <span class="token string">"我是一个静态常量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声名一个静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">static1</span><span class="token punctuation">{</span>        String c<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态内部类里面的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态内部类里面的成员方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态变量</span>            <span class="token comment" spellcheck="true">// System.out.println(name);   // 成员变量编译报错 --------> java: 无法从静态上下文中引用非静态 变量 name</span>            <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>            <span class="token comment" spellcheck="true">// sum(1,2); // 成员方法编译报错 --------> java: 无法从静态上下文中引用非静态 方法 sum(int,int)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StaticClass<span class="token punctuation">.</span>static1<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>        <span class="token comment" spellcheck="true">// StaticClass.static1.c2();   // 静态方法 --------> java: 无法从静态上下文中引用非静态 方法 c2()</span>        StaticClass<span class="token punctuation">.</span>static1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态内部类方法测试</span>        <span class="token comment" spellcheck="true">// 创建静态内部类</span>        StaticClass<span class="token punctuation">.</span>static1 e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticClass<span class="token punctuation">.</span>static1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>概述：</p><ul><li>成员内部类可以等同看作成员方法/变量</li></ul><p>作用：</p><ul><li>成员内部类可以访问它的外部类中的私有属性和方法</li></ul><p>总结：</p><ul><li>成员内部类可以直接访问外部类的所有属性和方法</li><li>成员内部类<strong>不可以有静态声名</strong>(包括所有含有static的关键字)</li><li>成员内部类可以添加修饰符public、protected、缺省</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MembersClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name <span class="token operator">=</span> <span class="token string">"我是一个成员变量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String a1 <span class="token operator">=</span> <span class="token string">"我是一个静态常量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声名一个成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">static1</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// public static int num = 10; // 静态变量编译报错： ---> 'static' 仅允许在常量变量声明中使用</span>        String c<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token comment" spellcheck="true">// 成员方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个成员内部类的成员方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量</span>            <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>            <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建外部类对象</span>        MembersClass e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembersClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MembersClass<span class="token punctuation">.</span>static1 e2 <span class="token operator">=</span> e1<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">static1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 测试</span>        e2<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"这是一个成员内部类的成员变量"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        e2<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>作用：</p><ul><li>局部内部类的使用保证全局方法和变量不会被污染从而运行出错</li></ul><p>总结：</p><ul><li>局部内部类只在当前方法中有效</li><li>在JDK8及以上版本中，可以不使用final修饰，但是也不可以二次赋值，如果局部变量被内部类访问，那么该局部变量相当于自动使用了final修饰</li><li>局部内部类中不能定义 static 成员</li><li>局部内部类中还可以包含内部类，但是这些内部类也不能使用访问控制修饰符（public、private 和 protected）和 static 修饰符修饰</li><li>在局部内部类中可以访问外部类的所有成员</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalClass</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">11000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">b1</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 外部方法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 外部方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// a = 100; // 编译报错 ----> java: 从内部类引用的本地变量必须是最终变量或实际上的最终变量</span>        b1 local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        local<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LocalClass localClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localClass<span class="token punctuation">.</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>概述：</p><ul><li>匿名内部类：其实就是一个匿名子类对象</li><li>格式：new 父类or接口（）{子类内容}</li></ul><p>总结：</p><ul><li>匿名内部类优点：可以少定义一个类</li></ul><ul><li>匿名内部类缺点：无法重复利用</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i</span><span class="token punctuation">(</span>a1 a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种方法：调用a2接口</span>        <span class="token function">i</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种方法：调用m1方法,可以使用匿名内部类</span>        <span class="token function">i</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接口</span><span class="token keyword">interface</span> <span class="token class-name">a1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种方法：实现a1接口</span><span class="token keyword">class</span> <span class="token class-name">a2</span> <span class="token keyword">implements</span> <span class="token class-name">a1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object中方法(19)</title>
      <link href="/posts/8fa6bab.html"/>
      <url>/posts/8fa6bab.html</url>
      
        <content type="html"><![CDATA[<h1 id="Object中方法"><a href="#Object中方法" class="headerlink" title="Object中方法"></a>Object中方法</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><ul><li>object中自带方法有(详见文档)</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/ObjectLang.png" alt="Object方法"></p><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><ol><li><p>返回该对象的字符串表示</p></li><li><p>有时候有的项目SUN公司给的方法不满足于项目需求所以需要重写SUN公司中的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToString</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">ToString</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写SUN公司中的Object.lang中的toString的方法</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"toStrimg"</span> <span class="token operator">+</span> <span class="token string">"[name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">",age： "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">class</span> <span class="token class-name">ToStringTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToString toString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToString</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-->toStrimg[name: 小王,age： 30]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="equals-Object-obj-方法"><a href="#equals-Object-obj-方法" class="headerlink" title="equals(Object obj)方法"></a>equals(Object obj)方法</h2><ol><li><p>指示其他某个对象是否与此对象“相等”。</p></li><li><p>object中的equals方法比较的是内存地址，而在现实的业务逻辑当中,不应该比较内存地址,应该比较内容，所以 Object中的 equals方法也要重写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Equals</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个身份证号</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个姓名</span>    <span class="token comment" spellcheck="true">// constructor</span>    <span class="token keyword">public</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Equals equals1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Equals equals2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>equals1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>equals2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串之间的比较</span>        String a1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1 <span class="token operator">==</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果使用“==”比较字符串返回  ---》 false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// equals方法在Object中比较的是两个内存地址是否相同</span>        <span class="token comment" spellcheck="true">// 但是在String中的equals在String中比较的是内容是否相同(String继承自Object)，</span>        <span class="token comment" spellcheck="true">// 说明String重写了父类(Object)中的equals方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前对象和要比较的对象的内存地址相同，则说明这两个对象是相同的（值也是相同的）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 因为形参中创建的Object中不含有id这个成员变量所以需要父(Object) -----> 子(Equals)向下转型</span>        <span class="token comment" spellcheck="true">// Equals默认继承于Object对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Equals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果这个对象属于Equals这个类</span>            Equals s <span class="token operator">=</span> <span class="token punctuation">(</span>Equals<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> s<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// s.name == this.name (关于字符串类型比较的不是内存地址而是字符串是否相同)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h2><ol><li><p>System.gc() 运行垃圾回收器。</p></li><li><p>finalize()当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalize</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写Object中的finalize方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建要给finalize方法</span>        <span class="token comment" spellcheck="true">// Finalize p = this;</span>        <span class="token comment" spellcheck="true">// 注意: 运行GC不一定回收可以将当前地址引用给其他堆内存中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"垃圾即将被回收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Finalize finalize1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        finalize1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：程序猿只能”建议“GC回收垃圾</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h2><ol><li><p>返回该对象的哈希码值。支持此方法是为了提高哈希表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashCode hashCode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回一个哈希值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCode1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装及配置(01)</title>
      <link href="/posts/161b8ec9.html"/>
      <url>/posts/161b8ec9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git安装及配置"><a href="#Git安装及配置" class="headerlink" title="Git安装及配置"></a>Git安装及配置</h1><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Git_picture.jpg"></p><h2 id="Git概述："><a href="#Git概述：" class="headerlink" title="Git概述："></a>Git概述：</h2><p>​    Git是一个分布式开发的软件，它是由多人协作共同完成一个项目的软件，同时<strong>Github</strong>也是一个全球最大的开源社区，拥有着丰富的开源项目资源。</p><h2 id="Git个人用处："><a href="#Git个人用处：" class="headerlink" title="Git个人用处："></a>Git个人用处：</h2><ol><li>学会Git以后可以在任何地方，直接调用自己写的Code。</li><li>同时如果后期需要多人开发也可以直接协同开发，不需要后期在学了。</li><li><strong>github</strong>上拥有众多的开源项目，可以自己学习以及实践一些项目。</li></ol><h2 id="GIt安装："><a href="#GIt安装：" class="headerlink" title="GIt安装："></a>GIt安装：</h2><ol><li>安装Git可以直接去官网下载，也可以直接从软件管家中下载。</li><li>安装完毕，直接点击安装Next即可。（ps：我也不懂英文）…</li></ol><h2 id="Git基本配置"><a href="#Git基本配置" class="headerlink" title="Git基本配置"></a>Git基本配置</h2><ol><li><p>新建一个项目，右击点击该项目的文件夹，点击Git Bash Here。</p></li><li><p>新电脑初次打开需要配置Git的邮箱和用户名，用于Git识别此电脑身份。</p></li><li><p>配置邮箱和用户名。</p><ul><li>git config –global user.name ‘用户名称’<br>  设置用户名</li><li>git config –global user.email ‘登录邮箱’<br>  设置邮箱</li><li>git config user.name<br>  查看已用户名</li><li>git config user.email<br>  查看已邮箱</li><li>git config –list<br>  查看Git设置列表</li></ul></li><li><p>配置公私钥</p><ol><li><p>生成密钥命令：</p><p> ssh-keygen -t rsa -C “邮箱@qq.com”<br> 生成公钥</p><p> cat ~/.ssh/id_rsa.pub<br> 查看公钥</p></li><li><p><strong>公钥的作用：</strong></p><p> 很多服务器都是需要认证的，ssh认证是其中的一种。在客户端生成公钥，把生成的公钥添加到服务器，你以后连接服务器就不用每次都输入用户名和密码了。</p><p> 很多git服务器都是用ssh认证方式，你需要把你生成的公钥发送给代码仓库管理员，让他给你添加到服务器上，你就可以通过ssh自由的拉取和提交代码了。</p></li><li><p>配置公/私钥<br> 输入 ssh-keygen -t rsa -C “上面配置的邮箱”执行这条命令会提示文件保存路径，可以直接按Enter，然后提示输入 passphrase（密码），输入两次（可以不输直接按两次Enter），然后会在 .ssh 目录生产两个文件：id_rsa和id_rsa.pub用记事本打开.ssh目录下的id_rsa.pub公钥文件，复制里面的内容；也可以直接在git中输入<strong>cat ~/.ssh/id_rsa.pub</strong>直接查看公钥。</p></li></ol></li><li><p>复制公钥，打开<strong>Github</strong>或者<strong>码云</strong>配置相应的公钥匙。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用(02)</title>
      <link href="/posts/94e2c847.html"/>
      <url>/posts/94e2c847.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基本使用"><a href="#Git基本使用" class="headerlink" title="Git基本使用"></a>Git基本使用</h1><h3 id="个人日常Git的基本使用"><a href="#个人日常Git的基本使用" class="headerlink" title="个人日常Git的基本使用"></a>个人日常Git的基本使用</h3><h3 id="Git之间的关系："><a href="#Git之间的关系：" class="headerlink" title="Git之间的关系："></a>Git之间的关系：</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/1780672-20200222211257892-559749381.png"></p><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><ol><li><p>在<strong>git客户端</strong>或者<strong>CMD命令行</strong>上执行,我们通过命令行进入本地项目目录下，然后执行执行下面的命令，<strong>或</strong>创建已新建好的项目文件，然后再执行下右击项目文件点击打开Git Bash Here，然后执行下面的命令。</p><blockquote><p>git init    初始化git仓库</p><p>(如果发现此项目文件夹下出现一个git的文件<strong>隐藏文件夹</strong>就说明初始化成功了)</p></blockquote></li><li><p>与github仓库连接。</p><blockquote><p>继续在git gash或者CMD命令行上执行以下命令：</p><p>git remote add origin&lt;github/码云项目sh地址&gt;</p><p>(一般这个命令执行成功以后本地仓库的项目便已经同远端仓库的项目保持同步了。不妨登录github/码云上查看)</p></blockquote><p> <strong>注意：前提github/码云</strong>上已经创建远程仓库。</p></li></ol><h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><ul><li>找到你刚才在记录下的远端仓库的地址,或者再次登录以下界面去复制远端仓库地址;</li></ul><blockquote><p>然后执行一下命令行:</p><p>git clone&lt;项目ssh地址&gt;</p><p><strong>注意：使用cmd/git打开使用gitclone，建议已经创建好项目文件或者cmd中已经到本地项目文件地址。</strong></p></blockquote><h2 id="提交文件到暂存区、本地仓库"><a href="#提交文件到暂存区、本地仓库" class="headerlink" title="提交文件到暂存区、本地仓库"></a>提交文件到暂存区、本地仓库</h2><ul><li>将上述步骤完成以后,我们便可以初步使用git了。可以执行以下命令：</li></ul><blockquote><p>git add -u</p><p>将文件的修改、文件的删除，添加到暂存区。<br>git add .</p><p>将文件的修改，文件的新建，添加到暂存区。<br>git add -A</p><p>将文件的修改，文件的删除，文件的新建，添加到暂存区。</p><p><strong>建议使用git add -Ajiany命令</strong></p></blockquote><blockquote><p>git commit 无法退出</p><p>　　i 插入文字的命令。窗口最一开始打开时是不能输入的。按一下 i 就可以开始输入我们的提交信息啦！</p><p>　　输入完了怎么保存退出呢？</p><p>　　先按一下Esc，退出输入状态。</p><p>　　w 保存命令。将我们输入的提交信息保存。保存完之后，</p><p>　　q 退出窗口。就回到我们最开始的命令界面啦。</p><p>git commit -m “提交信息”</p><p><strong>建议使用git commit -m “提交信息”命令</strong></p></blockquote><blockquote><p>git status</p><p>查看<strong>文件/文件夹在工作区，暂存区</strong>的状态</p></blockquote><h2 id="将本地仓库代码提交到github-码云上"><a href="#将本地仓库代码提交到github-码云上" class="headerlink" title="将本地仓库代码提交到github/码云上"></a>将本地仓库代码提交到github/码云上</h2><ul><li>提交代码命令：</li></ul><blockquote><p>git pull origin main<br>拉取到本地main(主分支)</p><p>git push origin main<br>推送到远程仓库main(主分支)</p><p>git pull</p><p>拉取远程仓库代码到本地</p><p>git push</p><p>将本地仓库推送到远程仓库</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本常用命令集(03)</title>
      <link href="/posts/e80658dd.html"/>
      <url>/posts/e80658dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git基本常用命令集"><a href="#Git基本常用命令集" class="headerlink" title="Git基本常用命令集"></a>Git基本常用命令集</h1><h2 id="基本常用命令："><a href="#基本常用命令：" class="headerlink" title="基本常用命令："></a>基本常用命令：</h2><p>git init    初始化git仓库</p><p>如果第一次与仓库连接使用以下命令：</p><ol><li>git remote add origin &lt;github远程仓库地址&gt; 将本地仓库与远程仓库连接</li><li> git branch -M main 将主分支名称master修改为main</li><li>git push -u origin main  推送远程仓库</li></ol><p>本地仓库命令：</p><ol><li><p>将所有文件添加到暂存区<br> git add .    </p></li><li><p>提交到本地仓库<br> git commit -m “提交信息”    </p></li><li><p>推送到远程仓库<br> git push</p></li></ol><p>克隆仓库命令：</p><ol><li>克隆当前仓库：<br> git clone &lt;项目ssh地址&gt;    </li><li>克隆所有仓库：<br> 待学习…</li></ol><h2 id="分支常用命令："><a href="#分支常用命令：" class="headerlink" title="分支常用命令："></a>分支常用命令：</h2><ol><li>切换分支 git checkout 分支名</li><li>删除分支 git branch -d 分支名</li><li>查看本地分支 git branch</li><li>查看远程分支 git branch -a</li><li>创建分支 git branch 分支名</li><li>创建+切换分支 git checkout -b</li><li>删除分支 git breach -d 分支名</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github实用小技巧(04)</title>
      <link href="/posts/93839e01.html"/>
      <url>/posts/93839e01.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github实用小技巧"><a href="#Github实用小技巧" class="headerlink" title="Github实用小技巧"></a>Github实用小技巧</h1><ol><li>使用技巧<ul><li>例如github网址：<a href="https://github.com/Xrebirth/JavaExercise">https://github.com/Xrebirth/JavaExercise</a><br>  在<a href="https://github后面加上1s会变成vscode界面/">https://github后面加上1s会变成vscode界面</a><br>  修改后效果：<a href="https://github1s.com/Xrebirth/JavaExercise">https://github1s.com/Xrebirth/JavaExercise</a><br>  缺点：必须开科学上网才可以访问到。</li></ul></li><li>使用技巧<ul><li><code>待更新...</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git bash 常用命令(05)</title>
      <link href="/posts/bdcfb600.html"/>
      <url>/posts/bdcfb600.html</url>
      
        <content type="html"><![CDATA[<h1 id="git-bash-常用命令"><a href="#git-bash-常用命令" class="headerlink" title="git bash 常用命令"></a>git bash 常用命令</h1><ol><li>cd : change directory的简写，改变目录的意思，就是切换到哪个目录下， 如 cd e:\fff  切换 E 盘下面的fff 目录。<br> 当我们用cd 进入文件夹时,我们可以使用 通配符*, cd f*,  如果E盘下只有一个f开头的文件夹,它就会进入到这个文件夹.</li><li>cd .. 回退到上一个目录。我们在写js,或css时，我们引入文件时，.. 表示的就是上一个目录, 所以 cd .. 回退到上一个目录就很好理解了。注意，cd 和两个点点..之间有一个空格,  </li><li>pwd : print working directory, 打印工作目录，它会显示我们当前所在的目录路径。</li><li>ls: list, 列出当前目录中的所有文件，   只不过ll(两个ll)列出的内容更为详细。</li><li>touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</li><li>rm:  删除一个文件, rm index.js 就会把index.js文件删除.</li><li>mkdir: 新建一个目录,就是新建一个文件夹. 如mkdir src 新建src 文件夹.</li><li>rm -r :  删除一个文件夹， r (recusive 是递归的意思)， 删除用的就是递归，先删除文件夹里面的内容，再删除文件夹。 rm -r src 删除src目录。 </li><li>mv 移动文件, mv index.html src  index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下.</li><li>reset 清屏，把git bash命令窗口中的所有内容清空。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(01)</title>
      <link href="/posts/8e57d0cc.html"/>
      <url>/posts/8e57d0cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li>项目名全部小写(小驼峰)</li><li>包名全部小写(小驼峰)</li><li>类名首字母大写(大驼峰)，如果类名由多个单词组成，每个单词的首字母都要大写。<br> 如：public class MyFirstClass{}</li><li>变量名、方法名首字母小写(小驼峰)，如果名称由多个单词组成，每个单词的首字母都要大写。<br> 如：int index=0;<br> public void toString(){}</li><li>常量名全部大写<br> 如：public static final String GAME_COLOR=”RED”;</li><li>所有命名规则必须遵循以下规则：<ul><li>名称只能由字母、数字、下划线、$符号组成</li><li>不能以数字开头</li><li>名称不能使用JAVA中的关键字。</li><li>坚决不允许出现中文及拼音命名。</li></ul></li></ol><h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><ol><li><p><strong>类注释</strong></p><p> 在每个类前面必须加上类注释，注释模板如下：</p><p> /**</p><p> * Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</p><p> * FileName: Test.java</p><p> * 类的详细说明</p><p> *</p><p> * @author 类创建者姓名<br>   * @Date  创建日期</p><p> * @version 1.00</p><p> */</p></li><li><p><strong>属性注释</strong></p><p> 在每个属性前面必须加上属性注释，注释模板如下：</p><p> /** 提示信息 */</p><p> private String strMsg = null;</p></li><li><p><em>方法注释</em>*</p><p> 在每个方法前面必须加上方法注释，注释模板如下：</p><p> /**</p><p> * 类方法的详细使用说明</p><p> *</p><p> * @param 参数1 参数1的使用说明</p><p> * @return 返回结果的说明</p><p> * @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p><p> */</p></li><li><p><strong>构造方法注释</strong></p><p> 在每个构造方法前面必须加上注释，注释模板如下：</p><p> /**</p><p> * 构造方法的详细使用说明</p><p> *</p><p> * @param 参数1 参数1的使用说明</p><p> * @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p><p> */ </p></li><li><p><strong>方法内部注释</strong></p><p> 在方法内部使用单行或者多行注释，该注释根据实际情况添加。</p><p> 如：//背景颜色</p><p> ​    Color bgColor = Color.RED</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法的覆盖(10.1)</title>
      <link href="/posts/224371bd.html"/>
      <url>/posts/224371bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法的覆盖-override"><a href="#方法的覆盖-override" class="headerlink" title="方法的覆盖(override)"></a>方法的覆盖(override)</h1><ol><li><p>语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在跑步！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 子类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟在飞行！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parrot</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 继承于Bird</span>    <span class="token comment" spellcheck="true">// 继承Bird中的方法</span>    <span class="token comment" spellcheck="true">// 由于Bird继承于Animal但是Bird中自身又重写了action所以Parrot类直接继承于Bird方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鹦鹉在学人话..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 以下是直接重写祖类中的方法         */</span>        <span class="token comment" spellcheck="true">// Animal父类中的方法</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bird继承Animal中action方法并重写action方法</span>        Bird bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 以下是间接继承子类中的方法         */</span>        <span class="token comment" spellcheck="true">// 由于Bird继承于Animal但是Bird中自身又重写了action所以Parrot类直接继承于Bird方法</span>        Parrot parrot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parrot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parrot<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法的覆盖又被称为方法重写，英语单词: override【官方的】/overwrite</p></li><li><p>什么时候使用方法重写?</p><ul><li>当父类中的方法已经无法满足当前子类的业务需求,</li><li>子类有必要将父类中继承过来的方法进行重新编写,</li><li>这个重新编写的过程称为方法重写/方法覆盖。</li></ul></li><li><p>什么条件满足之后方法会发生重写呢?【代码满足什么条件之后,就构成方法的覆盖呢?】(❌重点)</p><ul><li><p>方法重写发生在具有继承关系的父子类之间</p></li><li><p>方法重写的时候:</p><p>  <strong>返回值类型相同</strong></p><p>  <strong>方法名相同</strong></p><p>  <strong>形参列表相同</strong></p></li><li><p>访问权限不能更低,可以更高</p></li><li><p>抛出异常不能更多,可以更少。【异常之后才能解释】</p></li></ul></li><li><p>建议方法重写的时候尽量复制粘贴,不要编写,容易出错,导致没有产生覆盖</p></li><li><p>注意：(❌重点)</p><ul><li>私有方法不能继承,所以不能覆盖</li><li>构造方法不能继承,所以不能要盖</li><li>静态方法不存在覆盖【多态之后解释】</li><li>覆盖只针对方法,不谈属性</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承(10)</title>
      <link href="/posts/4a8e21ba.html"/>
      <url>/posts/4a8e21ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ol><li><p>继承是面向对象三大特征之一,三大特征分别是:封装、继承、多态</p></li><li><p>继承”基本”的作用是:代码复用。但是继承最”重要”的作用是:有了继承才有了以后”方法的覆盖”和”多态机制”。</p></li><li><p>继承语法格式:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> c1ass 类名 <span class="token keyword">extends</span> 父类名<span class="token punctuation">{</span>类体 <span class="token operator">=</span> 属性 <span class="token operator">+</span> 方法<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 语法声明类中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java语言当中的继承只支持单继承,一个类不能同时继承很多类,只能继承一个类。在C++中支持多继承。</p></li><li><p>关于继承中的一些术语:</p></li><li><p>B类继承A类,其中:</p><ul><li>A类称为: 父类、基类、超类、 superclass</li><li>B类称为: 子类、派生类、 subclass</li></ul></li><li><p>在java语言当中子类继承父类都继承哪些数据呢?</p><ul><li>私有的不支持继承</li><li>构造方法不支持继承</li><li>其它数据都可以被继承</li></ul></li><li><p>虽然java语言当中只支持单继承,但是一个类也可以间接继承其它类,例如</p><ul><li>C extends B()</li><li>B extends A()</li><li>A extends T()</li><li><strong>c直接继承B类,但是c类间接继承A类。</strong></li></ul></li><li><p>Java语言中假设一个类没有显示的继承任何类,该类默认继承 JavaSE库当中提供的Java.ang. Object类。</p></li><li><p>注意：Java中任何任何一个类都有Object类的特征.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态(Polymorphism)(11)</title>
      <link href="/posts/d97340ca.html"/>
      <url>/posts/d97340ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态(Polymorphism)"></a>多态(Polymorphism)</h1><h3 id="关于java语言当中的多态语法机制-【只是多态的基础语法-多态的作用在后续的例子中讲解。】"><a href="#关于java语言当中的多态语法机制-【只是多态的基础语法-多态的作用在后续的例子中讲解。】" class="headerlink" title="关于java语言当中的多态语法机制:【只是多态的基础语法,多态的作用在后续的例子中讲解。】"></a>关于java语言当中的多态语法机制:【只是多态的基础语法,多态的作用在后续的例子中讲解。】</h3><ol><li><p>Anima1、Cat、Bird三个类之间的关系:<br> Cat继承 Anima<br> Bird维承 Anima<br> Cat和Bird之间没有任何继承关系</p></li><li><p>面向对象三大特征:封装、继承、多态</p></li><li><p>关于多态中涉及到的几个概念:</p></li></ol><ul><li><p>向上转型(upcasting)</p><p>子类型—-&gt;父类型<br>又被称为:自动类型转换。</p><pre class="line-numbers language-java"><code class="language-java">Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 子转父类 向上转型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>向下转型(downcasting)</p><p>父类型—-&gt;子类型<br>又被称为:强制类型转换。【需要加强制类型转换符】</p><pre class="line-numbers language-java"><code class="language-java">Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 父类转子类 向下转型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="4"><li><p>需要记忆:<br> 无论是向上转型还是向下转型,两种类型之间必须要有继承关系。<br> 没有继承关系,程序是无法编译通过的。</p></li><li><p>注意：</p></li><li><p>java程序永远都分为编译阶段和运行阶段。</p></li><li><p>先分析编译阶段,再分析运行阶段,编译无法通过,根本是无法运行的。</p></li><li><p>编译阶段编译器检查a2这个引用的数据类型为 Anima1,由于 Anima1.c1ass</p></li></ol><pre><code>&gt; 字节码当中有move()方法,所以编译通过了。这个过程我们称之为静态绑定,编译阶段绑定。&gt; 只有静态绑定成功之后才有后续的运行。</code></pre><ol start="9"><li><p>在程序运行阶段,JV唯堆内存当中真实创建的对象是cat对象,那么以下程序在运行阶段一定会调用cat对象的move()方法,此时发生了程序的动态绑定,运行阶段绑定。</p></li><li><p>无论是cat类有没有重写move方法,运行阶段一定调用的是cat对象的move方法,因为底层真实对象就是cat对象。</p></li><li><p>父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态/状态,这种机制可以成为一种多态语法机制。</p></li><li><p>instanceof运算符(返回boolean类型)</p></li></ol><pre class="line-numbers language-java"><code class="language-java">        Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 子转父类 向上转型</span>        Dog dog <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 以上会编译报错：cannot be cast to class (cat类不能强制转换为dog类)         * 原因：         * 1. 编译未报错：         *  - 编译检测时候当前Animal里面包含Dog类所以语法正确         * 2. 运行错误报错：         *  - 运行时候由于堆内存中是Cat类由于Cat与Dog不是继承关系，所以无法完成向下转型         * 3. 解决方法：         *  - Sun公司给出了一个运算符叫做：instanceof         *  - 语法：引用 instanceof 类名   --------> 返回值：Boolean          */</span><span class="token comment" spellcheck="true">//         解决办法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 当animal的堆内存中存储的是dog对象时执行</span>            Dog dog <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            animal1<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>animal1 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 当animal的堆内存中存储的是cat对象时执行</span>            Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> animal1<span class="token punctuation">;</span>            animal1<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这样有效的避免了编译报错：cannot be cast to class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li><p>总结：</p></li><li><p>如果创建了一个B对象，且B类继承自A类，如果B类想使用A类中方法</p></li></ol><pre><code> 这种情况使用向上转型(upcasting)</code></pre><ol><li>如果创建了一个B对象，且B类继承自A类，且B类现在已经向上转型了，但是现在向调用子类方法</li></ol><pre><code> 这种情况使用向下转型(downcasting)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package、import的使用(13)</title>
      <link href="/posts/26da222b.html"/>
      <url>/posts/26da222b.html</url>
      
        <content type="html"><![CDATA[<h1 id="package、import的使用"><a href="#package、import的使用" class="headerlink" title="package、import的使用"></a>package、import的使用</h1><h4 id="关于Java语言当中的包机制"><a href="#关于Java语言当中的包机制" class="headerlink" title="关于Java语言当中的包机制"></a>关于Java语言当中的包机制</h4><ol><li><p>包又称为 <code>package</code>，Java中引入 <code>package</code>这种语法机制主要是为了方便程序的管理<br> 不同功能的类被分门别类放到不同的软件包当中,查找比较方便,管理比较方便,易维护</p></li><li><p>定义 package</p><ul><li><p>在Java源程序的第一行上编写package语句。</p></li><li><p>package只能编写一个语句。</p></li><li><p>语法结构:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 包名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>包名的命名规范:</p><ul><li><p>公司域名倒序+项目名+模块名+功能名;</p></li><li><p>采用这种方式重名的几率较低。因为公司域名具有全球唯一性</p></li><li><p>例如：</p><blockquote><p>com.bjpowernode.oauser.service;<br>org.apache.tomcat.core;</p></blockquote></li></ul></li><li><p>包名要求全部小写,包名也是标识符,必须遵守标识符的命名规则</p></li><li><p>一个包将来对应的是一个目录</p></li><li><p>使用package手动编译及运行Java：</p><ul><li><p>使用<code>package</code>机制之后，类名不在是原来的类名了，类名会变成java文件中定义的<code>package</code>路径</p></li><li><p>编译：javac java源文件路径 (在硬盘上生成一个class文件)</p></li><li><p>手动方式创建Java的package设置的目录，将java字节码文件放到java设置的package目录</p></li><li><p>运行：Java package路径</p></li><li><p>另一种方式(编译+运行)</p><ul><li><p>编译：</p><p>  javac -d 编译之后存放的路径 java源文件路径</p></li><li><p>例如：将F:\Hello World.java文件编译到C:\目录下</p><p>  javac -d C:\ F:\Hello World.java</p></li><li><p>java -d . <em>.java</em></p><p>  将当前的路径中*.java(所有含后缀名java文件)编译之后存放到当前文件目录下</p></li><li><p>运行JVM的类加载器ClassLoader默认从当前路径下加载。<br>  保证先切换到com所在的路径在执行</p></li></ul></li></ul></li><li><p><strong>import</strong>的使用</p><ul><li><p>什么时候使用<code>import</code></p><p>  想要调用一个类但是这个类，并且不在同一个包下的时候，需要使用 <code>import</code>进行引入</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final修饰符(12)</title>
      <link href="/posts/18e18182.html"/>
      <url>/posts/18e18182.html</url>
      
        <content type="html"><![CDATA[<h1 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h1><h2 id="关于java语言当中final关键字"><a href="#关于java语言当中final关键字" class="headerlink" title="关于java语言当中final关键字:"></a>关于java语言当中final关键字:</h2><ol><li><p>final是个关键字,表示”最终的，不可变的”</p></li><li><p>final修饰的类无法被继承</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span>  <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*// 编译报错class Cat extends Animal {}*/</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">//正确写法(Cat无法继承Animal)：</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final修饰的方法无法被重写/覆盖</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWold！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">extends</span> <span class="token class-name">a</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 'b()' 无法重写 'study_exercise.objectexercise.exercisefinal.a' 中的 'b()'；重写的方法为 final</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final修饰的变量一旦之后,不可重新赋值【不可二次赋值】</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 第一种写法</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// a = 15; // 无法将值赋给 final 变量 'a'</span>        <span class="token comment" spellcheck="true">// 第二种写法：</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>        b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final修饰的实例变量：</p><ul><li><p>综合考虑，java语言最终规定实例变量使用final修饰之后,必须手动赋值,不能采用系统默认值。</p></li><li><p>因为默认构造函数在构造方法时候会将成员变量赋值所以Sun公司综合考虑让开发人员自行赋值，否则会编译错误！</p></li><li><p>两种写法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 第一种写法：</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二种写法：</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**        总结以上两种写法：     * 第一种写法：     *  - 直接将成员变量直接赋值给了a，但是程序执行这句话实际是在构造函数中执行进行赋值的.     * 第二种写法：     *  - 直接在构造函数中赋值     *  总结：     *  以上两种情况其实在程序运行过程中都一样，只不过一个直接赋值一个写在构造函数中.     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>final修饰的引用,一旦指向某个对象之后,不能再指向其它对象,那么被指向的对象无法被垃圾回收器回收。<br> 注意：<strong>final修饰的引用虽然指向某个对象之后不能指向其它对象,但是所指向的对象内部的内存是可以被修改的。</strong><br> 例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加final实例化对象</span>        <span class="token keyword">final</span> Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// animal1 = new Animal(20); // 编译报错：一旦使用final创建对象不能，不能指向其他对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        animal1<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">2300</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 总结：         * final修饰的引用虽然指向某个对象之后不能指向其它对象,但是所指向的对象内部的内存是可以被修改的。         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>final用法之常量的使用：</p><p> <strong>常量的定义语法格式:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> 类型 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 提示：Java规范中要求所有常量的名字全部大写,每个单词之问使用下划线_连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问控制权限修饰符(14)</title>
      <link href="/posts/3839c98f.html"/>
      <url>/posts/3839c98f.html</url>
      
        <content type="html"><![CDATA[<h1 id="访问控制权限修饰符"><a href="#访问控制权限修饰符" class="headerlink" title="访问控制权限修饰符"></a>访问控制权限修饰符</h1><ol><li>访问控制权限修饰符来控制元素的访问范围</li><li>访问控制权限修饰符：</li></ol><table><thead><tr><th>修饰符</th><th>权限解释</th></tr></thead><tbody><tr><td>public(公共的)</td><td>表示公共的公开的，可以在任何位置访问</td></tr><tr><td>protected (受保护的)</td><td>相同包内可以访问，子类也可以访问</td></tr><tr><td>缺省(不写修饰符)</td><td>相同包内可以访问</td></tr><tr><td>private(私人的)</td><td>表示私人，只能在本类中访问</td></tr></tbody></table><ol><li><p>访问控制权限修饰符可以修饰类、内部类、变量、方法…..等</p></li><li><p>修饰符的范围：</p><p> public &gt; protected &gt; 缺省(不写修饰符) &gt; public</p></li></ol><p><strong>注意</strong>：类只能采用<strong>public和缺省</strong>的修饰符进行修饰。【<strong>内部类除外</strong>】</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式(15)</title>
      <link href="/posts/2b67f11b.html"/>
      <url>/posts/2b67f11b.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式-singleton-pattern"><a href="#单例模式-singleton-pattern" class="headerlink" title="单例模式(singleton pattern)"></a>单例模式(singleton pattern)</h1><h2 id="单例模式所具备条件："><a href="#单例模式所具备条件：" class="headerlink" title="单例模式所具备条件："></a>单例模式所具备条件：</h2><ol><li>构造方法私有化</li><li>对外提供一个公开的静态的获取当前对象的方法</li><li>提供当前类型的静态变量</li></ol><h2 id="单例模式分为两种："><a href="#单例模式分为两种：" class="headerlink" title="单例模式分为两种："></a>单例模式分为两种：</h2><ol><li><p>懒汉式单例(推荐使用)：</p><p> 当调用这个方法时候创建这个对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 懒汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 静态变量：</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> User user<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对外提供一个公开获取User的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// test</span><span class="token keyword">class</span> <span class="token class-name">UserTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user1 <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单例模式创建方法</span>        User user2 <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token operator">==</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// -----> true  当前引用地址指向的相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其他对象正常调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>饿汉式单例：</p><p> 未调用当前方法，这个对象就已经创建出来了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 饿汉式单例</span><span class="token keyword">class</span> <span class="token class-name">User2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为这是一个静态变量所以当调用这个类时候当前这个对象就已经创建出来了</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> User2 user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法私有化</span>    <span class="token keyword">private</span> <span class="token function">User2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对外提供一个公开获取User的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里直接返回user2，因为静态方法已经创建出来对象了</span>        user2<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User2 user3 <span class="token operator">=</span> User2<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单例模式创建方法</span>        User2 user4 <span class="token operator">=</span> User2<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token operator">==</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// -----> true  当前引用地址指向的相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其他对象正常调用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="在实际开发中的作用："><a href="#在实际开发中的作用：" class="headerlink" title="在实际开发中的作用："></a>在实际开发中的作用：</h2><ol><li>在多个模块中都需要一个功能，为了节省空间，所以可以将这个功能做个单例设计模式，什么时候使用，都是创建一个对象</li><li>不会在堆内存中开辟多个空间</li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>优点：<ol><li>单例模式特点是在一个类中<strong>只能创建一个对象</strong></li><li>单例模式不会影响封装及多态中的使用，只针对与在对象创建时<strong>有且只能有一个对象</strong></li></ol></li><li>缺点：<ol><li>单例模式的类型无法被继承<br> 因为单例模式构造方法是私有的所以一旦继承，子类构造函数默认会调用super()，但是由于单例模式的构造方法是private(私有)所以子类无法访问到父类的构造方法</li><li><code>待总结...</code></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super关键字(16)</title>
      <link href="/posts/37e66f1.html"/>
      <url>/posts/37e66f1.html</url>
      
        <content type="html"><![CDATA[<h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><ol><li><p>super不是引用类型,，super中存储的不是内存地址,，super指向的不是父类对象</p></li><li><p>super代表的是前子类对象中的父类型特征</p></li><li><p>什么时候使用 super?<br> 子类和父类中都有某个数据，例如，子类和父类中都有name这个属性<br> 如果要再子类中访问父类中的name属性，需要使用 super</p></li><li><p>super可以用在什么地方？</p><ul><li>可以用在成员方法中，但是<strong>不能用在静态方法中</strong></li><li>super可以用在构造方法中</li></ul></li><li><p>super关键字用在构造方法中:</p><ul><li><p>语法: super(实参);<br>  注意：<strong>super()括号中传入的是实参而不是形参</strong></p></li><li><p>作用：通过子类的构造方法去调用父类的构造方法</p></li><li><p><strong>语法规则（重点）：</strong></p><p>  一个构造方法第一行如果没有this(….);<br>  也没有显示的去调用 super(….);<br>  <strong>系统会默认调用 super();</strong></p><p>  例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bank无参构造函数执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Credit</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为这里既没有this()也没有super()，所以JVM默认执行super()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Credit credit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --------->  Bank无参构造函数执行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Java语言中只要是创建Java对象，那么Object中的无参数构造方法一定会执行<br>  因为所有方法默认继承于Object</p></li><li><p>注意: super(….);的调用只能放在构造方法的第一行</p></li><li><p>super(….);和this(….);不能共存</p></li><li><p><strong>super(….);调用了父类中的构造方法，但是并不会创建父类对象.</strong></p><p>  通过子类的构造方法去调用父类的构造方法，<br>  作用是：给当前子类对象中的<strong>父类型特征赋值</strong>。</p></li><li><p>注意：<strong>调用构造方法不一定是创建对象</strong></p></li></ul></li><li><p>super()的个人理解：</p><ul><li>super()只能在子类的构造函数中使用</li><li>super()给当前子类对象中的父类型特征赋值</li><li>因为父类里面成员方法是私有的所以子类无法无法直接访问</li><li> 如果子类调用父类的成员变量还要new一个空间，费空间</li><li> 但是使用super()可以不用创建父类对象直接<strong>间接赋值</strong>然后直接使用父类get方法访问</li></ul><p> 例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    Credit credit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Credit</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> passWorld<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Credit</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> passWorld<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将id传给父类构造函数，但是父类不会创建对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passWorld <span class="token operator">=</span> passWorld<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassWorld</span><span class="token punctuation">(</span><span class="token keyword">int</span> passWorld<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>passWorld <span class="token operator">=</span> passWorld<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPassWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> passWorld<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Credit credit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个子类对象，为父类型特征id赋值100，子类passWorld赋值200</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --------> 父类型特征id=100</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credit<span class="token punctuation">.</span><span class="token function">getPassWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ----------> passWorld=200</span>        credit<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重新定义父类型特征id=74</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>credit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// -------------> 父类型特征id=74</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="super总结："><a href="#super总结：" class="headerlink" title="super总结："></a>super总结：</h2><ol><li><p>super关键字： 类似与this关键字(当前当前对象)；<strong>super关键字代表父类对象</strong></p></li><li><p>可以利用super关键字代表父类对象访问父类的属性和方法。</p><ul><li>super.属性—&gt;访问父类的属性</li><li>super.方法名()—&gt;调用父类的方法</li></ul></li><li><p>可以使用super关键字调用父类的构造函数，必须出现在构造函数的第一行。</p></li><li><p>super不能与static混用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类(17)</title>
      <link href="/posts/e036fd38.html"/>
      <url>/posts/e036fd38.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ol><li><p>语法格式：<br> [修饰符] abstract class  类名{}</p></li><li><p>抽象类无法被实例化</p><p> 虽然抽象类没有办法实例化，但是抽象类也有构造方法，该构造方法是给子类创建对象用的</p></li><li><p>抽象类中可以定义抽象方法</p><p> 抽象方法的语法：在方法的修饰符列表中添加abstract关键字，并且抽象方法应该以”;”结束，不能带有”{}”<br> 例如：public abstract void m();</p></li><li><p>抽象类中不一定有抽象方法，但抽象方法<strong>必须</strong>出现在抽象类中</p></li><li><p>一个非抽象的类继承抽象类，必须将抽象类中的抽象方法覆盖，实现，重写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动物类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 非抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 抽象方法：成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 猫科类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注意：子类一定要重写父类中的抽象方法不然会编译错误</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫会跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类的用途：</p></li><li><p><strong>Java中抽象类更利于代码的维护和重用。</strong></p></li></ol><pre><code>抽象类往往用来表征对问题领域进行分析、设计中得出的抽象概念，是对一系列看上去不同，但是本质上相同的具体概念的抽象。</code></pre><ol start="2"><li>因为抽象类不能实例化对象，所以必须要有子类来实现它之后才能使用。这样就可以把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护。</li></ol><pre><code>比如本科和研究生可以抽象成学生，他们有相同的属性和方法。这样当你对其中某个类进行修改时会受到父类的限制，这样就会提醒开发人员有些东西不能进行随意修改，这样可以对比较重要的东西进行统一的限制，也算是一种保护，对维护会有很大的帮助。</code></pre><ol start="3"><li>当又有一个具有相似的组件产生时，只需要实现该抽象类就可以获得该抽象类的那些属性和方法。</li></ol><pre><code>比如学校又新产生了专科生这类学生，那么专科生直接继承学生，然后对自己特有的属性和方法进行补充即可。这样对于代码的重用也是很好的体现。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口(18)</title>
      <link href="/posts/9b7c16f.html"/>
      <url>/posts/9b7c16f.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><ul><li><p>接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么接口的内部主要就是<strong>封装了方法</strong>，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法（JDK 9）<strong>后面在学jdk新特性</strong></p></li><li><p>接口的定义，它与定义类方式相似，但是使用 <code>interface</code> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。    </p></li><li><p>接口的使用，它不能创建对象，但是可以被实现（ <code>implements</code> ，类似于被继承）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象<br>  类。  </p></li></ul><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名称 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 抽象方法</span><span class="token comment" spellcheck="true">// 常量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口具体语法："><a href="#接口具体语法：" class="headerlink" title="接口具体语法："></a>接口具体语法：</h2><ol><li><p>接口也是一种引用类型，可以等同看做类</p></li><li><p><strong>接口也是一种引用”数据类型”，编译之后也是一个class字节码文件，但并不是类</strong></p></li><li><p>接口中只能出现：常量、抽象方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> A<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 定义一个常量</span>    <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里定义常量省略public static final，但是系统自动会给你加上</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 定义一个抽象方法</span>    <span class="token keyword">void</span>  <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 这里定义常量省略public abstract，但是系统自动会给你加上</span>    <span class="token comment" spellcheck="true">// 注意: 在接口中没有成员变量、方法，也无法被实例化</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口其实是一个特殊的抽象类，特殊在接口是完全抽象的</p></li><li><p>接口中没有构造方法，无法被实例化</p></li><li><p>接口和接口直接可以实现多继承</p></li><li><p>一个类中可以实现多个接口，(这里的”实现”可以等同看作”继承”)</p></li><li><p>一个非抽象的类实现接口，需要将接口中所有的方法”实现/重写/覆盖”</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">,</span>A<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a类继承A，并覆盖A中的m3方法</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b类继承接口c，但由于接口c中继承了a、b种方法，所以所以b类继承接口c需要将a、b、c类中所有方法进行覆盖</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h2><ol><li><p>可以使项目分层，所有层都面向接口开发，开发效率提高了</p></li><li><p>接口使代码和代码之间的耦合度降低，就像内存条和主板的关系，变得“可插拔可以随意切换。</p></li><li><p>接口更像是一个规范两者之间的规范</p><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E6%9C%AA%E6%A0%87%E9%A2%98-2.jpg" alt="现实生活例子"></p></li><li><p>如果接口和抽象类都能完成某个功能，优先选择接口</p><p> 因为接口可以多实现，多继承，并且一个类除了实现接口之外，还可以去继承其他类(保留了类的继承)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象(01)</title>
      <link href="/posts/8e57d0cc.html"/>
      <url>/posts/8e57d0cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象及面向过程区别"><a href="#面向对象及面向过程区别" class="headerlink" title="面向对象及面向过程区别"></a>面向对象及面向过程区别</h1><h2 id="面向过程：主要是关注点是：实现的具体的过程，因果关系"><a href="#面向过程：主要是关注点是：实现的具体的过程，因果关系" class="headerlink" title="面向过程：主要是关注点是：实现的具体的过程，因果关系"></a>面向过程：主要是关注点是：实现的具体的过程，因果关系</h2><ol><li><p>例子：</p><ul><li><p>例1：</p><p>  集成显卡的开发思路：<br>  集成显卡是焊接在主板上，如果集成显卡坏了，整块主板就坏了。</p></li><li><p>例2：</p><p>  蛋炒饭：<br>  客户如果点了一份蛋炒饭，然后做好了，但是客户突然想吃蛋炒饭里的“米”不吃炒的鸡蛋，但是鸡蛋和米饭粘合在一起了，难以分离。</p></li></ul></li><li><p>面向过程开发优点：对于业务逻辑比较简单的程序，可以达到快速开发，前期拖入成本低。</p></li><li><p>面向过程开发缺点：采用面向过程的方式很难解决非常复杂的业务逻辑，另外没面向过程的方式导致软件元素之间的“耦合度”非常高，只要其中一环出问题，整个系统受影响，导致最终的软件”扩展力“差。另外，由于没有独立体的概念，所以无法达到组件的服用。</p></li><li><p>个人理解名词:</p><ul><li><p>耦合度：</p><p>  拿以上的例子蛋炒饭鸡蛋和米饭无法分离，因为鸡蛋和米饭谁都离不开谁了这个依赖关系称之为”耦合度”。</p></li><li><p>扩展力：</p></li><li><p>还是以上蛋炒饭的例子，因为蛋炒饭无法放其他东西，例：像rice就以可以随便添加鱼香肉丝，西红柿炒鸡蛋这样的菜。像这种可延伸性称之为扩展力。</p></li></ul></li></ol><h2 id="面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。"><a href="#面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。" class="headerlink" title="面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。"></a>面向对象：主要关注点是：主要关注对象【独立体】能完成哪些功能。</h2><ol><li><p>例子：</p><ul><li><p>例1：</p><p>  独立显卡开发思路：</p><p>  在一个主机中如果主机失去独立显卡也可以正常使用，像这种可延伸性、可扩展性、的东西叫做面向对象。</p></li><li><p>例2：</p><p>  米饭：</p><p>  客户可以要求做饭人根据个人喜好添加不同的菜码，像这种灵活性较高、可扩展性、的东西叫做面向对象。</p></li></ul></li><li><p>面向对象优点：耦合度低，扩展力强。更容易解决现实世界当中更复杂的业务逻辑、组件性更强。</p></li><li><p>面向对象缺点：前期投入成本较高，需要进行独立体的抽取、以及大量系统的分析与设计。</p></li><li><p>C语言是纯面向对象—&gt; C++是半面向对象 —&gt; Java是纯面向对象</p></li></ol><h2 id="面向对象的介绍："><a href="#面向对象的介绍：" class="headerlink" title="面向对象的介绍："></a>面向对象的介绍：</h2><ol><li><p>面向对象的三大特征：</p><ul><li>封装</li><li>继承</li><li>多态</li><li>所有面向对象的编程语言都有这三大特征。</li></ul></li><li><p>采用面向对象的方式开发一个软件，声明周期当中：【整个声明周期中贯穿使用oo面向对象方式】</p><ul><li>面向对象的分析：OOA</li><li>面向对象的设计：OOD</li><li>面向对象的编程：OOP</li></ul></li><li><p>类和对象的概念</p><ol><li>类的概念：<ul><li>类在现实世界当中是不存在的,是一个模板,是一个概念。是人类大脑思考抽象的结果。</li><li>类代表了一类事物。</li><li>在现实世界当中,对象A与对象B之间具有共同特征,进行抽象总结出一个模板,这个模板被称为类</li></ul></li></ol></li><li><p>对象概念：</p><ol><li>对象是实际存在的个体。现实世界当中实际存在。</li><li>描述一下整个软件开发的过程：<ul><li>程序员先观察现实世界,从现实世界当中寻找对象</li><li>寻找了N多个对象之后,发现所有的对象都有共同特征</li><li>程序员在大脑中形成了一个模板【类】</li><li>Java程序员可以通过Java代码来表述一个类</li><li>Java程序中有了类的定义</li><li>然后通过类就可以创建对象</li><li>有了对象之后,可以让对象直接协作起来形成一个系统</li></ul></li><li>类到对象的过程<ul><li>类 —&gt; 【实例化】 —&gt; 对象</li><li>对象又被称之为实例【instance】</li><li>对象—&gt; 【抽象化】 —&gt; 类</li></ul></li><li>个人理解：</li></ol><p> 程序员把现实世界中一个种族/种类的共同特征通过代码方式记录下来，例如：种族：人、特征：升高、体重、爱好、性别、肤色、…把他们属性创建成一个类然后通过一个类创建一个人的信息，这个从类创建到对象过程叫做创建一个实例化【创建个例子的意思】，而对象到类是一种抽象类的东西</p></li><li><p>总结类与对象的概念：</p><ol><li>类描述的是对象的共同特征</li><li>共同特征：例如：升高、体重、爱好、性别、肤色等…</li><li>这个身高特征在访问的时候,必须先创建对象,通过对象去访问这个特征</li><li>因为这个特征具体的某个对象上之后,值不同。有的对象身高1.80,有的<br> 对象身高2.80等…</li><li>一个类主要描述什么信息呢?<ul><li>一个类主要描述：状态+动作</li><li>状态信息：名字、身高、性别、年龄【类中的属性】</li><li>动作信息：吃、唱歌、跳舞、学习【类中的方法】</li></ul></li><li>现实生活转换成抽象概念<ul><li>状态  —&gt;  一个类的属性</li><li>动作  —&gt;  一个类的方法</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象的概念附Java命名规范(02)</title>
      <link href="/posts/117bb08e.html"/>
      <url>/posts/117bb08e.html</url>
      
        <content type="html"><![CDATA[<h1 id="类和对象的概念附Java命名规范"><a href="#类和对象的概念附Java命名规范" class="headerlink" title="类和对象的概念附Java命名规范"></a>类和对象的概念附Java命名规范</h1><h2 id="类的定义【从这里开始编写代码】"><a href="#类的定义【从这里开始编写代码】" class="headerlink" title="类的定义【从这里开始编写代码】"></a>类的定义【从这里开始编写代码】</h2><ol><li><h3 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h3></li></ol><pre><code>```java [修饰符列表] class 类名 {        属性;        方法;    }```</code></pre><ol start="2"><li><h3 id="例如：学生类：描述所有学生对象的共同特征"><a href="#例如：学生类：描述所有学生对象的共同特征" class="headerlink" title="例如：学生类：描述所有学生对象的共同特征"></a>例如：学生类：描述所有学生对象的共同特征</h3><ul><li>学号【int】</li><li>名字【String】</li><li>性别【boolean】</li><li>年龄【int】</li><li>住址【String】</li><li>等…</li></ul></li><li><h3 id="重点：-成员变量通常是采用一个变量的形式来完成定义的"><a href="#重点：-成员变量通常是采用一个变量的形式来完成定义的" class="headerlink" title="重点： 成员变量通常是采用一个变量的形式来完成定义的"></a>重点： 成员变量通常是采用一个变量的形式来完成定义的</h3><ul><li>int no[学号]</li><li>int age[年龄]</li><li>String name[名字]</li><li>String address[住址]</li><li>boolean sex[年龄]</li></ul></li><li><h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3></li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B.png" alt="数据类型"></p><p>  引用数据类型(以下理解为新手可以这样理解，但是严格意义不准确)：<br>      String.class     SUN【甲骨文工资】提供的<br>      System.class    SUN【甲骨文工资】提供的</p><ol start="5"><li><h3 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h3></li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%9B%BE%E5%B1%82%203.png" alt="java命名规范"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建(03)</title>
      <link href="/posts/6ca9e73a.html"/>
      <url>/posts/6ca9e73a.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><pre class="line-numbers language-java"><code class="language-java">类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对象名.成员变量；</p><p>对象名.成员方法()；  </p><h2 id="创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值"><a href="#创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值" class="headerlink" title="创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值"></a>创建完对象不给成员变量赋值的话系统默认会给成员变量赋默认值</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%80%BC.png" alt="创建对象初始值">使用null断连引用与对象直接关联从而让GC(垃圾回收机制)回收</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的封装(04)</title>
      <link href="/posts/f659f0b5.html"/>
      <url>/posts/f659f0b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象的封装"><a href="#对象的封装" class="headerlink" title="对象的封装"></a>对象的封装</h1><h2 id="封装的步骤："><a href="#封装的步骤：" class="headerlink" title="封装的步骤："></a>封装的步骤：</h2><ul><li>所有属性私有化，使用private关键字进行修饰，private表示私有的，修饰的只能在本类中访问</li><li>对外提供简单的的操作入口，也就是说以后外部程序想要访问age属性，必须通过这些简单的入口进行访问</li></ul><ol start="2"><li><p>对外提供两个公开的方法,分别是<code>set</code>方法和<code>get</code>方法</p><ul><li>set方法修改实例变量属性<br>  get方法读取实例变量属性</li><li><code>set</code>修改方法的命名规范：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span>形参<span class="token punctuation">)</span> <span class="token punctuation">{</span>    成员变量名 <span class="token operator">=</span> 形参<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>get</code>读取方法的命名规范：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> get<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> 想返回的实例变量名<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>关于有无static怎样调用</p></li></ol><ul><li>有static关键字修饰的方法调用：类名.方法名(实参);   // 成员方法</li><li>没有static关键字修饰的方法调用：引用.方法名(实参);      // 实例方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法(05)</title>
      <link href="/posts/11059cb0.html"/>
      <url>/posts/11059cb0.html</url>
      
        <content type="html"><![CDATA[<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><ol><li><p>语法格式：</p><pre><code>public 类名(形参) {    this.实例变量名=形参;}</code></pre></li><li><p>作用：</p><ul><li>构造函数可以在创建对象之初，将对象属性写进参数中。</li></ul></li><li><p>构造函数的生存周期：</p><ul><li>创建对象</li><li>创建对象的同时,初始化实例变量的内存空间。</li><li>注意：<strong>成员变量创建的实例变量,属于对象级别的变量,这种变量必须先有对象才能有实例变量。</strong></li></ul></li><li><p>实例变量没有手动赋值的时候,系统默认赋值,那么这个系统默认赋值是在什么时候完成的呢?</p><ul><li>是在类加载的时候吗?</li><li>不是,因为类加载的时候只加载了代码片段,还没来得及创建对象。所以此时实例变量并没有初始化。</li><li><strong>实际上,实例变量的内存空间是在构造方法执行过程当中完成开辟的。完成初始化的。</strong></li><li>系统在默认赋值的时候,也是在<strong>构造方法执行过程当中完成的赋值。</strong></li><li>注意：<strong>当创建一个对象，这个对象这个类里面没创建构造函数的话，会有一个构造补缺器自动帮你创建一个无参的构造函数</strong></li><li>如果开发者在类中创建了有参的构造函数，但是实例化一个对象时，没有放入参数会报错**<br>  解决办法：</li></ul></li><li><p>创建构造函数时一般都会创建一个有参构造函数和无参构造函数，从而形成方法重载<br> <em>构造函数支持方法重载机制</em>*</p></li><li><p>注意：如果构造函数的参数没有将成员变量全部写完，<strong>JVM自动把后面的成员变量设为默认值</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向及static方法详解(06)</title>
      <link href="/posts/1a9bdff3.html"/>
      <url>/posts/1a9bdff3.html</url>
      
        <content type="html"><![CDATA[<h1 id="this指向及static方法详解"><a href="#this指向及static方法详解" class="headerlink" title="this指向及static方法详解"></a>this指向及static方法详解</h1><h2 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h2><ol><li>this第一种语法：</li></ol><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> People<span class="token punctuation">{</span>     String age<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">setAge</span><span class="token punctuation">(</span>String age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this这里指的的是调用当前对象的内存地址;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  this第二种用法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了无参Cat构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -----------> 调用了无参Cat构造函数</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于java语言当中的this关键字"><a href="#关于java语言当中的this关键字" class="headerlink" title="关于java语言当中的this关键字"></a>关于java语言当中的this关键字</h2><ul><li>this是一个关键字,翻译为:这个 </li><li>this是一个引用</li><li>this是一个变量</li><li>this变量中保存了内存地址指向了自身</li><li>this存储在JVM堆内存java对象内部。(详见内存图)</li></ul><p>  <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/this%E5%86%85%E5%AD%98%E5%9B%BE%E5%88%86%E6%9E%901.png" alt="this内存地址"></p><h2 id="关于this详解："><a href="#关于this详解：" class="headerlink" title="关于this详解："></a>关于this详解：</h2><ul><li>创建100个java对象,每一个对象都有this,也就说有100个不同的this </li><li>this可以出现在实例方法当中，this指向当前正在执行这个动作的对象。(this代表当前对象) </li><li>this在多数情况下都是可以省略不写的 </li><li>this不能使用在带有static的方法当中</li></ul><h2 id="关于this-详解："><a href="#关于this-详解：" class="headerlink" title="关于this()详解："></a>关于this()详解：</h2><ul><li>只能在构造方法中使用this调用其他构造方法，不能在成员方法中使用</li><li>在构造方法中，使用this调用构造方法的语句必须位居第一行，且只能出现一次，否则会编译错误</li><li>不能在两个构造方法中相互调用，否则会编译错误</li></ul><h2 id="static方法详解"><a href="#static方法详解" class="headerlink" title="static方法详解"></a>static方法详解</h2><h3 id="带static与不带static方法的区别："><a href="#带static与不带static方法的区别：" class="headerlink" title="带static与不带static方法的区别："></a>带static与不带static方法的区别：</h3><ul><li><p>带static调用区别：类名.方式调用</p></li><li><p>不带static调用区别：引用.方式调用</p></li><li><p>总结：不带static是一个实例方法，带static是一个静态方法</p></li></ul><h3 id="什么时候使用static什么时候不用？"><a href="#什么时候使用static什么时候不用？" class="headerlink" title="什么时候使用static什么时候不用？"></a>什么时候使用static什么时候不用？</h3><ul><li>顾客购物的行为，每一个顾客购物最终的购买的<strong>东西和结账的总金额</strong>的结果是不一样的 所以购物这个行为是属于<strong>对象级别</strong>的行为 由于每一个对象在执行购物这个动作的时候最终结果不同,所以购物这个动作必须有”对象”的参与。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li><p>判断是否用static来创建方法的依据:当一个行为/动作执行的过程当中是需要对象参与的,那么这个方法一定要定义为实例方法”,不要带static关键字</p></li><li><p>不带static是专门为对象级别行为使用的</p></li><li><p>带static是一个普通方法使用</p></li><li><p><strong>带static的方法都需要创建对象才能调用实例方法和成员方法</strong></p></li><li><p>再次重申：</p><p> 带static的类名.方法名();</p><p> 不带static的引用.方法名();</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static静态变量(07)</title>
      <link href="/posts/d87fc482.html"/>
      <url>/posts/d87fc482.html</url>
      
        <content type="html"><![CDATA[<h1 id="static静态变量"><a href="#static静态变量" class="headerlink" title="static静态变量"></a>static静态变量</h1><h2 id="static静态变量-1"><a href="#static静态变量-1" class="headerlink" title="static静态变量"></a>static静态变量</h2><ol><li><p>语法格式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> 变量类型 变量名 <span class="token operator">=</span> 变量值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>什么时候成员变量声明为实例变量呢?</p><p> 所有对象都有这个属性,但是这个属性的值会随着对象的变化而变化【不同对象的这个属性具体的值不同】</p></li><li><p>什么时候成员变量声明为静态变量呢?</p><p> 所有对象都有这个属性,并且所有对象的这个属性的值是一样的,建议定义为静态变量,节省内存的开销。</p></li><li><p>注意：静态变量在类加载的时候初始化,内存在方法区中开辟。访问的时候不需要创建对象,直接使用类名静态变量名的方式访问。</p></li><li><p>关于Java中的static关键字</p><ul><li>static英语单词翻译为静态的</li><li>static修饰的方法是静态方法</li><li>static修饰的变量是静态变量</li><li>所有 static修饰的元素都称为静态的,都可以使用类名.的方式访问，当然也可以用引用.的方式访问【但不建议】</li><li>static修饰的所有元素都是类级别的特征和<strong>具体的对象无关</strong>。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static静态代码块(08)</title>
      <link href="/posts/ef687801.html"/>
      <url>/posts/ef687801.html</url>
      
        <content type="html"><![CDATA[<h1 id="static静态代码块"><a href="#static静态代码块" class="headerlink" title="static静态代码块"></a>static静态代码块</h1><h2 id="static静态代码块-1"><a href="#static静态代码块-1" class="headerlink" title="static静态代码块"></a>static静态代码块</h2><ol><li><p>语法格式:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span>    java语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以使用”static”关键字来定义静态代码块:</p></li><li><p>静态代码块在类加载时执行,并且只执行一次。</p></li><li><p>静态代码块在一个类中可以编写多个,并且遵循自上而下的顺序依次执行<br> 静态代码块在main之前执行且执行一次</p></li><li><p>静态代码块的作用什么?怎么用?用在哪儿?什么时候用?</p></li></ol><ul><li><p>这当然和具体的需求有关,例如项目中要求在类加载的时刻/时机执行代码完成日志的记录<br>那么这段记录日志的代码就可以编与到静态代码块当中,完成日志记录。</p></li><li><p>静态代码块是Java为程序员准备个特殊的时刻,这个特殊的时刻被称为类加线时刻,若希望在此刻执行一段特殊的程序,这段程序可以直接放到静态代码块当中</p></li><li><p>通常在静态代码坎当中完成预备工作,先完成数据的准备工具,例如:初始化连接池,解析XML配置文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实例语句块成员内部类(09)</title>
      <link href="/posts/fb69133e.html"/>
      <url>/posts/fb69133e.html</url>
      
        <content type="html"><![CDATA[<h1 id="实例语句块成员内部类"><a href="#实例语句块成员内部类" class="headerlink" title="实例语句块成员内部类"></a>实例语句块成员内部类</h1><h2 id="实例语句块内容"><a href="#实例语句块内容" class="headerlink" title="实例语句块内容"></a>实例语句块内容</h2><ol><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个放在类中</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>小结：</p><ul><li><p>实例语句块/代码【了解内容,使用的非常少】</p></li><li><p>实例代码块可以编写多个,也是道循自上而下的顺序依次执行</p></li><li><p>实例代码块在构造方法执行之前执行,构造方法执行依次,实例代码块对应执行一次</p></li><li><p>实例代码块也是Java语言为程序员准备一个特殊的时机,这个特殊时机被称为:对象初始化时机</p></li></ul></li></ol><h2 id="成员内部类内容"><a href="#成员内部类内容" class="headerlink" title="成员内部类内容"></a>成员内部类内容</h2><ol><li><p>语法格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>小结：</p><ul><li>可以共享外部类的成员（属性，方法）</li><li>如果使用成员内部类的对象，外部类的对象必须存在。</li></ul></li><li><p>怎样调成员内部类的方法: </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> b<span class="token punctuation">;</span>    <span class="token keyword">private</span> String str<span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">bb</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种方法：</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test<span class="token punctuation">.</span>bb b <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种方法：</span>        Test<span class="token punctuation">.</span>bb s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table标签(01)</title>
      <link href="/posts/2e463a55.html"/>
      <url>/posts/2e463a55.html</url>
      
        <content type="html"><![CDATA[<h1 id="第1节：Table标签"><a href="#第1节：Table标签" class="headerlink" title="第1节：Table标签"></a>第1节：Table标签</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15px<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">aria-rowcount</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aqua<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合并2行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ccc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合并2列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="table标签属性："><a href="#table标签属性：" class="headerlink" title="table标签属性："></a>table标签属性：</h2><ul><li><code>width</code>：长度</li><li><code>height</code>：高度</li><li><code>cellspacing</code>：规定单元边沿与单元内容之间的空间，用以像素(px)或百分比(%)</li><li><code>cellpadding</code>：规定单元边沿与其内容之间的空白，用以像素(px)或百分比(%)</li><li><code>border</code>：边框</li><li><code>bordercolor</code>：边框颜色</li><li><code>bgcolor</code>：规定表格单元格的背景颜色</li><li>**<code>colspan</code>**：合并行，输入值：合并几行</li><li>**<code>rowspan</code>**：合并列，输入值：合并几列</li></ul><h2 id="table的子集标签："><a href="#table的子集标签：" class="headerlink" title="table的子集标签："></a>table的子集标签：</h2><ul><li><code>caption</code>：表格标题</li><li><code>th</code>：表头 (<strong>表头与列不同的是表头文字自动加粗文字居中</strong>)</li><li><code>tr</code>：行</li><li><code>td</code>：列</li></ul><p><code>待补充...</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table总结</title>
      <link href="/posts/c888fdae.html"/>
      <url>/posts/c888fdae.html</url>
      
        <content type="html"><![CDATA[<h1 id="第2节：Table总结"><a href="#第2节：Table总结" class="headerlink" title="第2节：Table总结"></a>第2节：Table总结</h1><h2 id="Table标签属性总结："><a href="#Table标签属性总结：" class="headerlink" title="Table标签属性总结："></a>Table标签属性总结：</h2><ul><li><code>&lt;tr&gt;</code>不能设置width，但是可以设置height</li><li>如果一行中每个<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>每个元素长度不一试着在<code>&lt;table&gt;</code>加上<code>table-layout:fixed</code>注意：这个是style样式表</li></ul><h2 id="a-标签更改字体以及去掉下划线："><a href="#a-标签更改字体以及去掉下划线：" class="headerlink" title="**a**标签更改字体以及去掉下划线："></a>**<code>a</code>**标签更改字体以及去掉下划线：</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    // 更改字体颜色<span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    // 去掉下划线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>待补充...</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化日志</title>
      <link href="/posts/aa22d48d.html"/>
      <url>/posts/aa22d48d.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客BUG及优化日志-分先后修复及更新"><a href="#博客BUG及优化日志-分先后修复及更新" class="headerlink" title="博客BUG及优化日志(分先后修复及更新)"></a>博客BUG及优化日志(分先后修复及更新)</h1><blockquote><p><strong>以下<code>功能</code>或<code>BUG</code>会分前后顺序进行修复/优化</strong></p><p>您如果浏览本站发现<code>BUG</code>或<code>想法</code>，可以联系我<a href="tencent://AddContact/?fromId=50&amp;fromSubId=1&amp;subcmd=all&amp;uin=963936892">QQ</a> / <a href="mailto:963936892@qq.com">邮箱</a></p></blockquote><h2 id="基本功能-优化-BUG-功能"><a href="#基本功能-优化-BUG-功能" class="headerlink" title="基本功能(优化/BUG/功能)"></a>基本功能(优化/BUG/功能)</h2><ol><li>归档页面与文章标签页面成为一个二级标签，一级名称为文章<code>(已优化)</code></li><li>合并标签、分类为一个页面统称为文章标签<code>(已优化)</code></li><li>归档页面重新更改<code>(已优化)</code></li><li>优化常用导航搜索栏页面<code>(已优化)</code></li><li>短链接无法访问实际文章页面<code>(已修复)</code></li><li>标头文件格式不对，无法显示导航栏中的书签<code>(已修复)</code></li><li>加入全屏按钮<code>(已优化)</code></li><li>更换音乐歌单<code>(已优化)</code></li><li>更换图片及更换打赏图片(未优化)</li><li>我的导航页面中链接排版过大，影响视觉体验<code>(已优化)</code></li><li>主页开始阅读、GITHUB按钮点击之后变成绿色(未优化)</li><li>文章卡片腰牌，在这里感谢<a href="https://hesifan.top/">不染轻裳</a>大佬的源码<code>（已优化）</code></li><li>将默认的标签与归档恢复，并重新创建一个页面合并这两个页面<code>（已优化）</code></li></ol><h2 id="留言板-优化功能"><a href="#留言板-优化功能" class="headerlink" title="留言板(优化功能)"></a>留言板(优化功能)</h2><ol><li>新增互换友链内容<code>(已优化)</code></li><li>增加网易云热评内容<code>(已优化)</code></li><li>增加评论功能<code>(已优化)</code></li></ol><h2 id="优化友情链接对不齐情况-优化功能"><a href="#优化友情链接对不齐情况-优化功能" class="headerlink" title="优化友情链接对不齐情况(优化功能)"></a>优化友情链接对不齐情况(优化功能)</h2><ol><li>优化友情链接中间比两边大的情况<code>(已优化)</code></li></ol><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ol><li>首页背景图在手机显示过大(未优化)</li><li>日志页面文字溢出父级容器(未优化)</li></ol><h2 id="关于百宝箱中的页面设置-优化功能"><a href="#关于百宝箱中的页面设置-优化功能" class="headerlink" title="关于百宝箱中的页面设置(优化功能)"></a>关于百宝箱中的页面设置(优化功能)</h2><ol><li>音乐页面未开发(未优化)</li><li>书籍页面未开发(未优化)</li></ol><h2 id="关于我的页面-优化功能"><a href="#关于我的页面-优化功能" class="headerlink" title="关于我的页面(优化功能)"></a>关于我的页面(优化功能)</h2><ol><li>新增自我介绍：性格、爱好…等详细介绍…(未优化)</li><li>优化我的页面排版(未优化)</li></ol><h2 id="魔改懒加载插件内容-优化功能"><a href="#魔改懒加载插件内容-优化功能" class="headerlink" title="魔改懒加载插件内容(优化功能)"></a>魔改懒加载插件内容(优化功能)</h2><ol><li>更改懒加载动画(未优化)</li><li>更改懒加载文字(未优化)</li></ol><h2 id="网站收录"><a href="#网站收录" class="headerlink" title="网站收录"></a>网站收录</h2><ol><li>将博客部署到服务器: github不让百度爬取内容，所以百度不收录github内容….</li><li>添加站点地图<code>(已优化)</code></li><li>谷歌、百度收录(未优化)</li></ol><h2 id="新版更新-新增功能"><a href="#新版更新-新增功能" class="headerlink" title="新版更新(新增功能)"></a>新版更新(新增功能)</h2><ol><li>新增朋友圈功能，实现实时更新(新增功能)</li><li>更换白\夜间模式主题(新增功能)</li><li>更换回到顶部按钮及部分UI(新增功能)</li><li>添加访问统计页面(新增功能)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
