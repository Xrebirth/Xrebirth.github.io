<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小靳同学</title>
  
  <subtitle>是小靳同学啊</subtitle>
  <link href="https://xrebirth.github.io/atom.xml" rel="self"/>
  
  <link href="https://xrebirth.github.io/"/>
  <updated>2022-01-12T10:44:15.655Z</updated>
  <id>https://xrebirth.github.io/</id>
  
  <author>
    <name>小靳同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringWeb(05)</title>
    <link href="https://xrebirth.github.io/posts/a69afeb3.html"/>
    <id>https://xrebirth.github.io/posts/a69afeb3.html</id>
    <published>2022-01-10T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringWeb"><a href="#SpringWeb" class="headerlink" title="SpringWeb"></a>SpringWeb</h1><p>详细笔记见：Spring中LearnSpring14-SpringWeb模块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringWeb&quot;&gt;&lt;a href=&quot;#SpringWeb&quot; class=&quot;headerlink&quot; title=&quot;SpringWeb&quot;&gt;&lt;/a&gt;SpringWeb&lt;/h1&gt;&lt;p&gt;详细笔记见：Spring中LearnSpring14-SpringWeb模块。&lt;/p</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Spring5" scheme="https://xrebirth.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务(04)</title>
    <link href="https://xrebirth.github.io/posts/c70e09ea.html"/>
    <id>https://xrebirth.github.io/posts/c70e09ea.html</id>
    <published>2022-01-10T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h2 id="Maven相关依赖"><a href="#Maven相关依赖" class="headerlink" title="Maven相关依赖"></a>Maven相关依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xrebirth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>LearnSpring12-Spring-trans-annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring核心依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-tx(事务包)为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-jdbc这个依赖包含对Spring对JDBC 数据访问进行封装的所有类。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--JDBC驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--MyBaits和Spring集成的依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--阿里druid数据库连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--目的是把src/main/java目录中的所有包含xml的文件输出到classes目录中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.target --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.source --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。  在 Spring 中通常可以通过以下两种方式来实现对事务的管理：  </p><ol><li>使用 Spring 的事务注解管理事务  </li><li>使用 AspectJ 的 AOP 配置管理事务  </li></ol><h2 id="事务管理-API"><a href="#事务管理-API" class="headerlink" title="事务管理 API"></a>事务管理 API</h2><p>Spring 的事务管理，主要用到两个事务相关的接口。  </p><h3 id="事务管理器接口"><a href="#事务管理器接口" class="headerlink" title="事务管理器接口"></a>事务管理器接口</h3><p>事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。   </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2022%3A%E5%B9%B4%201%3A%E6%9C%88%2012%3A%E6%97%A5%2017%3A%E6%97%B6%2027%3A%E5%88%861641979677263.png" alt="事务管理器接口"></p><h3 id="常用的两个实现类"><a href="#常用的两个实现类" class="headerlink" title="常用的两个实现类"></a>常用的两个实现类</h3><p>PlatformTransactionManager 接口有两个常用的实现类：  </p><ol><li><strong>DataSourceTransactionManager</strong>：使用 JDBC 或 MyBatis 进行数据库操作时使用。  </li><li><strong>HibernateTransactionManager</strong>：使用 Hibernate 进行持久化数据时使用。  </li></ol><h3 id="Spring-的回滚方式"><a href="#Spring-的回滚方式" class="headerlink" title="Spring 的回滚方式"></a>Spring 的回滚方式</h3><p>Spring 事务的默认回滚方式是： 发生<strong>运行时异常和 error 时回滚</strong>，发生<strong>受查(编译)异常时提交</strong>。 不过，对于受查异常，开发人员也可以手工设置其回滚方式。  </p><h3 id="回顾错误与异常"><a href="#回顾错误与异常" class="headerlink" title="回顾错误与异常"></a>回顾错误与异常</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2022%3A%E5%B9%B4%201%3A%E6%9C%88%2012%3A%E6%97%A5%2017%3A%E6%97%B6%2030%3A%E5%88%861641979809050.png"></p><p>Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类(或其子类之一)的实例时， 才能通过 Java 虚拟机或者 Java 的 throw 语句抛出。</p><p>Error 是程序在运行过程中出现的无法处理的错误，比如 OutOfMemoryError、ThreadDeath、 NoSuchMethodError 等。当这些错误发生时，程序是无法处理（捕获或抛出）的， JVM 一般会终止线程。</p><p>程序在编译和运行时出现的另一类错误称之为异常，它是 JVM 通知程序员的一种方式。通过这种方式，让程序员知道已经或可能出现错误，要求程序员对其进行处理。</p><p>异常分为运行时异常与受查异常。</p><p>运行时异常，是 RuntimeException 类或其子类， 即只有在运行时才出现的异常。如，NullPointerException、 ArrayIndexOutOfBoundsException、 IllegalArgumentException 等均属于运行时异常。这些异常由 JVM 抛出，在编译时不要求必须处理（捕获或抛出）。但只要代码编写足够仔细，程序足够健壮，运行时异常是可以避免的。</p><p>受查异常，也叫编译时异常，即在代码编写时要求必须捕获或抛出的异常，若不处理，则无法通过编译。如 SQLException， ClassNotFoundException， IOException 等都属于受查异常。</p><p>RuntimeException 及其子类以外的异常，均属于受查异常。当然，用户自定义的 Exception的子类，即用户自定义的异常也属受查异常。程序员在定义异常时，只要未明确声明定义的为 RuntimeException 的子类，那么定义的就是受查异常。  </p><h3 id="事务定义接口"><a href="#事务定义接口" class="headerlink" title="事务定义接口"></a>事务定义接口</h3><p>事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限，及对它们的操作。  </p><h4 id="五个事务隔离级别常量"><a href="#五个事务隔离级别常量" class="headerlink" title="五个事务隔离级别常量"></a>五个事务隔离级别常量</h4><p>这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。  </p><p>DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ； Oracle默认为 READ_COMMITTED。</p><ol><li>READ_UNCOMMITTED： 读未提交。未解决任何并发问题。</li><li>READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。</li><li>REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读。</li><li>SERIALIZABLE： 串行化。不存在并发问题。 </li></ol><h4 id="七个事务传播行为常量"><a href="#七个事务传播行为常量" class="headerlink" title="七个事务传播行为常量"></a>七个事务传播行为常量</h4><p>所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。</p><p>事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。    </p><p><strong>PROPAGATION_REQUIRED</strong><br><strong>PROPAGATION_REQUIRES_NEW</strong><br>PROPAGATION_SUPPORTS<br>PROPAGATION_MANDATORY<br>PROPAGATION_NESTED<br>PROPAGATION_NEVER<br>PROPAGATION_NOT_SUPPORTED  </p><h5 id="PROPAGATION-REQUIRED："><a href="#PROPAGATION-REQUIRED：" class="headerlink" title="PROPAGATION_REQUIRED："></a>PROPAGATION_REQUIRED：</h5><p>指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。  如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事<br>务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。  </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220112173746326.png" alt="image-20220112173746326"></p><h5 id="PROPAGATION-SUPPORTS："><a href="#PROPAGATION-SUPPORTS：" class="headerlink" title="PROPAGATION_SUPPORTS："></a>PROPAGATION_SUPPORTS：</h5><p>指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。  </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220112173825526.png" alt="image-20220112173825526"></p><h5 id="PROPAGATION-REQUIRES-NEW-："><a href="#PROPAGATION-REQUIRES-NEW-：" class="headerlink" title="PROPAGATION_REQUIRES_NEW ："></a>PROPAGATION_REQUIRES_NEW ：</h5><p>总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。  </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220112173855053.png" alt="image-20220112173855053"></p><h4 id="定义了默认事务超时时限"><a href="#定义了默认事务超时时限" class="headerlink" title="定义了默认事务超时时限"></a>定义了默认事务超时时限</h4><p>常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限， sql 语句的执行时长。注意：事务的超时时限起作用的条件比较多(例如服务器与用户之间的网速，sql语句执行时长…)，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。 </p><h2 id="使用Spring事务注解管理事务"><a href="#使用Spring事务注解管理事务" class="headerlink" title="使用Spring事务注解管理事务"></a>使用Spring事务注解管理事务</h2><p>通过@Transactional 注解方式， 可将事务织入到相应 public 方法中，实现事务管理。</p><p>@Transactional 的所有可选属性如下所示：</p><ol><li>propagation： 用于设置事务传播属性。该属性类型为 Propagation 枚举，默认值为Propagation.REQUIRED。  </li><li>isolation： 用于设置事务的隔离级别。该属性类型为 Isolation 枚举，默认值为<br> Isolation.DEFAULT。</li><li>readOnly： 用于设置该方法对数据库的操作是否是只读的。该属性为 boolean，默认值为 false。</li><li>timeout： 用于设置本操作与数据库连接的超时时限。单位为秒，类型为 int，默认值为-1，即没有时限。</li><li>rollbackFor： 指定需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组</li><li>rollbackForClassName： 指定需要回滚的异常类类名。类型为 String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li><li>noRollbackFor： 指定不需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li><li>noRollbackForClassName： 指定不需要回滚的异常类类名。类型为 String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。</li></ol><p>需要注意的是， @Transactional 若用在方法上，只能用于 public 方法上。对于其他非 public方法，如果加上了注解@Transactional， 虽然 Spring 不会报错，但不会将指定事务织入到该方法中。因为 Spring 会忽略掉所有非 public 方法上的@Transaction 注解。若@Transaction 注解在类上，则表示该类上所有的方法均将在执行时织入事务。</p><p>详细笔记见：Spring中LearnSpring12-Spring-trans-annotation模块。</p><h2 id="使用AspectJ的AOP配置管理事务"><a href="#使用AspectJ的AOP配置管理事务" class="headerlink" title="使用AspectJ的AOP配置管理事务"></a>使用AspectJ的AOP配置管理事务</h2><p>详细笔记见：Spring中LearnSpring13-Spring-trans-aspectj模块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring事务&quot;&gt;&lt;a href=&quot;#Spring事务&quot; class=&quot;headerlink&quot; title=&quot;Spring事务&quot;&gt;&lt;/a&gt;Spring事务&lt;/h1&gt;&lt;h2 id=&quot;Maven相关依赖&quot;&gt;&lt;a href=&quot;#Maven相关依赖&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Spring5" scheme="https://xrebirth.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>Spring 集成 MyBatis(03)</title>
    <link href="https://xrebirth.github.io/posts/76b86a2d.html"/>
    <id>https://xrebirth.github.io/posts/76b86a2d.html</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-集成-MyBatis"><a href="#Spring-集成-MyBatis" class="headerlink" title="Spring 集成 MyBatis"></a>Spring 集成 MyBatis</h1><p>将 MyBatis 与 Spring 进行整合，主要解决的问题就是将 SqlSessionFactory 对象交由 Spring来管理。所以，该整合，只需要将 SqlSessionFactory 的对象生成器 SqlSessionFactoryBean 注册在 Spring 容器中，再将其注入给 Dao 的实现类即可完成整合。<br>实现 Spring 与 MyBatis 的整合常用的方式：扫描的 Mapper 动态代理Spring 像插线板一样， mybatis 框架是插头，可以容易的组合到一起。 插线板 spring 插上 Mybatis， 两个框架就是一个整体。  </p><h2 id="Maven相关依赖"><a href="#Maven相关依赖" class="headerlink" title="Maven相关依赖"></a>Maven相关依赖</h2><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--单元测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring核心依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-tx(事务包)为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    spring-jdbc这个依赖包含对Spring对JDBC 数据访问进行封装的所有类。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--JDBC驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Mybatis依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--MyBaits和Spring集成的依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--阿里druid数据库连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--目的是把src/main/java目录中的所有包含xml的文件输出到classes目录中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--需要不被过滤的文件--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--filtering：是否启用过滤器：true(启用)/false(禁用)--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.target --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 同【方式一】的 maven.compiler.source --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义-MyBatis-主配置文件"><a href="#定义-MyBatis-主配置文件" class="headerlink" title="定义 MyBatis 主配置文件"></a>定义 MyBatis 主配置文件</h2><p>在 src 下定义 MyBatis 的主配置文件，命名为 mybatis.xml。</p><p>这里有两点需要注意：</p><ol><li>主配置文件中不再需要数据源的配置了。因为数据源要交给 Spring 容器来管理了。</li><li>这里对 mapper 映射文件的注册，使用&lt;package/&gt;标签，即只需给出 mapper 映射文件所在的包即可。因为 mapper 的名称与 Dao 接口名相同，可以使用这种简单注册方式。 这种方式的好处是，若有多个映射文件，这里的配置也是不用改变的。当然，也可使用原来的&lt;resource/&gt;标签方式。</li></ol><h2 id="定义Spring-配置文件"><a href="#定义Spring-配置文件" class="headerlink" title="定义Spring 配置文件"></a>定义Spring 配置文件</h2><h3 id="数据源的配置"><a href="#数据源的配置" class="headerlink" title="数据源的配置"></a>数据源的配置</h3><p>使用 JDBC 模板，首先需要配置好数据源，数据源直接以 Bean 的形式配置在 Spring 配置文件中。根据数据源的不同，其配置方式不同：  </p><h3 id="Druid-数据源-DruidDataSource"><a href="#Druid-数据源-DruidDataSource" class="headerlink" title="Druid 数据源 DruidDataSource"></a>Druid 数据源 DruidDataSource</h3><p>Druid 是阿里的开源数据库连接池。 是 Java 语言中最好的数据库连接池。 Druid 能够提供强大的监控和扩展功能。 Druid 与其他数据库连接池的最大区别是提供数据库的官网： <a href="https://github.com/alibaba/druid%E3%80%82">https://github.com/alibaba/druid。</a></p><p>使用地址： <a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/常见问题</a> </p><p>常用配置：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE</a></p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc_url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc_user}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc_password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxOpenPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asyncInit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从属性文件读取数据库连接信息"><a href="#从属性文件读取数据库连接信息" class="headerlink" title="从属性文件读取数据库连接信息"></a>从属性文件读取数据库连接信息</h3><p>为了便于维护，可以将数据库连接信息写入到属性文件中，使 Spring 配置文件从中读取数据。属性文件名称自定义，但一般都是放在 src/resources目录下。</p><pre class="line-numbers language-jdbc.properties"><code class="language-jdbc.properties">jdbc.url=jdbc.username=jdbc.password=jdbc.maxActive=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Spring 配置文件从属性文件中读取数据时，需要在&lt;property/&gt;的 value 属性中使用${ }，将在属性文件中定义的 key 括起来，以引用指定属性的值。  该属性文件若要被 Spring 配置文件读取，其必须在配置文件中进行注册。 使用&lt;context&gt;标签。  </p><p>Spring配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1.通过框架Druid连接池获取数据源--></span>    <span class="token comment" spellcheck="true">&lt;!--把数据库配置信息写在一个独立文件中，便于修改数据库的配置内容--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名数据源DataSource,作用是连接数据库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span>          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            使用属性配置文件的数据，语法：${key}        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setUrl()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setUsername()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setPassword()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.maxActive}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--setMaxActive()--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.通过上面的数据源和Mabatis主配置文件来获取sqlSessionFactory对象--></span>    <span class="token comment" spellcheck="true">&lt;!--声名的是mybatis中提供的SqlSessionFactoryBean类,这个类内部创建SqlSessionFactory这个对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--set注入,把数据库连接池赋值给了dataSource属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            MyBatis主配置文件位置            configuration属性是Resource类型用来读取配置文件            它的赋值使用value指定文件的路径,使用classpath:表示文件的位置        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.Spring自动扫描指定包中的所有dao对象并自动将对象自动放到Spring容器中--></span>    <span class="token comment" spellcheck="true">&lt;!--创建dao对象使用SqlSession的getMapper(StudentDao.class)        Mapper    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--指定SqlSessionFactory对象的id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            指定包名，包名是dao接口所在的包名。            MapperScannerConfigurer会扫描这个包中所有的接口，把每个接口都执行一次getMapper()方法得到每个接口的dao对象。            创建好的到对象放入到Spring的容器中，dao对象的默认名称就是接口名称的首字母小写        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--4.声名service对象,将dao层创建的对象赋值给service层--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.service.impl.StudentServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细笔记见：Spring中LearnSpring10-Spring-MyBatis模块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-集成-MyBatis&quot;&gt;&lt;a href=&quot;#Spring-集成-MyBatis&quot; class=&quot;headerlink&quot; title=&quot;Spring 集成 MyBatis&quot;&gt;&lt;/a&gt;Spring 集成 MyBatis&lt;/h1&gt;&lt;p&gt;将 MyBatis </summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Spring5" scheme="https://xrebirth.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>Spring(02)</title>
    <link href="https://xrebirth.github.io/posts/46926218.html"/>
    <id>https://xrebirth.github.io/posts/46926218.html</id>
    <published>2022-01-07T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>在目标类不增加代码的情况下，给目标类增加功能。</li><li>减少重复的代码。</li><li>让开发人员更加专注于业务逻辑的实现。</li><li>解耦合：将业务功能和日志、事务等非业务功能解耦。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>当需要修改系统中某个类的功能，原有类的功能不完善，而又没有源代码的情况。</li><li>当你需要给项目中多个类增加相同的功能时。</li><li>给业务方法增加事务、日志输出等功能时。</li></ol><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>Spring底层实现了两种方式，一种是实现了JDK动态代理方式，另一种是实现了cglib框架(此框架是专门为了实现AOP而做的)。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>使用的是JDK中的InvocationHandler、Method、Proxy类来创建动态代理从而实现动态代理。</p><p>InvocationHandler：实现InvocationHandler下面的invoke方法从而实现动态代理。</p><p>Method：使用Method执行目标类中的方法。</p><p>Proxy：用于创建代理对象。</p><blockquote><p><strong>注意：</strong>使用JDK动态代理需要使用到接口，如果没有接口可以使用cjlib框架，此框架不需要使用接口，底层使用的是继承来实现动态代理。</p></blockquote><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><p>对于 AOP 这种编程思想，很多框架都进行了实现。 Spring 就是其中之一，可以完成面向切面编程。然而， AspectJ 也实现了 AOP 的功能，且其实现方式更为简捷，使用更为方便，而且还支持注解式开发。所以， Spring 又将 AspectJ 的对于 AOP 的实现也引入到了自己的框架中。在 Spring 中使用 AOP 开发时，一般使用 AspectJ 的实现方式。 </p><p> 官网地址： <a href="http://www.eclipse.org/aspectj/">http://www.eclipse.org/aspectj/</a>  </p><h2 id="AspectJ通知类型"><a href="#AspectJ通知类型" class="headerlink" title="AspectJ通知类型"></a>AspectJ通知类型</h2><p>AspectJ 中常用的通知有五种类型。</p><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><ol><li>在目标方法执行之前先执行的。</li><li>不会改变目标方法执行的结果。</li><li>不会影响目标方法的执行。</li></ol><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><ol><li>在目标方法之后执行。</li><li>能够获取到目标方法的返回值,可以根据这个返回值做不同的处理功能。</li><li>可以修改这个返回值(但是不会影响目标方法的最终返回值，只能改变扩展方法中的返回值)。</li></ol><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><ol><li>它是功能最强的一个通知。</li><li>在目标方法的前和后都能增强功能。</li><li>控制目标方法是否被调用执行。</li><li>修改原来的目标方法的执行结果，影响最后的调用结果。</li><li>此通知类似于JDK底层的动态代理功能。</li></ol><h3 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h3><ol><li>在目标方法抛出异常时执行的。</li><li>可以做异常的监控程序,监控该方法执行时是不是有异常，如果有异常,可以发送邮件,短信通知。</li></ol><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><ol><li>无论目标方法是否执行成功,通知方法一定会执行。</li><li>在目标方法之后执行的。</li></ol><h2 id="AspectJ切入点表达式"><a href="#AspectJ切入点表达式" class="headerlink" title="AspectJ切入点表达式"></a>AspectJ切入点表达式</h2><p>AspectJ 定义了专门的表达式用于指定切入点。表达式的原型是：  </p><pre><code>execution(modifiers-pattern? ret-type-patterndeclaring-type-pattern?name-pattern(param-pattern)throws-pattern?)</code></pre><p>切入点表达式要匹配的对象就是目标方法的方法名，所以execution 表达式中明显就是方法的签名。以上表达式共 4 个部分：execution(访问权限 方法返回值 方法声明(参数) 异常类型) </p><table><thead><tr><th><strong>表达式</strong></th><th>说明</th></tr></thead><tbody><tr><td>modifiers-pattern</td><td>访问权限类型，例(protect、public…)</td></tr><tr><td><strong>ret-type-pattern</strong></td><td>返回值类型</td></tr><tr><td>declaring-type-pattern</td><td>包名类名</td></tr><tr><td><strong>name-pattern(param-pattern)</strong></td><td>方法名(参数类型和参数个数)</td></tr><tr><td>throws-pattern</td><td>抛出异常类型</td></tr></tbody></table><p><strong>注意：</strong>以上表达式中加粗文字表示不可省略部分，各部分间用空格分开。在其中可以使用以下符号：  </p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0至多个任意字符</td></tr><tr><td>..</td><td>用在方法参数中,表示任意多个参数 用在包名后,表示当前包及其子包路径</td></tr><tr><td>+</td><td>用在类名后,表示当前类及其子类 用在接口后,表示当前接口及其实现类</td></tr></tbody></table><p>例子：</p><p>execution(public * *(..))<br>指定切入点为：任意公共方法。<br>execution(* set*(..))<br>指定切入点为：任何一个以“set”开始的方法。<br>execution(* com.xyz.service.*.*(..))<br>指定切入点为：定义在 service 包里的任意类的任意方法。<br>execution(* com.xyz.service..*.*(..))<br>指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后<br>面必须跟“*”，表示包、子包下的所有类。<br>execution(* *..service.*.*(..))<br>指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点<br>execution(* *.service.*.*(..))<br>指定只有一级包下的 serivce 子包下所有类（接口） 中所有方法为切入点<br>execution(* *.ISomeService.*(..))<br>指定只有一级包下的 ISomeSerivce 接口中所有方法为切入点<br>execution(* joke(Object+)))<br>指定切入点为：所有的 joke()方法，方法拥有一个参数，且参数是 Object 类型或该类的子类。<br>不仅 joke(Object ob)是， joke(String s)和 joke(User u)也是。</p><h2 id="Maven相关依赖"><a href="#Maven相关依赖" class="headerlink" title="Maven相关依赖"></a>Maven相关依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--相关依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Spring依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--aspectj依赖AOP框架--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AspectJ-基于注解的-AOP-实现"><a href="#AspectJ-基于注解的-AOP-实现" class="headerlink" title="AspectJ 基于注解的 AOP 实现"></a>AspectJ 基于注解的 AOP 实现</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="定义业务接口与实现类"><a href="#定义业务接口与实现类" class="headerlink" title="定义业务接口与实现类"></a>定义业务接口与实现类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//业务接口</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//业务接口实现类</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">.</span>SomeService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目标类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            需求:            在doSome执行之前增加执行时间         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====目标方法doSome()===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Aspect: 是aspectj框架中的注解. *          作用:表示当前类是切面类. *          切面类:是用来给业务方法增加功能的类,在这个类中有切面的功能代码 *          使用位置:在类定义上面 */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 指定通知方法中的参数     * 参数类型: JoinPoint (注:JoinPoint中的P为大写)     * JoinPoint:业务方法要加入切面功能的业务方法.     *      作用: 可以在通知方法中获取方法执行时的信息,例如实际调用方法的名称及方法的实参     *            如果切面功能中需要使用实际调用方法中的方法信息就在通知中加入JoinPoint信息     *            这个JoinPoint参数的值是由框架赋予的,必须是通知方法中第一个参数!     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public void com.xrebirth.bean01.impl.SomeServiceImpl.doSome(String,Integer))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通知方法(增强方法)</span>        <span class="token comment" spellcheck="true">//获取方法的完整定义</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的签命(定义):"</span> <span class="token operator">+</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法的名称</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的名称:"</span> <span class="token operator">+</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法的实参</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历调用实际方法中的参数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法实参--->"</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//切面要执行的功能代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1--前置通知(在目标方法执行之前执行):切面功能:在目标方法之前输出执行时间:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注意:这里方法可以创建多个方法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在Spring配置文件中注册-AspectJ-的自动代理"><a href="#在Spring配置文件中注册-AspectJ-的自动代理" class="headerlink" title="在Spring配置文件中注册 AspectJ 的自动代理"></a>在Spring配置文件中注册 AspectJ 的自动代理</h4><p>在定义好切面 Aspect 后，需要通知 Spring 容器，让容器生成“目标类+ 切面”的代理对象。这个代理是由容器自动生成的。只需要在 Spring 配置文件中注册一个基于 aspectj 的自动代理生成器，其就会自动扫描到@Aspect 注解，并按通知类型与切入点，将其织入，并<br>生成代理。  </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--将对象交给Spring容器,由Spring容器统一创建.管理对象--></span>    <span class="token comment" spellcheck="true">&lt;!--声名目标对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean08.impl.SomeServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名切面类对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean08.MyAspect<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名自动代理生成器: 使用aspectj框架内部的功能,创建目标对象的代理对象        创建代理对象是在内存中实现的,修改目标对象的内存中的结构.创建为代理对象        所以目标对象就是被修改后的代理对象    --></span>    <span class="token comment" spellcheck="true">&lt;!--        在添加aop:aspectj-autoproxy标签之后idea自动添加xml中的spring-aop.xsd约束文件        aspectj-autoproxy:会把spring容器中的所有的目标对象一次性都生成代理对象    --></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;aop:aspectj-autoproxy />--></span>    <span class="token comment" spellcheck="true">&lt;!--        在目标对象有接口情况下使用CGLIB接口        proxy-target-class：代表即使目标类使用的接口实现也要使用CGLIB接口实现动态代理    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试方法使用目标对象中的id"><a href="#测试方法使用目标对象中的id" class="headerlink" title="测试方法使用目标对象中的id"></a>测试方法使用目标对象中的id</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>assertTrue<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean01<span class="token punctuation">.</span>SomeService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest01</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String config <span class="token operator">=</span> <span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从容器中获取目标对象</span>        SomeService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>SomeService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过代理的对象执行方法,实现目标方法执行时增强了功能</span>        proxy<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体通知中的详细参数见：spring项目中LearnSpring09-AOP-aspectj模块相关代码</p><h3 id="Pointcut-定义切入点"><a href="#Pointcut-定义切入点" class="headerlink" title="@Pointcut 定义切入点"></a>@Pointcut 定义切入点</h3><p>当较多的通知增强方法使用相同的 execution 切入点表达式时，编写、维护均较为麻烦。AspectJ 提供了@Pointcut 注解，用于定义 execution 切入点表达式。其用法是，将@Pointcut 注解在一个方法之上，以后所有的 execution 的 value 属性值均可使用该方法名作为切入点。代表的就是@Pointcut 定义的切入点。这个使用@Pointcut 注解的方法一般使用 private 的标识方法，即没有实际作用的方法。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//切面类</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>xrebirth<span class="token punctuation">.</span>bean08<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Aspect: 是aspectj框架中的注解. *          作用:表示当前类是切面类. *          切面类:是用来给业务方法增加功能的类,在这个类中有切面的功能代码 *          使用位置:在类定义上面 */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointcut())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知：在方法执行之前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行最终通知,一定会被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一般用于资源清除工作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Pointcut: 定义和管理切入点，如果项目中有多个切入点表达式需要管理，则可以使用这个注解是可以复用的     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *.doThird(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无需代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP-面向切面编程&quot;&gt;&lt;a href=&quot;#AOP-面向切面编程&quot; class=&quot;headerlink&quot; title=&quot;AOP 面向切面编程&quot;&gt;&lt;/a&gt;AOP 面向切面编程&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Spring5" scheme="https://xrebirth.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>Spring(01)</title>
    <link href="https://xrebirth.github.io/posts/6dbf31db.html"/>
    <id>https://xrebirth.github.io/posts/6dbf31db.html</id>
    <published>2022-01-03T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>Spring 的主要作用就是为代码“解耦”，降低代码间的耦合度。 就是让对象和对象（模块和模块）之间关系不是使用代码关联，而是通过配置来说明。即在 Spring 中说明对象（模块）的关系。<br>Spring 根据代码的功能特点， 使用 IOC 降低业务对象之间耦合度。 IOC 使得主业务在相互调用过程中，不用再自己维护关系了，即不用再自己创建要使用的对象了。而是由 Spring容器统一管理，自动“注入” ,注入即赋值。 而 AOP 使得系统级服务得到了最大复用，且<br>不用再由程序员手工将系统级服务“混杂”到主业务逻辑中了，而是由 Spring 容器统一完成“织入”。</p><h2 id="基于XML文件进行DI"><a href="#基于XML文件进行DI" class="headerlink" title="基于XML文件进行DI"></a>基于XML文件进行DI</h2><h3 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h3><h4 id="set-注入"><a href="#set-注入" class="headerlink" title="set 注入"></a>set 注入</h4><p>set 注入也叫设值注入是指，通过 setter 方法传入被调用者的实例。这种注入方式简单、直观，因而在 Spring 的依赖注入中大量使用。  </p><p>注意：spring使用set进行注入时，其使用原理是调用类中的set+变量的方法进行赋值，所以使用set方式尽心赋值类中必须有set方法。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>详见：spring联系中的LearnSpring02模块</p></blockquote><p>引用类型注入</p><p>当指定 bean 的某属性值为另一 bean 的实例时，通过 ref 指定它们间的引用关系。 ref的值必须为某 bean 的 id 值。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean02.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黎霞<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--给引用类型对象赋值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school01<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean02.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>漳州理工职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>贵州省 六盘水市 水城县<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>构造注入是指：在构造调用者实例的同时，完成被调用者的实例化。即使用构造器设置依赖关系。  </p><p>&lt;constructor-arg /&gt;标签中用于指定参数的属性有：</p><ul><li><p>name：指定参数名称。</p></li><li><p>index：指明该参数对应着构造器的第几个参数，从 0 开始。不过，该属性不要也行，<br>  但要注意，若参数类型相同，或之间有包含关系，则需要保证赋值顺序要与构造器中的参数<br>  顺序一致。</p></li><li><p>value：构造方法的形参类型是简单类型的话使用value。</p></li><li><p>ref：构造方法的形参类型是引用类型的话使用ref。</p></li></ul><h5 id="使用name方式进行构造注入"><a href="#使用name方式进行构造注入" class="headerlink" title="使用name方式进行构造注入"></a>使用name方式进行构造注入</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>漳州理工职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>贵州省 六盘水市 水城县<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.使用构造函数注入--></span>    <span class="token comment" spellcheck="true">&lt;!--使用name对构造函数赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student03<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school02<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用value方式进行构造注入"><a href="#使用value方式进行构造注入" class="headerlink" title="使用value方式进行构造注入"></a>使用value方式进行构造注入</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school03<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>山西工商学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>澳门特别行政区 离岛<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--3.使用构造函数注入--></span>    <span class="token comment" spellcheck="true">&lt;!--使用index对构造函数赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student04<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>王五<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school03<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>27<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用省略value方式进行构造注入"><a href="#使用省略value方式进行构造注入" class="headerlink" title="使用省略value方式进行构造注入"></a>使用省略value方式进行构造注入</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--声名School对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school04<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>山东服装职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京 北京市 怀柔区<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--使用省略index对构造函数赋值--></span>    <span class="token comment" spellcheck="true">&lt;!--省略index必须与构造方法中的参数顺序一样--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student05<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>赵六<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school04<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用类型自动注入"><a href="#引用类型自动注入" class="headerlink" title="引用类型自动注入"></a>引用类型自动注入</h4><p>对于引用类型属性的注入，也可不在配置文件中显示的注入。可以通过为&lt;bean/&gt;标签设置 autowire 属性值，为引用类型属性进行隐式自动注入（默认是不自动注入引用类型属性）。根据自动注入判断标准的不同，可以分为两种：<br>byName：根据名称自动注入<br>byType： 根据类型自动注入  </p><h5 id="byName-方式自动注入"><a href="#byName-方式自动注入" class="headerlink" title="byName 方式自动注入"></a>byName 方式自动注入</h5><p>当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时，可使用byName 方式，让容器自动将被调用者 bean 注入给调用者 bean。容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。  </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--byName进行引用类型自动赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--Spring自动给引用类型对象赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声名school对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海南外国语职业学院<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>内蒙古自治区 巴彦淖尔市 其它区<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="byType-方式自动注入"><a href="#byType-方式自动注入" class="headerlink" title="byType 方式自动注入"></a>byType 方式自动注入</h5><p>使用 byType 方式自动注入，要求：配置文件中被调用者 bean 的 class 属性指定的类，要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同，要么有 is-a 关系（子类，或是实现类）。但这样的注意：同源的被调用 bean 只能有一个。多于一个，spring容器就会报错。</p><ol><li>java类中引用类型的数据类型和bean的class的值是相同的。（类型相同）</li><li>java类中引用类型的数据类型和bean的class的值是父子关系。（继承关系）</li><li>java类中引用类型的数据类型和bean的class的值接口和实现类关系。（实现关系）</li></ol><blockquote><p>详见：LearnSpring04模块</p></blockquote><h3 id="为应用指定多个-Spring-配置文件"><a href="#为应用指定多个-Spring-配置文件" class="headerlink" title="为应用指定多个 Spring 配置文件"></a>为应用指定多个 Spring 配置文件</h3><p>在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将Spring 配置文件分解成多个配置文件。</p><h4 id="包含关系的配置文件"><a href="#包含关系的配置文件" class="headerlink" title="包含关系的配置文件"></a>包含关系的配置文件</h4><p>多个配置文件中有一个总文件，总配置文件将各其它子文件通过<import>引入。在 Java代码中只需要使用总配置文件对容器进行初始化即可。</import></p><p>school模块：  </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--school模块所有bean声名 school模块的配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>田洋<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>甘肃省 白银市 靖远县<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>student模块：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--student模块所有bean声名 student模块的配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring总配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--加载的是文件列表--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:bean01/spring-school.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:bean01/spring-student.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Spring中可以使用通配符，但此时要求父配置文件名不能满足所能匹配的格式，否则将出现循环递归包含。就本例而言，父配置文件不能匹配 spring-*.xml 的格式，即不能起名为spring-total.xml。 </p><p>使用通配符配置总配置文件：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:bean01/spring-*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h2><p> 概述：对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 bean 实例。Spring 中使用注解，需要在原有 Spring 运行环境基础上再做一些改变。需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。  使用注解开发需要在xml文件中加入组件扫描器，目的是通过组件扫描器扫面指定类中的注解从而实现注解开发。</p><h3 id="声名组件扫描器"><a href="#声名组件扫描器" class="headerlink" title="声名组件扫描器"></a>声名组件扫描器</h3><h4 id="使用多次组件扫描器指定不同的包"><a href="#使用多次组件扫描器指定不同的包" class="headerlink" title="使用多次组件扫描器指定不同的包"></a>使用多次组件扫描器指定不同的包</h4><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--第一种方式：使用多次组件扫描器指定不同的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean02<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用分隔符-或-分隔多个包名"><a href="#使用分隔符-或-分隔多个包名" class="headerlink" title="使用分隔符(;或,)分隔多个包名"></a>使用分隔符(;或,)分隔多个包名</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第二种方式:使用分隔符(;或,)分隔多个包名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.bean01;com.xrebirth.bean02<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="指定父包下所有资源进行自动扫描注解"><a href="#指定父包下所有资源进行自动扫描注解" class="headerlink" title="指定父包下所有资源进行自动扫描注解"></a>指定父包下所有资源进行自动扫描注解</h4><blockquote><p>注意：不建议使用顶级的父包，扫描的路径比较多，导致容器启动时间变慢。指定到目标包和合<br>适的。也就是注解所在包全路径。例如注解的类在 com.xrebirth 包中。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--第三种方式：指定父包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="定义-Bean-注解-Component"><a href="#定义-Bean-注解-Component" class="headerlink" title="定义 Bean 注解@Component"></a>定义 Bean 注解@Component</h3><ul><li><p>作用：创建对象的，等同于&lt;bean&gt;&lt;/bean&gt;标签功能。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myStudent"</span><span class="token punctuation">)</span> 等同于 <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myStudent"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.xrebirth.bean01.Student"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>属性： value就是对象的名称，也就是bean的id值(value的值是唯一的，创建的对象在spring中就一个)。</p></li><li><p>位置：注解使用在类的上面。</p></li></ul><p>全程写法：</p><pre class="line-numbers language-xml"><code class="language-xml">@Component(value = "myStudent")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简称写法：</p><pre class="line-numbers language-xml"><code class="language-xml">@Component("myStudent")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：@Component 不指定 value 属性， bean 的 id 是类名的首字母小写。  </p><h3 id="Spring-还提供了另外-3-个创建对象的注解"><a href="#Spring-还提供了另外-3-个创建对象的注解" class="headerlink" title="Spring 还提供了另外 3 个创建对象的注解"></a>Spring 还提供了另外 3 个创建对象的注解</h3><ol><li>@Repository：用于对 DAO层 实现类进行注解。</li><li> @Service ：用于对 Service层 实现类进行注解。</li><li>@Controller：用于对 Controller 实现类进行注解。</li></ol><blockquote><p>这三个注解与@Component 都可以创建对象，但这三个注解还有其他的含义， @Service创建业务层对象，业务层对象可以加入事务功能， @Controller 注解创建的对象可以作为处理器接收用户的请求。  </p></blockquote><p>@Repository， @Service， @Controller 是对@Component 注解的细化，标注不同层的对象。 即持久层对象，业务层对象，控制层对象。    </p><h3 id="简单类型属性注入-Value"><a href="#简单类型属性注入-Value" class="headerlink" title="简单类型属性注入@Value"></a>简单类型属性注入@Value</h3><p>需要在属性上使用注解@Value，该注解的 value 属性用于指定要注入的值。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注解参数中省略了value属性,该属性用于指定Bean的id</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myStudent"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//@Value(value = "小明")简写("常用方式")</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value(value = "20")</span>    <span class="token comment" spellcheck="true">//简写("常用方式")</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="byType-自动注入-Autowired"><a href="#byType-自动注入-Autowired" class="headerlink" title="byType 自动注入@Autowired"></a>byType 自动注入@Autowired</h3><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 方法上。Autowired默认使用的是byType自动注入。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//使用在set方法上面</span>    <span class="token comment" spellcheck="true">//@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSchool</span><span class="token punctuation">(</span>School school<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="byName-自动注入-Autowired-与-Qualifier"><a href="#byName-自动注入-Autowired-与-Qualifier" class="headerlink" title="byName 自动注入@Autowired 与@Qualifier"></a>byName 自动注入@Autowired 与@Qualifier</h3><p>@Autowired  注解默认注入方式为byType如果需要byName方式则需要在引用属性上联合使用注解@Autowired 与@Qualifier。 @Qualifier 的 value 属性用于指定要匹配的 Bean 的 id 值。 类中无需 set 方法，也可加到 set 方法上。  </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在set方法上面</span>    <span class="token comment" spellcheck="true">//@Autowired</span>    <span class="token comment" spellcheck="true">//@Qualifier("mySchool")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSchool</span><span class="token punctuation">(</span>School school<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Autowired默认属性"><a href="#Autowired默认属性" class="headerlink" title="@Autowired默认属性"></a>@Autowired默认属性</h3><p>@Autowired 还有一个属性 required，默认值为 true，表示当匹配失败后，会终止程序运行。若将其值设置为 false，则匹配失败，将被忽略，未匹配的属性值为 null。  </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JDK-注解-Resource-自动注入"><a href="#JDK-注解-Resource-自动注入" class="headerlink" title="JDK 注解@Resource 自动注入"></a>JDK 注解@Resource 自动注入</h3><p>Spring提供了对JDK中@Resource注解的支持。@Resource 注解既可以按名称匹配Bean，也可以按类型匹配 Bean。 <strong>默认是按名称注入。</strong> 使用该注解，要求 JDK 必须是 6 及以上版本。@Resource 可在属性上，也可在 set 方法上。  </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用byName匹配则需要加入那么属性</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//使用在属性上面</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mySchool"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> School school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>@Resource 注解自JDK6以上才会支持，但是自JDK11版本移除了javax.annotation包，所以如果JDK11使用需要在Maven中加入相关的依赖才可使用。</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--@Resource注解依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解与-XML-的对比"><a href="#注解与-XML-的对比" class="headerlink" title="注解与 XML 的对比"></a>注解与 XML 的对比</h2><h3 id="注解优点："><a href="#注解优点：" class="headerlink" title="注解优点："></a>注解优点：</h3><ul><li>方便</li><li>直观</li><li>高效（代码少，没有配置文件的书写那么复杂）  </li></ul><h3 id="注解缺点："><a href="#注解缺点：" class="headerlink" title="注解缺点："></a>注解缺点：</h3><p>以硬编码的方式写入到 Java 代码中，修改是需要重新编译代码。</p><h3 id="XML-方式优点："><a href="#XML-方式优点：" class="headerlink" title="XML 方式优点："></a>XML 方式优点：</h3><p>配置和代码是分离的</p><p>在 xml 中做修改，无需编译代码，只需重启服务器即可将新的配置加载。  </p><h3 id="XML-方式缺点："><a href="#XML-方式缺点：" class="headerlink" title="XML 方式缺点："></a>XML 方式缺点：</h3><p>编写麻烦，效率低，大型项目过于复杂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IOC控制反转&quot;&gt;&lt;a href=&quot;#IOC控制反转&quot; class=&quot;headerlink&quot; title=&quot;IOC控制反转&quot;&gt;&lt;/a&gt;IOC控制反转&lt;/h1&gt;&lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Spring5" scheme="https://xrebirth.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>接收json数组报错使用JSON.parse()方法将数据(字符串)转化js对象</title>
    <link href="https://xrebirth.github.io/posts/3a968ef.html"/>
    <id>https://xrebirth.github.io/posts/3a968ef.html</id>
    <published>2021-12-21T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题：接收json数组报错使用JSON-parse-方法将数据-字符串-转化js对象"><a href="#问题：接收json数组报错使用JSON-parse-方法将数据-字符串-转化js对象" class="headerlink" title="问题：接收json数组报错使用JSON.parse()方法将数据(字符串)转化js对象"></a>问题：接收json数组报错使用JSON.parse()方法将数据(字符串)转化js对象</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在后端传给前端数据(JSON数组)时，JS通过Jquery遍历JSON数组时报以下异常：</p><p>JS：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"[{\"id\":\"1\",\"name\":\"Jsck\"},{\"id\":\"2\",\"name\":\"Array\"}]"</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Error：</p><pre class="line-numbers language-javascriptError"><code class="language-javascriptError">Uncaught TypeError: Cannot use 'in' operator to search for 'length' in [{"id":"1","name":"Jsck"},{"id":"2","name":"Array"}]    at isArrayLike (jquery.js:528)    at Function.each (jquery.js:359)    at test.html?_ijt=tkj0ksfomg7p7vvakpi2jlssuv&_ij_reload=RELOAD_ON_SAVE:15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>在JS中需要用JSON中的parse()方法将JSON数组或JSON对象转换成JS对象在使用Jquery中的earch()方法遍历就不会报错了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"[{\"id\":\"1\",\"name\":\"Jsck\"},{\"id\":\"2\",\"name\":\"Array\"}]"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用JSON中的parse()方法将JSON转换成JS对象</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>具体原因我也不知道，如果有大神看到此文章并且知道原因，请不惜赐教。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题：接收json数组报错使用JSON-parse-方法将数据-字符串-转化js对象&quot;&gt;&lt;a href=&quot;#问题：接收json数组报错使用JSON-parse-方法将数据-字符串-转化js对象&quot; class=&quot;headerlink&quot; title=&quot;问题：接收jso</summary>
      
    
    
    
    <category term="Question" scheme="https://xrebirth.github.io/categories/Question/"/>
    
    
    <category term="JSError" scheme="https://xrebirth.github.io/tags/JSError/"/>
    
  </entry>
  
  <entry>
    <title>UUID</title>
    <link href="https://xrebirth.github.io/posts/e7eabd12.html"/>
    <id>https://xrebirth.github.io/posts/e7eabd12.html</id>
    <published>2021-12-17T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>UUID(Universally Unique Identifier)全局唯一标识符,是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。按照开放软件基金会(OSF)制定的标准计算，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字。由以下几部分的组合：当前日期和时间(UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同)，时钟序列，全局唯一的IEEE机器识别号（如果有网卡，从网卡获得，没有网卡以其他方式获得），UUID的唯一缺陷在于生成的结果串会比较长。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><strong>UUID由以下几部分的组合：</strong></p><ul><li>当前日期和时间，UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同。</li><li>时钟序列。</li><li>全局唯一的IEEE机器识别号，如果有网卡，从网卡MAC地址获得，没有网卡以其他方式获得。</li></ul><p>UUID的唯一缺陷在于生成的结果串会比较长。</p><h2 id="UUID格式"><a href="#UUID格式" class="headerlink" title="UUID格式"></a>UUID格式</h2><p>UUID的标准格式：<code>xxxxxxxx-xxxx-Axxx-Bxxx-xxxxxxxxxxxx</code>，A那个位置代表版本号，由于UUID的标准实现有5个版本，所以只会是1,2,3,4,5； B那个位置只会是8,9,a,b。<br>UUID在发展过程中，为了适应不同的需要，产生了5个版本：</p><ul><li>uuid1: 基于时间戳、机器MAC地址生成。由于使用MAC地址，可以保证全球范围的唯一性。</li><li>uuid2: 只基于时间戳，不常用。</li><li>uuid3: 基于namespace和一个自定义字符串，不常用。</li><li>uuid4: 只基于随机数，最常用，但不推荐，重复几率不太能让人接受。</li><li>uuid5: 只基于namespace，不常用</li></ul><h2 id="UUID作用"><a href="#UUID作用" class="headerlink" title="UUID作用"></a>UUID作用</h2><p><strong>UUID的是让分布式系统中的所有元素都能有唯一的辨识信息</strong>，而不需要通过中央控制端来做辨识信息的指定。如此一来，每个人都可以创建不与其它人冲突的UUID。在这样的情况下就不需考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3文件系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。</p><h2 id="Java-中-UUID-的生成与使用"><a href="#Java-中-UUID-的生成与使用" class="headerlink" title="Java 中 UUID 的生成与使用"></a>Java 中 UUID 的生成与使用</h2><p>Java中的默认UUID生成是使用版本4的。uuid4: 只基于随机数，最常用，但不推荐，重复几率不太能让人接受。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str<span class="token operator">=</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：0c25be0f-b62d-4007-bae0-ef2f8c3ee162</span>        <span class="token comment" spellcheck="true">//生成十个不同的数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UUID uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str<span class="token operator">=</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理结果数</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">"字符："</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：76ea0ab6cfca4b9d8174c90a537e2758</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UUID&quot;&gt;&lt;a href=&quot;#UUID&quot; class=&quot;headerlink&quot; title=&quot;UUID&quot;&gt;&lt;/a&gt;UUID&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(01)</title>
    <link href="https://xrebirth.github.io/posts/dc8e0dd8.html"/>
    <id>https://xrebirth.github.io/posts/dc8e0dd8.html</id>
    <published>2021-12-09T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis学习笔记"><a href="#MyBatis学习笔记" class="headerlink" title="MyBatis学习笔记"></a>MyBatis学习笔记</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p>界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）  </p><ol><li>界面层（表示层，视图层）： 主要功能是接受用户的数据，显示请求的处理结果。使用 web 页面和<br> 用户交互，手机 app 也就是表示层的，用户在 app 中操作，业务逻辑在服务器端处理。  </li><li>业务逻辑层：接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。  </li><li>数据访问层： 与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交<br> 给业务层，同时将业务层处理的数据保存到数据库 。</li></ol><h3 id="三层交互顺序"><a href="#三层交互顺序" class="headerlink" title="三层交互顺序"></a>三层交互顺序</h3><p>用户—&gt; 界面层—&gt;业务逻辑层—&gt;数据访问层—&gt;DB 数据库  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2015%3A%E6%97%A5%2015%3A%E6%97%B6%2008%3A%E5%88%86%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.jpg" alt="三层架构顺序"></p><h3 id="三层架构优点"><a href="#三层架构优点" class="headerlink" title="三层架构优点"></a>三层架构优点</h3><ol><li>结构清晰、耦合度低, 各层分工明确。</li><li>可维护性高，可扩展性高。</li><li>有利于标准化。</li><li>开发人员可以只关注整个结构中的其中某一层的功能实现。</li><li>有利于各层逻辑的复用。</li></ol><h3 id="框架定义"><a href="#框架定义" class="headerlink" title="框架定义"></a>框架定义</h3><p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种认为，框架是可被应用开发者定制的应用骨架、模板。简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。 从另一个角度来说框架一个舞台，你在舞台上做表演。在框架基础上加入你要完成的功能。框架安全的，可复用的，不断升级的软件。</p><h3 id="框架解决的问题"><a href="#框架解决的问题" class="headerlink" title="框架解决的问题"></a>框架解决的问题</h3><p>框架要解决的最重要的一个问题是技术整合，在 JavaEE 的框架中，有着各种各样的技术，不同的应用，系统使用不同的技术解决问题。需要从 JavaEE 中选择不同的技术，而技术自身的复杂性，有导致更大的风险。企业在开发软件项目时，主要目的是解决业务问题。 即要求企业负责技术本身，又要求解决业务问题。这是大多数企业不能完成的。框架把相关的技术融合在一起，企业开发可以集中在业务领<br>域方面。另一个方面可以提供开发的效率。</p><h3 id="常用框架-JavaEE常用"><a href="#常用框架-JavaEE常用" class="headerlink" title="常用框架(JavaEE常用)"></a>常用框架(JavaEE常用)</h3><h4 id="MyBatis-框架："><a href="#MyBatis-框架：" class="headerlink" title="MyBatis 框架："></a>MyBatis 框架：</h4><p>MyBatis 是一个优秀的基于 java 的持久层框架，内部封装了 jdbc，开发者只需要关注 sql 语句本身，而不需要处理加载驱动、创建连接、创建 statement、关闭连接，资源等繁杂的过程。MyBatis 通过 xml 或注解两种方式将要执行的各种 sql 语句配置起来，并通过 java 对象和 sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java对象并返回。  </p><h4 id="Spring-框架："><a href="#Spring-框架：" class="headerlink" title="Spring 框架："></a>Spring 框架：</h4><p>Spring 框架为了解决软件开发的复杂性而创建的。 Spring 使用的是基本的 JavaBean 来完成以前非常复杂的企业级开发。 Spring 解决了业务对象，功能模块之间的耦合，不仅在 javase、web 中使用，大部分 Java 应用都可以从 Spring 中受益。Spring 是一个轻量级控制反转(LOC)和面向切面(AOP)的容器。  </p><h4 id="SpringMVC-框架："><a href="#SpringMVC-框架：" class="headerlink" title="SpringMVC 框架："></a>SpringMVC 框架：</h4><p>Spring MVC 属于 SpringFrameWork 3.0 版本加入的一个模块， 为 Spring 框架提供了构建 Web应用程序的能力。 现在可以 Spring 框架提供的 SpringMVC 模块实现 web 应用开发， 在 web 项目中可以无缝使用 Spring 和 Spring MVC 框架。  </p><h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件"></a>MyBatis配置文件</h2><h3 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h3><ol><li>xml 文件，需要在头部使用约束文件</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>根元素&lt;configuration&gt;<ul><li>根元素主要包括：<ul><li>定义别名  </li><li>数据源  </li><li>Mapper文件</li></ul></li></ul></li></ol><h3 id="lt-dataSource-gt-标签"><a href="#lt-dataSource-gt-标签" class="headerlink" title="<dataSource>标签"></a>&lt;dataSource&gt;标签</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Mybatis 中访问数据库，可以连接池技术，但它采用的是自己的连接池技术。在 Mybatis 的 mybatis.xml配置文件中，通过&lt;dataSource type=”pooled” &gt;来实现 Mybatis 中连接池的配置。</p><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2017%3A%E6%97%A5%2017%3A%E6%97%B6%2002%3A%E5%88%86dataSource%E7%B1%BB%E5%9E%8B.png" alt="dataSource类型"></p><p>从上图看出 Mybatis 将数据源分为三类：</p><table><thead><tr><th>数据源</th><th>说明</th></tr></thead><tbody><tr><td>UNPOOLED</td><td>不使用连接池的数据源</td></tr><tr><td>POOLED</td><td>使用连接池的数据源</td></tr><tr><td>JNDI</td><td>使用 JNDI 实现的数据源</td></tr></tbody></table><p>其中 UNPOOLED ,POOLED 数据源实现了 javax.sq.DataSource 接口， JNDI 和前面两个实现方式不同，了解就可以。  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2017%3A%E6%97%A5%2017%3A%E6%97%B6%2007%3A%E5%88%86DataSource%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="DataSource实现类"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>MyBatis 在初始化时，根据&lt;dataSource&gt;的 type 属性来创建相应类型的的数据源 DataSource，即：</p><ul><li>type=” POOLED”： MyBatis 会创建 PooledDataSource 实例。</li><li>type=” UNPOOLED” ： MyBatis 会创建 UnpooledDataSource 实例。</li><li>type=” JNDI”： MyBatis 会从 JNDI 服务上查找 DataSource 实例，然后返回使用。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--连接数据库的四个要素--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="提交事务机制"><a href="#提交事务机制" class="headerlink" title="提交事务机制"></a>提交事务机制</h4><p>Mybatis 框架是对 JDBC 的封装，所以 Mybatis 框架的事务控制方式，本身也是用 JDBC 的 Connection<br>对象的 commit()、rollback()方法来进行事务的提交与回滚。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上标签用于指定 MyBatis 所使用的事务管理器。 MyBatis 支持两种事务管理器类型： <strong>JDBC</strong> 与 <strong>MANAGED</strong>。  </p><ul><li><p>JDBC：使用 JDBC 的事务管理机制。即，通过 Connection 的 commit()方法提交，通过 rollback()方法回滚。但默认情况下， MyBatis 将自动提交功能关闭了，改为了手动提交。即程序中需要显式的对事务进行提交或回滚。从日志的输出信息中可以看到。  </p></li><li><p>MANAGED：由容器来管理事务的整个生命周期(如 Spring 容器)。  </p></li></ul><h4 id="自动-手动提交事务"><a href="#自动-手动提交事务" class="headerlink" title="自动/手动提交事务"></a>自动/手动提交事务</h4><p>可以使用factory的openSession()方法控制是否为开启事务。</p><ul><li>openSession(true)自动提交</li><li> openSession(false)手动提交</li></ul><h3 id="数据库属性配置文件"><a href="#数据库属性配置文件" class="headerlink" title="数据库属性配置文件"></a>数据库属性配置文件</h3><p>为了方便对数据库连接的管理， DB 连接四要素数据一般都是存放在一个专门的属性文件中的。 MyBatis主配置文件需要从这个属性文件中读取这些数据。</p><ol><li><p>在resources资源文件中创建xxxx.properties配置文件，并在配置文件中写入jdbc的相关属性。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/databaseName?charset=utf-8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">username</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在主配置文件中配置资源文件<br> 在根目录下创建标签&lt;properties&gt;标签。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在主配置相关的指定值。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="typeAliases-全限定别名"><a href="#typeAliases-全限定别名" class="headerlink" title="typeAliases(全限定别名)"></a>typeAliases(全限定别名)</h3><p>Mybatis 支持默认别名，我们也可以采用自定义别名方式来开发，主要使用在&lt;select resultType=”别名”&gt;mybatis.xml 主配置文件定义别名。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    定义单个类型的别名    type:类型的全限定名称    alias:自定义别名    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain.Student<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--    批量定义别名，扫描整个包下的类，别名为类名（首字母大写或小写都可以）    name:包名    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...其他包<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>映射(Mapper)文件可以使用别名表示</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudents<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from tableName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Mapper-映射器"><a href="#Mapper-映射器" class="headerlink" title="Mapper(映射器)"></a>Mapper(映射器)</h3><ol><li><p>使用相对于类路径的资源,从 classpath 路径查找文件(区分大小写)。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xrebirth/dao/MapperFileName.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定包下的所有Dao接口，注意：此种方法要求 Dao 接口名称和 mapper 映射文件名称相同，且在同一个目录中。  </p><pre class="line-numbers language-xml"><code class="language-xml">&lt;package name="com.xrebirth.dao"/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="入门MaBatis框架-idea-maven"><a href="#入门MaBatis框架-idea-maven" class="headerlink" title="入门MaBatis框架(idea+maven)"></a>入门MaBatis框架(idea+maven)</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>MYSQL</li><li>IDEA</li></ol><h3 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h3><ul><li>根据项目类型使用原型创建不同的项目(这里使用的是JavaSE项目演示)</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2015%3A%E6%97%A5%2015%3A%E6%97%B6%2030%3A%E5%88%861.%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.jpg" alt="创建maven项目"></p><h3 id="配置pom文件添加依赖"><a href="#配置pom文件添加依赖" class="headerlink" title="配置pom文件添加依赖"></a>配置pom文件添加依赖</h3><ul><li>添加jdbc依赖</li><li>添加MyBatis框架依赖</li><li>不过滤main包中的配置文件</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2015%3A%E6%97%A5%2015%3A%E6%97%B6%2035%3A%E5%88%862.%E9%85%8D%E7%BD%AEpom%E6%96%87%E4%BB%B6.jpg" alt="配置maven中pom文件"></p><h3 id="创建entity-实体类包-和dao-数据访问包"><a href="#创建entity-实体类包-和dao-数据访问包" class="headerlink" title="创建entity(实体类包)和dao(数据访问包)"></a>创建entity(实体类包)和dao(数据访问包)</h3><ul><li>在entity中创建Student实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Integer id<span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在dao包中创建StudentDao接口"><a href="#在dao包中创建StudentDao接口" class="headerlink" title="在dao包中创建StudentDao接口"></a>在dao包中创建StudentDao接口</h3><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在dao包中创建创建StudentDao-xmlMapper映射文件-配置文件名称要与dao接口名称一样"><a href="#在dao包中创建创建StudentDao-xmlMapper映射文件-配置文件名称要与dao接口名称一样" class="headerlink" title="在dao包中创建创建StudentDao.xmlMapper映射文件(配置文件名称要与dao接口名称一样)"></a>在dao包中创建创建StudentDao.xmlMapper映射文件(配置文件名称要与dao接口名称一样)</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--    namespace：要与dao接口中的名称一样--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.dao.StudentDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        resultType：要与所要接收对象的实体类对象一致    --></span>    <span class="token comment" spellcheck="true">&lt;!--查询语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectDemo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from student where id = #{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--插入语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InsertDate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into student (name, age, email) values (#{name},#{age},#{email});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在resources资源文件中创建MyBatis主配置文件-添加jdbc相关配置"><a href="#在resources资源文件中创建MyBatis主配置文件-添加jdbc相关配置" class="headerlink" title="在resources资源文件中创建MyBatis主配置文件(添加jdbc相关配置)"></a>在resources资源文件中创建MyBatis主配置文件(添加jdbc相关配置)</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置mybatis环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--id：数据源名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--type：配置事务类型(使用jdbc事务)使用Connection的提交和回滚--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--                dataSource：创建数据库Connection对象                type：POOLED 使用数据库连接池            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--连接数据库四要素--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/exercise_02<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>963936892<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--告诉mybatis要执行sql语句的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/xrebirth/dao/DemoMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建utils包创建MySqlUtil类"><a href="#创建utils包创建MySqlUtil类" class="headerlink" title="创建utils包创建MySqlUtil类"></a>创建utils包创建MySqlUtil类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory factory <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        String config <span class="token operator">=</span> <span class="token string">"mybatis.xml"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建SqlSessionFactory对象，使用</span>            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取sqlSession对象     * @return SqlSession对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMybatis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.【重要】从SqlSessionFactory中获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.【重要】指定要执行的sql语句标识。sql映射文件中的namespace+"."+标签的id值</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao"</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token string">"selectDemo"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.通过sqlId找到语句，执行sql语句</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.输出结果</span>        studentsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭SqlSesson对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------查询结束----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.【重要】从SqlSessionFactory中获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.【重要】指定要执行的sql语句标识。sql映射文件中的namespace+"."+标签的id值</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao"</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token string">"InsertDate"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建要插入的学生对象数据</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token string">"曹洋"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"v.fysr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.通过sqlId找到语句，执行sql语句</span>        <span class="token keyword">int</span> nums <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.判断结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功,成功插入"</span><span class="token operator">+</span>nums<span class="token operator">+</span><span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.mybatis默认不是自动提交事务，所以需要在insert、update、delete后手动提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.关闭sqlSession对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------插入结束----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyBatis使用传统Dao开发方式"><a href="#MyBatis使用传统Dao开发方式" class="headerlink" title="MyBatis使用传统Dao开发方式"></a>MyBatis使用传统Dao开发方式</h2><ul><li>使用 Dao 的实现类,操作数据库  </li></ul><h3 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询操作</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入操作</span>    <span class="token keyword">int</span> <span class="token function">insertStudents</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建Dao接口实现类"><a href="#创建Dao接口实现类" class="headerlink" title="创建Dao接口实现类"></a>创建Dao接口实现类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取sqlId</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao.selectStudents"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭SqlSession对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果集</span>        <span class="token keyword">return</span> studentsList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertStudents</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取sqlId</span>        String sqlId <span class="token operator">=</span> <span class="token string">"com.xrebirth.dao.StudentDao.insertStudents"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建测试类-1"><a href="#创建测试类-1" class="headerlink" title="创建测试类"></a>创建测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMyBatis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDao studentDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        studentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentDao studentDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"孔刚"</span><span class="token punctuation">,</span> <span class="token string">"k.juzevzb@jlefmiipvu.tv"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">insertStudents</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"插入成功,共插入:"</span> <span class="token operator">+</span> result <span class="token operator">:</span> <span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态代理-总结"><a href="#动态代理-总结" class="headerlink" title="动态代理(总结)"></a>动态代理(总结)</h3><p>MyBatis动态代理：<br>    List&lt;Student&gt; studentList = dao.selectStudents();</p><ol><li>dao对象类型是StudentDao，全限定名称是：com.xrebirth.dao.StudentDao（全限定名称和namespace是一样的）</li><li>方法名：selectStudents和namespace是一样的</li><li>通过dao中方法返回值也可以确定MyBatis要调用的SqlSession的方法<br> 如果返回值是List则调用的是SqlSession.selectList()方法<br> 如果返回值是int或者不是List、则看mapper文件中的标签是&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;就会调用SqlSession中的insert、update、dalete相关的方法</li><li>总结：通过以上第一点和第二点可以定位到接口和方法名，通过第三点可以推测出SQL执行的相应命令，以上三个条件都具备就可以使用MyBatis动态代理进行相关方法的增强。</li></ol><h2 id="Dao动态代理实现CURD"><a href="#Dao动态代理实现CURD" class="headerlink" title="Dao动态代理实现CURD"></a>Dao动态代理实现CURD</h2><p>实现接口中的方法</p><h3 id="传统-Dao-开发方式的分析"><a href="#传统-Dao-开发方式的分析" class="headerlink" title="传统 Dao 开发方式的分析"></a>传统 Dao 开发方式的分析</h3><p>在前面例子中自定义 Dao 接口实现类时发现一个问题： Dao 的实现类其实并没有干什么实质性的工作，它仅仅就是通过 SqlSession 的相关 API 定位到映射文件 mapper 中相应 id 的 SQL 语句，真正对 DB 进行操作的工作其实是由框架通过 mapper 中的 SQL 完成的。<br>所以， MyBatis 框架就抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对DB 进行操作。这种对 Dao 的实现方式称为 Mapper 的动态代理方式。Mapper 动态代理方式无需程序员实现 Dao 接口。接口是由 MyBatis 结合映射文件自动生成的动态代<br>理实现的。</p><h3 id="使用getMapper获取代理对象"><a href="#使用getMapper获取代理对象" class="headerlink" title="使用getMapper获取代理对象"></a>使用getMapper获取代理对象</h3><p>只需调用 SqlSession 的 getMapper()方法，即可获取指定接口的实现类对象。该方法的参数为指定 Dao接口类的 class 值。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testStudent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取SqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过动态代理获取StudentDao中的对象</span>        StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用selectStudent()方法</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用insertStudent()方法</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"于敏"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">"w.yegdxzltlp@dmimevk.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用updateStudent()方法</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"彭刚"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">updateStudent</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过dao对象调用deleteStudent()方法</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result3 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">deleteStudent</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功插入："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"条"</span> <span class="token operator">:</span> <span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功修改："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"条"</span> <span class="token operator">:</span> <span class="token string">"修改失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"成功删除："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"条"</span> <span class="token operator">:</span> <span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历输出</span>        studentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭sqlSession对象</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：Mapper配置文件中的sql语句id要与接口方法名称相同。</p><h2 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h2><h3 id="typeAlias"><a href="#typeAlias" class="headerlink" title="typeAlias"></a>typeAlias</h3><p>类型别名是为Java类型设置一个短的名字，可以方便我们引用某个类。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--定义别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--第一种方式：        可以指定一个类型一个自定义别名        type：自定义类型的全限定名称        alias：别名(短小，容易记忆)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.StudentStu<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>以上两种方式是在主配置文件中定义别名。</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--第二种方式：        &lt;package>        name是包名，这个包中的所有类的类名就是别名(类名不区分大小写)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><p>在该类创建时，使用@Alias注解为其指定一个别名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Alias定义别名</span><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentStu</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>值得注意的是，MyBatis已经为许多常见的Java类型内建了相应的类型别名。它们都是大小写不敏感的，我们在起别名的时候千万不要占用已有的别名。</p><h4 id="映射别名"><a href="#映射别名" class="headerlink" title="映射别名"></a>映射别名</h4><table><thead><tr><th align="center">别名</th><th align="center">映射类型</th></tr></thead><tbody><tr><td align="center">_byte</td><td align="center">byte</td></tr><tr><td align="center">_long</td><td align="center">long</td></tr><tr><td align="center">_short</td><td align="center">short</td></tr><tr><td align="center">_int</td><td align="center">int</td></tr><tr><td align="center">_integer</td><td align="center">int</td></tr><tr><td align="center">_double</td><td align="center">double</td></tr><tr><td align="center">_float</td><td align="center">float</td></tr><tr><td align="center">_boolean</td><td align="center">boolean</td></tr><tr><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">integer</td><td align="center">Integer</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">date</td><td align="center">Date</td></tr><tr><td align="center">decimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">bigdecimal</td><td align="center">BigDecimal</td></tr><tr><td align="center">map</td><td align="center">Map/HashMap</td></tr></tbody></table><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h3><p>接口中方法参数的类型， 类型的完全限定名或别名。这个属性是可选的，因为 MyBatis可以推断出具体传入语句的参数，默认值为未设置（ unset）。 接口中方法的参数从 java 代码传入到mapper 文件的sql语句。里面的参数类型可以写全限定名称也可以写MyBatis别名类型，例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteStudent<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from student where id=#{studentId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等同于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteStudent<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from student where id=#{studentId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MyBatis传递参数"><a href="#MyBatis传递参数" class="headerlink" title="MyBatis传递参数"></a>MyBatis传递参数</h3><p>Dao 接口中方法的参数只有一个简单类型（java 基本类型和 String），占位符 #{ 任意字符 }，和方法的参数名无关。  </p><h4 id="单个参数传递"><a href="#单个参数传递" class="headerlink" title="单个参数传递"></a>单个参数传递</h4><h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单个参数传递</span>Student <span class="token function">selectStudentId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--单个参数传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--#{studentId} , studentId 是自定义的变量名称，和方法参数名无关--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 单个参数传递*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id为1的学生对象为："</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个参数传递-使用-Param"><a href="#多个参数传递-使用-Param" class="headerlink" title="多个参数传递-使用@Param"></a>多个参数传递-使用@Param</h4><p>当 Dao 接口方法多个参数，需要通过名称使用参数。 在方法形参前面加入@Param(“自定义参数名”)，mapper 文件使用#{自定义参数名}。 </p><h5 id="例如：-1"><a href="#例如：-1" class="headerlink" title="例如："></a>例如：</h5><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数传递：命名参数在形参定义的前面加入@Param("自定义参数名称")</span>Student <span class="token function">selectMultiParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--多个参数传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiParam<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name} and age = #{age};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 多个参数传递*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiParam</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三，年龄20的查询为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三，年龄20的查询结果为："</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个参数传递-使用对象"><a href="#多个参数传递-使用对象" class="headerlink" title="多个参数传递-使用对象"></a>多个参数传递-使用对象</h4><h5 id="使用规范版开发"><a href="#使用规范版开发" class="headerlink" title="使用规范版开发"></a>使用规范版开发</h5><h6 id="例如：-2"><a href="#例如：-2" class="headerlink" title="例如："></a>例如：</h6><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-使用对象传参</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiObject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        多个参数的传递-使用java对象的属性值,作为参数实际值        使用对象语法：#{对象属性名,javaType=类型名称(全限定名称),jdbcType=数据类型}        javaType：指java中的属性数据类型        jdbcType：指数据库中的数据类型        例如：#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}        以上方法在实际操作中很少用到，实际开发中会用简化版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiObject<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name,javaType=java.lang.String,jdbcType=VARCHAR} or age = #{age,javaType=java.lang.Integer,jdbcType=INTEGER}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-Java"><code class="language-Java">/***  多个参数的传递-使用对象传参*/@Testpublic void testSelectMultiObject() {    SqlSession sqlSession = getSqlSession();    StudentDao dao = sqlSession.getMapper(StudentDao.class);    Student stu = new Student(null, "张三", 11, null);    List<Student> studentsList = dao.selectMultiObject(stu);    studentsList.forEach((stuItem)->System.out.println("姓名：张三或年龄11的查询结果为："+stuItem));    sqlSession.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用简化版开发"><a href="#使用简化版开发" class="headerlink" title="使用简化版开发"></a>使用简化版开发</h5><h6 id="例如：-3"><a href="#例如：-3" class="headerlink" title="例如："></a>例如：</h6><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-使用对象传参</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiObject</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    多个参数的传递-使用java对象的属性值,作为参数实际值(简化版)    MyBatis会通过反射机制获取到响应的属性的属性类型，所以不需要写对象类型和jdbc对象类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiObject<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name} or age = #{age};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***  多个参数的传递-使用对象传参*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiObject</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stuItem<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三或年龄11的查询结果为："</span><span class="token operator">+</span>stuItem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个参数传递-按位置(了解)</p><p>参数位置从 0 开始， 引用参数语法 #{ param 位置 } ， 第一个参数是#{param1}, 第二个是#{param2}(param起始位置为1不是0)<br>注意： mybatis-3.3 版本和之前的版本使用#{0},#{1}方式， 从 mybatis3.4 开始使用#{param1}方式。  </p><h4 id="例如：-4"><a href="#例如：-4" class="headerlink" title="例如："></a>例如：</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-按位置</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiPosition</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    多个参数的传递-按位置    注意： mybatis-3.3 版本和之前的版本使用#{0},#{1}方式， 从 mybatis3.4 开始使用#{param1}方式。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiPosition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{param1} or age = #{param2}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 多个参数的传递-按位置*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiPosition</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stu3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三或年龄33的查询结果为："</span><span class="token operator">+</span>stu3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个参数传递-Map传递-了解"><a href="#多个参数传递-Map传递-了解" class="headerlink" title="多个参数传递-Map传递(了解)"></a>多个参数传递-Map传递(了解)</h3><p>Map 集合可以存储多个值， 使用Map向 mapper 文件一次传入多个参数。Map 集合使用 String的 key，Object 类型的值存储参数。 mapper 文件使用 # { key } 引用参数值。  </p><h4 id="例如：-5"><a href="#例如：-5" class="headerlink" title="例如："></a>例如：</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//多个参数的传递-Map传递</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectMultiMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    多个参数的传递-Map传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMultiMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select  * from student where name = #{name} or age = #{age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * 多个参数的传递-Map传递*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMultiMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList3 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentsList3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名：张三或年龄30的查询结果为："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和"><a href="#和" class="headerlink" title="#和$"></a>#和$</h3><h4 id="占位符"><a href="#占位符" class="headerlink" title="#占位符"></a>#占位符</h4><ul><li>告诉 mybatis 使用实际的参数值代替。并使用 PrepareStatement 对象执行 sql 语句, #{…}代替sql 语句的“?”。 这样做更安全，更迅速，通常也是首选做法。</li></ul><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--#占位符--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转为MyBatis执行的是：</p><pre class="line-numbers language-java"><code class="language-java">String sql<span class="token operator">=</span>”select <span class="token operator">*</span> from student where id <span class="token operator">=</span> <span class="token operator">?</span>”<span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>where id=?就是where id=#{id}<br>ps.setInt(1,2) , 2会替换掉#{id} </p><h4 id="字符串"><a href="#字符串" class="headerlink" title="$字符串"></a>$字符串</h4><ul><li>告诉 mybatis 使用$包含的“字符串”替换所在位置。使用 Statement 把 sql 语句和${}的内容连接起来。主要用在替换表名，列名，不同列排序等操作。   </li></ul><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--$占位符--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = ${id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换为MyBatis执行的是：</p><pre class="line-numbers language-java"><code class="language-java">String sql<span class="token operator">=</span><span class="token string">"select id,name, email,age from student where id="</span> <span class="token operator">+</span> <span class="token string">"2"</span><span class="token punctuation">;</span>使用的Statement对象执行sql，效率比PreparedStatement低。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h5><p>Statement对象使用的是字符串连接进行sql语句执行。</p><h3 id="与-区别："><a href="#与-区别：" class="headerlink" title="#与$区别："></a>#与$区别：</h3><pre><code>1. #使用 ？在sql语句中做站位的， 使用PreparedStatement执行sql，效率高。2. #能够避免sql注入，更安全。3. $不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低。4. $有sql注入的风险，缺乏安全性。5. $可以替换表名或者列名。</code></pre><h2 id="封装MyBatis输出结果"><a href="#封装MyBatis输出结果" class="headerlink" title="封装MyBatis输出结果"></a>封装MyBatis输出结果</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>执行 sql 得到 ResultSet 转换的类型，使用类型的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。 resultType 和 resultMap，不能同时使用。  </p><p>Mapper：</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%2017%3A%E6%97%A5%2011%3A%E6%97%B6%2021%3A%E5%88%86MyBatis%E7%9A%84resultType%E7%BB%93%E6%9E%9C%E9%9B%86.jpg" alt="MyBatis的resultType结果集"></p><h4 id="简单类型传递"><a href="#简单类型传递" class="headerlink" title="简单类型传递"></a>简单类型传递</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递简单类型</span><span class="token keyword">int</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--传递简单类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select count(*) from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 传递简单类型*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> countNum <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单类型查询结果"</span> <span class="token operator">+</span> countNum <span class="token operator">+</span> <span class="token string">"条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递对象类型</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--传递对象类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectStudents<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 传递对象类型*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentsList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentsList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象类型查询结果："</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>框架处理步骤：</p><ol><li>使用构造方法创建该对象</li><li>调用set + 列名的对应的方法，将查询到的结果赋值给该对象</li><li>返回指定的返回的集合类型</li></ol><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>SQL的查询结果作为 Map 的 key 和 value。推荐使用 Map&lt;Object,Object&gt;。<br>注意： Map 作为接口返回值，SQL语句的查询结果最多只能有一条记录， 大于一条记录会产生错误。  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传递Map类型</span>Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">selectMap</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--传递Map类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.HashMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 传递Map类型*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> studentMap <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Map类型查询结果"</span><span class="token operator">+</span>studentMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>resultMap可以对MySQL和entity实体类中的字段名不相同进行手动对接。</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//resultMap</span>List<span class="token operator">&lt;</span>StudentStu<span class="token operator">></span> <span class="token function">selectCustomStuStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    创建resultMap    id：自定义唯一名称，在&lt;select>使用    type：期望转为的java对象的全限定名称或别名    column：数据库中的字段名    property：实体类中对应的字段名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCustomStuStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.StudentStu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主键字段使用id标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--非主键字段使用result标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuAge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stuEmail<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCustomStuStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectCustomStuStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name = #{name} and age = #{age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** resultMap*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectCustomStuStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>StudentStu<span class="token operator">></span> studentStus <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectCustomStuStudent</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentStus<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resultMap实体类查询结果："</span><span class="token operator">+</span>studentStus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h2><p>模糊查询的实现有两种方式， 一是 java 代码中给查询数据加上“%” ; 二是在 Mapper 文件 sql 语句的条件位置加上”%”</p><h3 id="查询语句加"><a href="#查询语句加" class="headerlink" title="查询语句加%"></a>查询语句加%</h3><p>例如：</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//selectLikeFirst</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectLikeFirst</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--like模糊查询    1.查询语句加%--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLikeFirst<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name like #{name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** likeFirst查询方式*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectLikeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectLike1</span><span class="token punctuation">(</span><span class="token string">"%张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模糊查询："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mapper文件加"><a href="#Mapper文件加" class="headerlink" title="Mapper文件加%"></a>Mapper文件加%</h3><p>例如：</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//selectLikeSecond</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectLikeSecond</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--like模糊查询    2.sql语句加%--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectLikeSecond<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where name like '%' #{name} '%'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** likeSecond查询方式*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectLikeSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectLikeSecond</span><span class="token punctuation">(</span><span class="token string">"三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"模糊查询Second："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><p>动态 SQL，通过 MyBatis 提供的各种标签对条件作出判断以实现动态拼接 SQL 语句。 这里的条件判断使用的表达式为 OGNL 表达式。 常用的动态 SQL 标签有<if>、 <where>、 <choose>、 <foreach>等。MyBatis 的动态 SQL 语句，与 JSTL 中的语句非常相似。动态 SQL，主要用于解决查询条件不确定的情况：在程序运行期间，根据用户提交的查询条件进行查询。提交的查询条件不同，执行的 SQL 语句不同。若将每种可能的情况均逐一列出，对所有条件进行排列组合，将会出现大量的 SQL 语句。此时，可使用动态 SQL 来解决这样的问题。</foreach></choose></where></if></p><p><strong>注意：</strong>在 mapper 的动态 SQL 中若出现大于号（&gt;）、小于号（&lt;）、大于等于号（&gt;=），小于等于号（&lt;=）等符号，最好将其转换为实体符号。否则， XML 可能会出现解析出错问题。  特别是对于小于号（&lt;），在 XML 中是绝不能出现的。否则解析 mapper 文件会出错。</p><p>实体符号表 </p><table><thead><tr><th>符号</th><th>实体符号</th><th>说明</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp;lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>&amp;gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>&amp;gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>&amp;lt;=</td><td>小于等于</td></tr></tbody></table><h3 id="动态-SQL-—-lt-if-gt"><a href="#动态-SQL-—-lt-if-gt" class="headerlink" title="动态 SQL —<if>"></a>动态 SQL —&lt;if&gt;</h3><p>对于该标签的执行，当 test 的值为 true 时，会将其包含的 SQL 片断拼接到其所在的 SQL 语句中。</p><p>语法： &lt;if test=”条件”&gt; sql语句的部分 &lt;/if&gt;  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态sql-if</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectIf</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--动态sql-if--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id > 0    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name!<span class="token punctuation">=</span>null and name !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and name = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        or age > #{age}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 动态sql-if*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"if:"</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL-—-lt-where-gt"><a href="#动态-SQL-—-lt-where-gt" class="headerlink" title="动态 SQL —<where>"></a>动态 SQL —&lt;where&gt;</h3><p>&lt;if/&gt;标签的中存在一个比较麻烦的地方：需要在 where 后手工添加 1=1 的子句。因为，若 where 后的所有&lt;if/&gt;条件均为 false，而 where 后若又没有 1=1 子句，则 SQL 中就会只剩下一个空的 where， SQL出错。所以，在 where 后，需要添加永为真子句 1=1，以防止这种情况的发生。但当数据量很大时，会严重影响查询效率。使用&lt;where/&gt;标签， 在有查询条件时， 可以自动添加上 where 子句；没有查询条件时，不会添加where 子句。需要注意的是，第一个&lt;if/&gt;标签中的 SQL 片断，可以不包含 and。不过，写上 and 也不错，系统会将多出的 and 去掉。但其它&lt;if/&gt;中 SQL 片断的 and，必须要求写上。否则 SQL 语句将拼接出错。</p><p>语法： &lt;where&gt; 其他动态 sql &lt;/where&gt;  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态sql<span class="token operator">-</span>where<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectWhere"</span> resultType<span class="token operator">=</span><span class="token string">"com.xrebirth.entity.Student"</span><span class="token operator">></span>    select <span class="token operator">*</span> from student    <span class="token operator">&lt;</span>where<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name != null and name != ''"</span><span class="token operator">></span>            name <span class="token operator">=</span> #<span class="token punctuation">{</span>name<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"age > 0"</span><span class="token operator">></span>                or age <span class="token operator">></span> #<span class="token punctuation">{</span>age<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml">//动态sql-whereList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">></span></span> selectWhere(Student student);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 动态sql-where*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">testSelectWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//student.setName("张三");</span>    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectWhere</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"where:"</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL-—-lt-foreach-gt"><a href="#动态-SQL-—-lt-foreach-gt" class="headerlink" title="动态 SQL —<foreach>"></a>动态 SQL —&lt;foreach&gt;</h3><p>&lt;foreach/&gt;标签用于实现对于数组与集合的遍历。对其使用，需要注意：  </p><ul><li>collection 表示要遍历的集合类型, list ， array 等。</li><li>open、 close、 separator 为对遍历内容的 SQL 拼接。</li></ul><p>语法：</p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态sql-foreachOne</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectForeachOne</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--动态sql-foreachOne--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectForeachOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myid<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{myid.id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 动态sql-foreachOne*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testForEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    Student stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span><span class="token punctuation">;</span>    studentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectForeachOne</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu3 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foreachOne:"</span><span class="token operator">+</span>stu3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL—代码片段"><a href="#动态-SQL—代码片段" class="headerlink" title="动态 SQL—代码片段"></a>动态 SQL—代码片段</h3><p>&lt;sql/&gt;标签用于定义 SQL 片断，以便其它 SQL 标签复用。而其它标签使用该 SQL 片断，需要使用&lt;include/&gt;子标签。该&lt;sql/&gt;标签可以定义 SQL 语句中的任何部分，所以&lt;include/&gt;子标签可以放在动态 SQL的任何位置。  </p><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码片段-selectSql01</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mapper：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--代码复用-先定义后使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentSQL01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectSql<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xrebirth.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引用代码片段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentSQL01<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 代码片段*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码片段："</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展-PageHelper-分页数据处理"><a href="#扩展-PageHelper-分页数据处理" class="headerlink" title="扩展-PageHelper(分页数据处理)"></a>扩展-PageHelper(分页数据处理)</h2><p>通过PageHelper插件获取数据库数据并自动处理分页数据。项目地址：<a href="https://github.com/pagehelper/Mybatis-PageHelper">https://github.com/pagehelper/Mybatis-PageHelper</a></p><ol><li>Maven坐标</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在&lt;environments&gt;之前加入</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>PageHelper 对象<br> 查询语句之前调用 PageHelper.startPage 静态方法。除了 PageHelper.startPage 方法外，还提供了类似用法的 PageHelper.offsetPage 方法，在你需要进行分页的 MyBatis 查询方法前调用 PageHelper.startPage 静态方法即可，紧跟在这个方法后的第一个 MyBatis 查询方法会被进行分页。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** pagehelperLimit*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPagehelperLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StudentDao dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取第二页到第三页的内容</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stu<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pagehelperLimit:"</span><span class="token operator">+</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>关于sttingszh中的相关属性设置。</p><pre><code>&lt;!-- settings是 MyBatis 中全局的调整设置，它们会改变 MyBatis 的运行时行为,应谨慎设置 --&gt;  &lt;settings&gt;  &lt;!-- 该配置影响的所有映射器中配置的缓存的全局开关。默认值true --&gt;  &lt;setting name="cacheEnabled" value="true"/&gt;  &lt;!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值false  --&gt;  &lt;setting name="lazyLoadingEnabled" value="true"/&gt;  &lt;!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true --&gt;  &lt;setting name="multipleResultSetsEnabled" value="true"/&gt;  &lt;!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值true --&gt;  &lt;setting name="useColumnLabel" value="true"/&gt;  &lt;!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 默认值false  --&gt;  &lt;setting name="useGeneratedKeys" value="false"/&gt;  &lt;!--  指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 --&gt;   &lt;!-- 默认值PARTIAL --&gt;  &lt;setting name="autoMappingBehavior" value="PARTIAL"/&gt;  &lt;setting name="autoMappingUnknownColumnBehavior" value="WARNING"/&gt;  &lt;!--  配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。默认SIMPLE  --&gt;  &lt;setting name="defaultExecutorType" value="SIMPLE"/&gt;  &lt;!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 --&gt;  &lt;setting name="defaultStatementTimeout" value="25"/&gt;  &lt;setting name="defaultFetchSize" value="100"/&gt;  &lt;!-- 允许在嵌套语句中使用分页（RowBounds）默认值False --&gt;  &lt;setting name="safeRowBoundsEnabled" value="false"/&gt;  &lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。  默认false --&gt;  &lt;setting name="mapUnderscoreToCamelCase" value="false"/&gt;  &lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。  默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。  若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  --&gt;  &lt;setting name="localCacheScope" value="SESSION"/&gt;  &lt;!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。  --&gt;  &lt;setting name="jdbcTypeForNull" value="OTHER"/&gt;  &lt;!--   指定哪个对象的方法触发一次延迟加载。  --&gt;  &lt;setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/&gt;  &lt;/settings&gt;  </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis学习笔记&quot;&gt;&lt;a href=&quot;#MyBatis学习笔记&quot; class=&quot;headerlink&quot; title=&quot;MyBatis学习笔记&quot;&gt;&lt;/a&gt;MyBatis学习笔记&lt;/h1&gt;&lt;h2 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="MyBatis" scheme="https://xrebirth.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析</title>
    <link href="https://xrebirth.github.io/posts/3512c832.html"/>
    <id>https://xrebirth.github.io/posts/3512c832.html</id>
    <published>2021-12-08T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析"><a href="#问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析" class="headerlink" title="问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析"></a>问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2050%3A%E5%88%86%E4%BD%BF%E7%94%A8Maven%E5%8E%9F%E5%9E%8B%E5%88%9B%E5%BB%BAJavaWeb%E4%B8%ADJsp%E4%B8%AD%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E8%A7%A3%E6%9E%90.jpg" alt="使用Maven原型创建JavaWeb中Jsp中的EL表达式不解析"></p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>Maven使用原型创建的web.xml文件默认为2.3版本，此版本默认禁用EL表达式</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Archetype Created Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h3><p>删除原有的web.xml重新生成新的web.xml版本2.3版本以上的版本。</p><ol><li>打开项目结构中的Facet删除原有的web.xml文件。</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2053%3A%E5%88%86%E5%88%A0%E9%99%A4%E5%8E%9F%E6%9C%89%E7%9A%84xml%E6%96%87%E4%BB%B6.jpg" alt="打开项目结构中的Facet删除原有的web.xml文件"></p><ol start="2"><li>确认删除</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2054%3A%E5%88%86%E7%A1%AE%E8%AE%A4%E5%88%A0%E9%99%A4web.xml%E6%96%87%E4%BB%B6.jpg" alt="确认删除"></p><ol start="3"><li>重新生成web.xml</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2057%3A%E5%88%86%E6%B7%BB%E5%8A%A0web.xml%E6%96%87%E4%BB%B6.jpg" alt="添加web.xml文件"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2009%3A%E6%97%B6%2058%3A%E5%88%86%E7%A1%AE%E8%AE%A4%E6%B7%BB%E5%8A%A0web.xml%E6%96%87%E4%BB%B6.jpg" alt="确认添加web.xml文件"></p><h3 id="解决方法2："><a href="#解决方法2：" class="headerlink" title="解决方法2："></a>解决方法2：</h3><p>在JSP中添加isELIgnored=”false”，不忽略EL表达式的解析。</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %><html><head>  <title>Title</title></head><body></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="永久解决办法3具体步骤如下："><a href="#永久解决办法3具体步骤如下：" class="headerlink" title="永久解决办法3具体步骤如下："></a>永久解决办法3具体步骤如下：</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2001%3A%E5%88%861745551-20190725191758788-1324700232.png"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2001%3A%E5%88%861745551-20190725191846707-1566801207.png"></p><p>进入“1.3”文件夹，找到jar包，如下图</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2002%3A%E5%88%861745551-20190725191943931-1726254123.png"></p><h3 id="用解压软件打开文件-记住不是解压。"><a href="#用解压软件打开文件-记住不是解压。" class="headerlink" title="用解压软件打开文件,记住不是解压。"></a>用解压软件打开文件,记住不是解压。</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2003%3A%E5%88%861745551-20190725192135089-1717773106.png"></p><h3 id="按下图这个路径依次打开，找到以下Web-xml文件"><a href="#按下图这个路径依次打开，找到以下Web-xml文件" class="headerlink" title="按下图这个路径依次打开，找到以下Web.xml文件"></a>按下图这个路径依次打开，找到以下Web.xml文件</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%209%3A%E6%97%A5%2010%3A%E6%97%B6%2004%3A%E5%88%861745551-20190725192211852-17025032.png"></p><p>直接打开web.xml，修改头文件，保存就可以了(注意：是在解压软件打开的的界面直接打开并修改Web.xml，而不是解压成文件夹之后修改，也就是要保证Jar包本来的结构不变)。</p><p>下面这个就是4.0的web.xml头文件，直接复制就可以。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析&quot;&gt;&lt;a href=&quot;#问题：使用Maven原型创建JavaWeb项目Jsp中的EL表达式不解析&quot; class=&quot;headerlink&quot; title=&quot;问题：使用Maven原型创建JavaWe</summary>
      
    
    
    
    <category term="Question" scheme="https://xrebirth.github.io/categories/Question/"/>
    
    
    <category term="Java" scheme="https://xrebirth.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JSON常用工具包(06)</title>
    <link href="https://xrebirth.github.io/posts/883ba8d5.html"/>
    <id>https://xrebirth.github.io/posts/883ba8d5.html</id>
    <published>2021-12-04T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON常用工具包"><a href="#JSON常用工具包" class="headerlink" title="JSON常用工具包"></a>JSON常用工具包</h1><blockquote><p>JSON工具包在Web开发还是服务器开发中是相当常见的数据传输格式，一般情况我们对于JSON解析构造的性能并不需要过于关心，除非是在性能要求比较高的系统。 </p></blockquote><h2 id="常用JSON类库"><a href="#常用JSON类库" class="headerlink" title="常用JSON类库"></a>常用JSON类库</h2><ol><li>Gson<br> Gson是目前功能最全的Json解析神器，Gson当初是为因应Google公司内部需求而由Google自行研发而来，但自从在2008年五月公开发布第一版后已被许多公司或用户应用。Gson的应用主要为toJson与fromJson两个转换函数，无依赖，不需要例外额外的jar，能够直接跑在JDK上。而在使用这种对象转换之前需先创建好对象的类型以及其成员才能成功的将JSON字符串成功转换成相对应的对象。类里面只要有get和set方法，Gson完全可以将复杂类型的json到bean或bean到json的转换，是JSON解析的神器。项目地址：<a href="https://github.com/google/gson">https://github.com/google/gson</a></li><li>FastJson<br> Fastjson是一个Java语言编写的高性能的JSON处理器,由阿里巴巴公司开发。无依赖，不需要例外额外的jar，能够直接跑在JDK上。FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要制定引用。FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库。项目地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></li><li>Jackson<br> 相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。而且Jackson社区相对比较活跃，更新速度也比较快。Jackson对于复杂类型的json转换bean会出现问题，一些集合Map，List的转换出现问题。Jackson对于复杂类型的bean转换Json，转换的json格式不是标准的Json格式。项目地址：<a href="https://github.com/FasterXML/jackson">https://github.com/FasterXML/jackson</a></li><li>Json-lib<br> json-lib最开始的也是应用最广泛的json解析工具，json-lib 不好的地方确实是依赖于很多第三方包，包括commons-beanutils.jar，commons-collections-3.2.jar，commons-lang-2.6.jar，commons-logging-1.1.1.jar，ezmorph-1.0.6.jar，对于复杂类型的转换，json-lib对于json转换成bean还有缺陷，比如一个类里面会出现另一个类的list或者map集合，json-lib从json到bean的转换就会出现问题。json-lib在功能和性能上面都不能满足现在互联网化的需求。项目地址：<a href="http://json-lib.sourceforge.net/index.html">http://json-lib.sourceforge.net/index.html</a></li></ol><h3 id="Jackson使用"><a href="#Jackson使用" class="headerlink" title="Jackson使用"></a>Jackson使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Student    </span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> Integer sid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对象转换成JSON对象</span>Student stuobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectMapper om <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String result <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>stuobj<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        {"name":"张三","sid":1}    */</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// List集合转换成JSON数组</span>ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> stuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student student <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    stuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String strStuList <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>stuList<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStuList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        [            {"name":"小明0","sid":0},            {"name":"小明1","sid":1},            {"name":"小明2","sid":2},            {"name":"小明3","sid":3}        ]    */</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>选择一个合适的JSON库要从多个方面进行考虑：</p><ul><li>字符串解析成JavaBean性能</li><li>JavaBean构造JSON性能</li><li>集合构造JSON性能</li><li>易用性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON常用工具包&quot;&gt;&lt;a href=&quot;#JSON常用工具包&quot; class=&quot;headerlink&quot; title=&quot;JSON常用工具包&quot;&gt;&lt;/a&gt;JSON常用工具包&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JSON工具包在Web开发还是服务器开发中是相当常见的数据</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="JavaEE" scheme="https://xrebirth.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>Ajax笔记(03)</title>
    <link href="https://xrebirth.github.io/posts/467992f5.html"/>
    <id>https://xrebirth.github.io/posts/467992f5.html</id>
    <published>2021-12-04T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax学习笔记03"><a href="#Ajax学习笔记03" class="headerlink" title="Ajax学习笔记03"></a>Ajax学习笔记03</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>B/S 结构项目中， 浏览器（Browse）负责把用户的请求和参数通过网络发送给服务器(Server) ，服务端使用 Servlet(多种服务端技术的一种)接收请求，并将处理结果返回给浏览器。</li><li>浏览器在html、jsp 上呈现数据，混合使用 css、js 帮助美化页面或响应事件。  </li></ul><h2 id="全局刷新"><a href="#全局刷新" class="headerlink" title="全局刷新"></a>全局刷新</h2><ul><li>登录请求处理：  </li><li>index.jsp 发起登录请求——–LoginServlet——–result.jsp  </li></ul><h4 id="发起请求-request-阶段："><a href="#发起请求-request-阶段：" class="headerlink" title="发起请求 request 阶段："></a>发起请求 request 阶段：</h4><p>浏览器现在内存中是 index 页面的内容和数据 ：  </p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%205%3A%E6%97%A5%2014%3A%E6%97%B6%2043%3A%E5%88%86login%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.jpg" alt="login响应过程"></p><h4 id="服务器端应答结果阶段："><a href="#服务器端应答结果阶段：" class="headerlink" title="服务器端应答结果阶段："></a>服务器端应答结果阶段：</h4><p>sevlet 返回后把数据全部覆盖掉原来 index 页面内容， result.jsp 覆盖了全部的浏览器内存数据。 整个浏览器数据全部被刷新。 重新在浏览器窗口显示数据，样式，标签等。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%205%3A%E6%97%A5%2014%3A%E6%97%B6%2046%3A%E5%88%86login%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.jpg" alt="login响应过程"></p><h4 id="全局刷新原理"><a href="#全局刷新原理" class="headerlink" title="全局刷新原理:"></a>全局刷新原理:</h4><ol><li>必须由浏览器亲自向服务端发送请求协议包。</li><li>这个行为导致服务端直接将【响应包】发送到浏览器内存中。</li><li>这个行为导致浏览器内存中原有内容被覆盖掉。</li><li>这个行为导致浏览器在展示数据时候，只有响应数据可以展示。</li></ol><h2 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h2><ul><li>浏览器在展示数据时，此时在窗口既可以看到本次的响应数据， 同时又可以看到浏览器内存中原有数据。</li></ul><h4 id="局部刷新原理"><a href="#局部刷新原理" class="headerlink" title="局部刷新原理:"></a>局部刷新原理:</h4><ol><li>不能由浏览器发送请求给服务端。</li><li>浏览器委托浏览器内存中一个脚本对象代替浏览器发送请求。</li><li>这个行为导致导致服务端直接将【响应包】发送脚本对象内存中。</li><li>这个行为导致脚本对象内容被覆盖掉，但是此时浏览器内存中绝大部分内容没有收到任何影响。</li><li>这个行为导致浏览器在展示数据时候,同时展示原有数据和响应数据。</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%205%3A%E6%97%A5%2014%3A%E6%97%B6%2050%3A%E5%88%86Ajax%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0login%E8%BF%87%E7%A8%8B.jpg" alt="Ajax局部刷新login过程"></p><h2 id="异步请求对象"><a href="#异步请求对象" class="headerlink" title="异步请求对象"></a>异步请求对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在局部刷新，需要创建一个对象，代替浏览器发起请求的行为，这个对象存在内存中。代替浏览器发起请求并接收响应数据。这个对象叫做异步请求对象。全局刷新是同步行为， 局部刷新是异步行为[浏览器数据没有全部更新]，这个异步对象用于在后台与服务器交换数据。 XMLHttpRequest就是我们说的异步对象。</p><h3 id="XMLHttpRequest对象特点："><a href="#XMLHttpRequest对象特点：" class="headerlink" title="XMLHttpRequest对象特点："></a>XMLHttpRequest对象特点：</h3><ul><li>在不重新加载页面的情况下更新网页。</li><li>在页面已加载后向服务器请求数据。</li><li>在页面已加载后从服务器接收数据。</li></ul><p>所有现代浏览器 (IE7+、 Firefox、 Chrome、 Safari 以及 Opera) 都内建了 XMLHttpRequest对象。通过一行简单的 JavaScript 代码，我们就可以创建 XMLHttpRequest 对象。</p><p>创建 XMLHttpRequest对象的语法(xhr)：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// XMLHttpRequest就是核心对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>AJAX = Asynchronous JavaScript and XML( 异步的 JavaScript 和 XML)。</li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法。</li><li>AJAX 不是新的编程语言，而是使用现有技术混合使用的一种新方法。 ajax 中使用的技术有JavaScript、HTML、DOM、XML、CSS等。主要是 JavaScript、XML。</li><li>JavaScript：使用脚本对象XMLHttpRequest 发送请求， 接收响应数据。</li><li>XML：发送和接收的数据格式，现在使用 JSON。</li><li>AJAX不单需要前端的技术，同时需要后端（服务器）的配合。服务器需要提供数据，数据是 AJAX 请求的响应结果.</li></ul><h3 id="AJAX-异步实现步骤"><a href="#AJAX-异步实现步骤" class="headerlink" title="AJAX 异步实现步骤"></a>AJAX 异步实现步骤</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlHttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="onreadstatechange事件"><a href="#onreadstatechange事件" class="headerlink" title="onreadstatechange事件"></a>onreadstatechange事件</h4><p>​    当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当readyState改变时，就会触发onreadystatechange事件。 此事件可以指定一个处理函数 function。  </p><ul><li><p>通过判断XMLHttpReqeust对象的状态，获取服务端返回的数据。  </p></li><li><p>语法：</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">xmlHttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> xmlHttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlHttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理服务器返回数据</span>        xmlHttp    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XMLHttpRequest对象重要属性：</p><ol><li>onreadystatechange属性： 一个Js函数名或直接定义函数， 每当readyState属性改变时，就会调用该函数。</li><li>readyState属性(存有 XMLHttpRequest 的状态: 从0到4发生变化)：<ul><li>0: 请求未初始化，创建异步请求对象 var xmlHttp = new XMLHttpRequest()  </li><li>1: 初始化异步请求对象， xmlHttp.open(请求方式，请求地址， true)  </li><li>2: 异步对象发送请求， xmlHttp.send()  </li><li>3: 异步对象接收应答数据从服务端返回数据。 XMLHttpRequest 内部处理。  </li><li>4: 异步请求对象已经将数据解析完毕。 此时才可以读取数据。  </li></ul></li><li>status属性(从响应包中所返回的状态码常见的有)：<ul><li>200: “OK”。</li><li>404: 未找到页面。</li></ul></li><li>初始化请求参数：  </li></ol><h4 id="初始化请求参数"><a href="#初始化请求参数" class="headerlink" title="初始化请求参数"></a>初始化请求参数</h4><ul><li><p>方法：  </p><p>  xmlHttp.open(method,url,async) ： 初始化异步请求对象  </p></li><li><p>参数说明：  </p><p>• method：请求的类型：GET 或 POST<br>• url： 服务器的Servlet地址<br>• async： true（异步）或 false（同步）  </p><blockquote><p>(true)异步：在send()方法之后执行其它的代码，可以同时执行多个异步请求。</p><p>(false)同步：一次只能执行一个异步请求，必须请求处理完成后,才能执行其它的请求处理。</p></blockquote></li><li><p>例如:  </p><pre class="line-numbers language-javascript"><code class="language-javascript">xmlHttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>“method”<span class="token punctuation">,</span>”url”<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注意：</span><span class="token comment" spellcheck="true">// 1.method、url为字符串形式</span><span class="token comment" spellcheck="true">// 2.url必须开头写上网站别名 例：/myWeb02/AjaxExercise01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><ul><li><p>方法：</p><p>  xmlHttp.send()</p></li></ul><h4 id="接收服务器响应的数据"><a href="#接收服务器响应的数据" class="headerlink" title="接收服务器响应的数据"></a>接收服务器响应的数据</h4><ul><li>如需获得来自服务器的响应，请使用XMLHttpRequest对象的responseText或responseXML属性。<ul><li>responseText： 获得字符串形式的响应数据。    </li><li>responseXML： 获得 XML 形式的响应数据。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax学习笔记03&quot;&gt;&lt;a href=&quot;#Ajax学习笔记03&quot; class=&quot;headerlink&quot; title=&quot;Ajax学习笔记03&quot;&gt;&lt;/a&gt;Ajax学习笔记03&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://xrebirth.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://xrebirth.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSTL表达式(05)</title>
    <link href="https://xrebirth.github.io/posts/bd6d882c.html"/>
    <id>https://xrebirth.github.io/posts/bd6d882c.html</id>
    <published>2021-12-03T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。 是一个不断完善的开放源代码的 JSP 标签库。<br>EL 表达式主要是为了替换 jsp 中的表达式脚本， 而标签库则是为了替换代码脚本。 这样使得整个 jsp 页面变得更佳简洁。  </p><h2 id="JSTL组成"><a href="#JSTL组成" class="headerlink" title="JSTL组成"></a>JSTL组成</h2><table><thead><tr><th>功能范围</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>核心标签库–重点</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr><tr><td>数据库(不使用)</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>XML(不使用)</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr></tbody></table><p>在 jsp 标签库中使用 taglib 指令引入标签库</p><ul><li>CORE 标签库</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>FMT 标签库  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>FUNCTIONS 标签库  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>SQL 标签库  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>XML 标签库 </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="JSTL使用"><a href="#JSTL使用" class="headerlink" title="JSTL使用"></a>JSTL使用</h2><ol><li><p>先导入 jstl 标签库的 jar 包。 </p><ul><li>taglibs-standard-impl-1.2.1.jar</li><li>taglibs-standard-spec-1.2.1.jar  </li></ul></li><li><p>使用 taglib 指令引入相应的标签库。  </p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="core-核心库使用"><a href="#core-核心库使用" class="headerlink" title="core 核心库使用"></a>core 核心库使用</h2><h3 id="lt-c-set-gt-（使用很少）"><a href="#lt-c-set-gt-（使用很少）" class="headerlink" title="<c:set />（使用很少）"></a>&lt;c:set /&gt;（使用很少）</h3><ul><li>作用： set 标签可以往域中保存数据  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--<c:set />作用： set 标签可以往域中保存数据域对象.setAttribute(key,value);scope 属性设置保存到哪个域page 表示 PageContext 域（默认值）request 表示 Request 域session 表示 Session 域application 表示 ServletContext 域var 属性设置 key 是多少value 属性设置值--%>保存之前： ${ sessionScope.abc } <br><c:set scope="session" var="abc" value="abcValue"/>保存之后： ${ sessionScope.abc } <br><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-c-if-gt"><a href="#lt-c-if-gt" class="headerlink" title="<c:if />"></a>&lt;c:if /&gt;</h3><ul><li>if 标签用来做 if 判断</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--ii.<c:if />if 标签用来做 if 判断。test 属性表示判断的条件（使用 EL 表达式输出）--%><c:if test="${ 12 == 12 }"><h1>12 等于 12</h1></c:if><c:if test="${ 12 != 12 }"><h1>12 不等于 12</h1></c:if><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="<c:choose> <c:when> <c:otherwise>标签"></a>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</h3><ul><li>作用： 多路判断。 跟 switch … case …. default 非常接近  </li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--<c:choose> <c:when> <c:otherwise>标签作用： 多路判断。 跟 switch ... case .... default 非常接近choose 标签开始选择判断when 标签表示每一种判断情况test 属性表示当前这种判断情况的值otherwise 标签表示剩下的情况<c:choose> <c:when> <c:otherwise>标签使用时需要注意的点：1、 标签里不能使用 html 注释， 要使用 jsp 注释2、 when 标签的父标签一定要是 choose 标签--%><%    request.setAttribute("height", 180);%><c:choose>    <%-- 这是 html 注释 --%>    <c:when test="${ requestScope.height > 190 }">        <h2>小巨人</h2>    </c:when>    <c:when test="${ requestScope.height > 180 }">        <h2>很高</h2>    </c:when>    <c:when test="${ requestScope.height > 170 }">        <h2>还可以</h2>    </c:when>    <c:otherwise>        <% 如果里面还需要做判断则需要基于<c:choose>标签内在做判断 %>        <c:choose>            <c:when test="${requestScope.height > 160}">                <h3>大于 160</h3>            </c:when>            <c:when test="${requestScope.height > 150}">                <h3>大于 150</h3>            </c:when>            <c:when test="${requestScope.height > 140}">                <h3>大于 140</h3>            </c:when>            <c:otherwise>                其他小于 140            </c:otherwise>        </c:choose>    </c:otherwise></c:choose><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-c-forEach-gt"><a href="#lt-c-forEach-gt" class="headerlink" title="<c:forEach />"></a>&lt;c:forEach /&gt;</h3><ul><li>作用： 遍历输出使用。 </li></ul><h4 id="例1：遍历-1-到-10，-输出"><a href="#例1：遍历-1-到-10，-输出" class="headerlink" title="例1：遍历 1 到 10， 输出"></a>例1：遍历 1 到 10， 输出</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><%-- 遍历 1 到 10， 输出begin 属性设置开始的索引end 属性设置结束的索引var 属性表示循环的变量(也是当前正在遍历到的数据)for (int i = 1; i < 10; i++)--%><table border="1">    <c:forEach begin="1" end="10" var="i">        <tr>            <td>第${i}行</td>        </tr>    </c:forEach></table><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例2：遍历-Object-数组"><a href="#例2：遍历-Object-数组" class="headerlink" title="例2：遍历 Object 数组"></a>例2：遍历 Object 数组</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><%-- 遍历 Object 数组for (Object item: arr)items 表示遍历的数据源（遍历的集合）var 表示当前遍历到的数据--%><%    request.setAttribute("arr", new String[]{"18610541354","18688886666","18699998888"});%><c:forEach items="${ requestScope.arr }" var="item">    ${ item } <br></c:forEach><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例3：遍历-Map-集合"><a href="#例3：遍历-Map-集合" class="headerlink" title="例3：遍历 Map 集合"></a>例3：遍历 Map 集合</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><% // 遍历 Map 集合      Map<String,Object> map = new HashMap<String, Object>();    map.put("key1", "value1");    map.put("key2", "value2");    map.put("key3", "value3");    // for ( Map.Entry<String,Object> entry : map.entrySet()) {}    request.setAttribute("map", map);%><c:forEach items="${ requestScope.map }" var="entry">    <h1>${entry.key} = ${entry.value}</h1></c:forEach><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例4：遍历List集合-list-中存放Student类"><a href="#例4：遍历List集合-list-中存放Student类" class="headerlink" title="例4：遍历List集合-list 中存放Student类"></a>例4：遍历List集合-list 中存放Student类</h4><ul><li>Student实体类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//编号， 用户名， 密码， 年龄， 电话信息</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSP</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%    List<Student> studentList = new ArrayList<Student>();    for (int i = 1; i <= 10; i++) {        studentList.add(new Student(i,"username"+i ,"pass"+i,18+i,"phone"+i));    } r    equest.setAttribute("stus", studentList);%><table>    <tr>        <th>编号</th>        <th>用户名</th>        <th>密码</th>        <th>年龄</th>        <th>电话</th>        <th>操作</th>    </tr>    <%--        items 表示遍历的集合        var 表示遍历到的数据        begin 表示遍历的开始索引值        end 表示结束的索引值        step 属性表示遍历的步长值        varStatus 属性表示当前遍历到的数据的状态        for（int i = 1; i < 10; i+=2）    --%>    <c:forEach begin="2" end="7" step="2" varStatus="status" items="${requestScope.stus}" var="stu">        <tr>            <td>${stu.id}</td>            <td>${stu.username}</td>            <td>${stu.password}</td>            <td>${stu.age}</td>            <td>${stu.phone}</td>            <td>${status.step}</td>        </tr>    </c:forEach></table><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSTL表达式&quot;&gt;&lt;a href=&quot;#JSTL表达式&quot; class=&quot;headerlink&quot; title=&quot;JSTL表达式&quot;&gt;&lt;/a&gt;JSTL表达式&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="JavaEE" scheme="https://xrebirth.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记(02)</title>
    <link href="https://xrebirth.github.io/posts/d108c186.html"/>
    <id>https://xrebirth.github.io/posts/d108c186.html</id>
    <published>2021-12-02T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记02"><a href="#JS学习笔记02" class="headerlink" title="JS学习笔记02"></a>JS学习笔记02</h1><h2 id="初识BOM-DOM"><a href="#初识BOM-DOM" class="headerlink" title="初识BOM/DOM"></a>初识BOM/DOM</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>BOM英文全名：(borwser Object Model)浏览器对象模型</li><li>DOM英文全名：(Document Object Model)文档对象模型</li><li>DOM是 W3C 的标准; [所有浏览器公共遵守的标准]。</li><li>BOM 是 各个浏览器厂商根据 DOM在各自浏览器上的实现;[表现为不同浏览器定义有差别,实现方式不同]。</li><li>window 是 BOM 对象，而非 js 对象；</li></ul><p><strong>注意：</strong></p><ul><li><code>DOM</code>（文档对象模型）是 <code>HTML</code> 和 <code>XML</code> 的应用程序接口（<code>API</code>）。</li><li><code>BOM</code> 主要处理浏览器窗口和框架，不过通常浏览器特定的 <code>JavaScript</code> 扩展都被看做 BOM 的一部分。</li></ul><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ul><li><p><code>javacsript</code>是通过访问<code>BOM</code>（Browser Object Model）对象来访问、控制、修改客户端(浏览器)，由于<code>BOM</code>的<code>window</code>包含了<code>document</code>，window对象的属性和方法是直接可以使用而且被感知的，因此可以直接使用<code>window</code>对象的<code>document</code>属性，通过<code>document</code>属性就可以访问、检索、修改XHTML文档内容与结构。因为<code>document</code>对象又是DOM（Document Object Model）模型的根节点。可以说，BOM包含了<code>DOM</code>(对象)，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到<code>DOM</code>对象，从而js可以操作浏览器以及浏览器读取到的文档。其中：DOM包含：window。</p><ol><li>Window对象包含属性：document、location、navigator、screen、history、frames</li><li>Document根节点包含子节点：forms、location、anchors、images、links</li></ol><p>  从<code>window.document</code>已然可以看出，DOM的最根本的对象是BOM的window对象的子对象。而他们之前的最大区别：DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口。</p></li></ul><h2 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    DOM操作creatElement(element)创建一个新的元素节点creatTextNode()创建一个包含给定文本的新文本节点appendChild()指定节点的最后一个节点列表后添加一个新的子节insertBefore()将一个给定节点插入到一个给定元素节点的给定子节点的前面removeChild()从一个给定元素中删除子节点replaceChild()把一个给定父元素里的一个子节点替换为另外一个节点，DOM通过创建树来表示文档，描述了处理网页内容的方法和接口，从而使开发者对文档的内容和结构具有空前的控制力，用DOM API可以轻松地删除、添加和替换节点。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%203%3A%E6%97%A5%2018%3A%E6%97%B6%2025%3A%E5%88%86DOM%E8%8A%82%E7%82%B9.png" alt="DOM节点"></p><h3 id="DOM对象生命周期"><a href="#DOM对象生命周期" class="headerlink" title="DOM对象生命周期"></a>DOM对象生命周期</h3><ol><li>浏览器在接收到html文件之后，将HTML文件标签加载到浏览器缓存中，每当加载一个html标签时候，自动为这个标签生成一个实例对象，这个实例对象就是<code>DOM</code>对象。</li><li>在浏览器关闭之前或则浏览器请求其他资源文件之前，本次生成的<code>DOM</code>对象一直存活在浏览器缓存中。</li><li>在浏览器关闭时候，浏览器缓存中<code>DOM</code>对象将要被销毁。</li><li>在浏览器请求到新资源文件后，浏览器缓存中原有的<code>DOM</code>对象将会被覆盖。</li></ol><h2 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h2><ol><li><code>document</code>对象被称为【文档对象】</li><li><code>document</code>对象用于在浏览器内存中根据定位条件定位DOM对象</li></ol><h3 id="document对象生命周期"><a href="#document对象生命周期" class="headerlink" title="document对象生命周期:"></a>document对象生命周期:</h3><ol><li>在浏览器将网页中所有标签加载完毕后，在内存中将使用【树形结构】存储这些DOM对象。在树形结构生成完毕后由浏览器生成一个document对象<br> 管理这颗树（DOM树）在浏览器将接收网页中标签加载完毕后，自动在浏览器内存生成一个document对象。</li><li>一个浏览器运行期间，只会生成一个document对象。</li><li>在浏览器关闭时，负责将document对象进行销毁。</li></ol><h2 id="通过document对象定位DOM对象方式："><a href="#通过document对象定位DOM对象方式：" class="headerlink" title="通过document对象定位DOM对象方式："></a>通过document对象定位DOM对象方式：</h2><ol><li><p>根据html标签的id属性值定位DOM对象</p><ul><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> domObj <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通知document对象定位id属性等于one的标签关联的DOM对象</p></li></ul></li><li><p>根据html标签的name属性值定位DOM对象</p><ul><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"name属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通知document对象将所有name属性等于deptNo的标签关联的DOM对象，进行定位并封装到一个数组进行返回。 domArray就是一个数组存放<br>  本次返回的所有DOM对象。</p></li></ul></li><li><p>根据html标签类型定位DOM对象</p><ul><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"标签类型名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通知document对象将所有段落标签关联的dom对象进行定位并封装到一个数组返回。</p></li></ul></li><li><p>待学习…</p></li></ol><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>监听用户在何时以何种方式对当前标签进行操作。当监听到相关行为时，通知浏览器调用对应JavaScript函数对当前用户请求进行处理。</p><h3 id="监听分类："><a href="#监听分类：" class="headerlink" title="监听分类："></a>监听分类：</h3><ol><li>监听用户何时使用鼠标操作当前标签。</li><li>监听用户何时使用键盘操作当前标签。</li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ol><li>onclick :  监听用户何时使用鼠标【单击】当前标签</li><li>onmouseover: 监听用户何时将鼠标【悬停】当前标签上方</li><li>onmouseout : 监听用户何时将鼠标从当前标签上方【移开】</li><li>onfocus: 监听用户何时通过鼠标让当前标签获得【光标】</li><li>onblur: 监听用户何时通过鼠标让当前标签丢失【光标】</li></ol><h3 id="事件绑定方法："><a href="#事件绑定方法：" class="headerlink" title="事件绑定方法："></a>事件绑定方法：</h3><h4 id="行内绑定"><a href="#行内绑定" class="headerlink" title="行内绑定"></a>行内绑定</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><ul><li>获取到dom元素，并在元素上绑定事件。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> demo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"示例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><ul><li>处理表格或者列表中的数据的时候使用事件委托的方式，只绑定一次事件，避免性能的损耗。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> demo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"示例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ul><li>在 JavaScript认为所有通过【构造函数】生成对象其数据类型都是Object类型。</li></ul><h3 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h3><ul><li>object类型对象在创建完毕后,可以根据实际情况,任意添加属性和方法,也可以移除属性和方法。</li></ul><h3 id="添加属性："><a href="#添加属性：" class="headerlink" title="添加属性："></a>添加属性：</h3><h4 id="第一种添加添加方式："><a href="#第一种添加添加方式：" class="headerlink" title="第一种添加添加方式："></a>第一种添加添加方式：</h4><ul><li><p>添加属性</p><p>  object对象.新属性名 = 值;</p></li><li><p>添加函数</p><p>  object对象.新函数对象名 = function() {};</p></li></ul><h4 id="第二种添加添加方式："><a href="#第二种添加添加方式：" class="headerlink" title="第二种添加添加方式："></a>第二种添加添加方式：</h4><ul><li><p>添加属性</p><p>  object对象[“新属性名”] = 值;</p></li><li><p>添加函数</p><p>  object对象[“新函数对象名”] = function() {};</p></li></ul><h3 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建构造函数</span><span class="token keyword">function</span> <span class="token function">函数对象名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Demo..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用构造函数</span><span class="token keyword">var</span> Object类型对象 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">函数对象名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="普通函数-构造函数区别："><a href="#普通函数-构造函数区别：" class="headerlink" title="普通函数/构造函数区别："></a>普通函数/构造函数区别：</h4><ol><li>函数没有调用之前，无法区分函数身份，只能根据函数调用形式区分。</li><li>判断普通函数：var demo = 函数对象名(); </li><li>判断构造函数：var demo = new 函数对象名();</li></ol><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h3><p>SON(JavaScript Object Notation) 是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript 原生格式，这意味着在 JavaScript 中处理 JSON数据不须要任何特殊的 API 或工具包。</p><h3 id="JSON对象语法："><a href="#JSON对象语法：" class="headerlink" title="JSON对象语法："></a>JSON对象语法：</h3><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> 对象名称 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"属性名"</span><span class="token punctuation">:</span> <span class="token string">"属性值"</span><span class="token punctuation">,</span>        <span class="token string">"方法名"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            语法<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON数组语法："><a href="#JSON数组语法：" class="headerlink" title="JSON数组语法："></a>JSON数组语法：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// JSON相当于java中的集合</span><span class="token keyword">var</span> student2 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>   <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>        <span class="token string">"run"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在跑步ing..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span>        <span class="token string">"run"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在跑步ing..."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> student2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> student2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS学习笔记02&quot;&gt;&lt;a href=&quot;#JS学习笔记02&quot; class=&quot;headerlink&quot; title=&quot;JS学习笔记02&quot;&gt;&lt;/a&gt;JS学习笔记02&lt;/h1&gt;&lt;h2 id=&quot;初识BOM-DOM&quot;&gt;&lt;a href=&quot;#初识BOM-DOM&quot; class=&quot;he</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://xrebirth.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://xrebirth.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS笔记(01)</title>
    <link href="https://xrebirth.github.io/posts/fa259245.html"/>
    <id>https://xrebirth.github.io/posts/fa259245.html</id>
    <published>2021-12-02T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS学习笔记01"><a href="#JS学习笔记01" class="headerlink" title="JS学习笔记01"></a>JS学习笔记01</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>JavaScript是一种专门在浏览器编译并执行的编程语言。</li><li>JavaScript处理用户与浏览器之间请求问题。</li><li>JavaScript采用【弱类型编程语言风格】对【面向对象思想】来进行实现的编程语言。</li></ol><h3 id="弱类型编程语言风格-VS-强类型编程语言风格："><a href="#弱类型编程语言风格-VS-强类型编程语言风格：" class="headerlink" title="弱类型编程语言风格 VS 强类型编程语言风格："></a>弱类型编程语言风格 VS 强类型编程语言风格：</h3><ol><li><p>强类型编程语言风格：认为对象行为应该受到其修饰类型严格约束。</p><ul><li>Java采用【强类型编程语言风格】对【面向对象思想】来进行实现的编程语言。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String sname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student  stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span>sname<span class="token operator">=</span><span class="token string">"mike"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// stu对象能够调用属性只有sname</span>        stu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stu对象能够调用方法只有sayHello()</span>        stu<span class="token punctuation">.</span>sid <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在Java认为是语法错误，修饰stu对象的Student类型没有提供这个属性  </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>弱类型编程语言风格： 认为对象行为不应该受到其修饰类型约束。可以根据实际需要来决定对象可以调用属性和方法</p><ul><li>JavaScript采用【弱类型编程语言风格】对【面向对象思想】来进行实现的编程语言。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//stu对象相当于【阿Q】</span>stu<span class="token punctuation">.</span>car <span class="token operator">=</span> <span class="token string">"劳斯莱斯"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//合法</span>stu<span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span>  <span class="token string">"天天打游戏"</span><span class="token punctuation">}</span>stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="变量声明方式"><a href="#变量声明方式" class="headerlink" title="变量声明方式"></a>变量声明方式</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名<span class="token punctuation">;</span><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">var</span> 变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token operator">=</span>值；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在JavaScript变量/对象，在声明不允许指定【修饰类型】只能通过var来进行修饰。</p><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><ol><li><p>标识符只能由四种符号组成  英文字母，数字 , 下划线，美元符号($)。</p></li><li><p>标识符首字母不能以”数字”开头。</p></li><li><p>标识符不能采用JavaScript关键字 比如var。</p></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th align="center">数据类型</th><th>基本数据类型/引用数据类型</th><th>说明</th></tr></thead><tbody><tr><td align="center">number</td><td>基本数据类型</td><td>数据类型</td></tr><tr><td align="center">string</td><td>基本数据类型</td><td>字符类型</td></tr><tr><td align="center">boolean</td><td>基本数据类型</td><td>布尔类型</td></tr><tr><td align="center">object</td><td>高级数据类型</td><td>对象类型</td></tr><tr><td align="center">function</td><td>高级数据类型</td><td>函数类型</td></tr></tbody></table><p><strong>注意</strong>：JavaScript是弱类型编程语言，根据变量赋值内容来判断变量数据类型，JavaScript中变量的数据类型可以根据赋值内容来进行动态改变。</p><h2 id="JavaScript特殊【值】"><a href="#JavaScript特殊【值】" class="headerlink" title="JavaScript特殊【值】"></a>JavaScript特殊【值】</h2><table><thead><tr><th align="center">特殊【值】</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">undefined</td><td align="left">JavaScript中所有变量在没有赋值时，其默认值都是undefined<br>由于JavaScript根据变量的赋值来判断变量类型，此时由于变量<br>没有赋值因此JavaScript无法判断当前变量数据类型，此时返回也是undefiled。</td></tr><tr><td align="center">null</td><td align="left">JS中当一个对象赋值为null时，表示对象引用了一个【空内存】<br>这个空内存既不能存储数据也不能读取数据。<br>此时这个对象数据类型，在JavaScript依然认为是object类型。</td></tr><tr><td align="center">NaN</td><td align="left">JS中当一个变量赋值为NaN，表示变量接收了一个【非法数字】（123 合法数字  abc123 非法数字）<br>此时这个变量数据类型，在JavaScript依然认为number类型。</td></tr><tr><td align="center">infinity</td><td align="left">JS中当一个变量赋值为infinity，表示变量接收了一个【无穷大数字】<br>此时这个变量数据类型，在JavaScript依然认为number类型。</td></tr></tbody></table><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><ul><li><p>if 语句是最常用的条件分支语句，作用就是通过某个指定的判断条件，决定走哪个分支的代码</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>     statement1<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     statement2<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a><strong>switch</strong></h3><ul><li><p>开关语句允许一个程序求一个表达式的值，并且尝试去匹配表达式的值到一个 case 标签。如果匹配成功，这个程序执行相关语句。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>        结构体<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token punctuation">:</span>        结构体<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        执行最后的语句<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>语法解析：</p><ul><li>switch：关键字表示开始进入一个开关语句。</li><li>表达式：会求出一个具体的值，将这个值去与 {} 内部的 case 后面的值进行对比、匹配，如果值相等表示匹配成功。匹配相等时，方式是进行全等于匹配，不止值要相等，数据类型也要相等。</li><li>case：示例的意思，作为关键字后面必须跟一个空格，书写匹配的值。</li><li>case 后面的结构体：每个 case 匹配成功之后要执行的语句。</li><li>break： 用于打断结构体，直接跳出程序，模拟跳楼现象。</li><li>default：相当于 if 语句中的 else ，否则的情况，如果前面的 case 都不匹配，执行 default 后面的语句。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li>default 可以不写，相当于 if 语句没有 else。</li><li>break 关键字：根据结构需要有时必须在每个 case 后面都要写，为了模拟跳楼现象，如果不写break，对应的 case 后面的语句执行之后，不会跳出结构体，会继续想下执行其他 case 的后面的语句，直到遇到一个 break。</li></ul></li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li><p>for 循环是一种<strong>前测试循环语句</strong>，在反复执行一段代码之前，都先测试入口条件，如果条件为真，可继续循环，如果条件为假，必须跳出循环不再执行。<br>  它是一种反复执行一段代码直到测试条件为假时停止。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>定义循环变量<span class="token punctuation">;</span> 变量的最大值或最小值<span class="token punctuation">;</span> 步长<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><ul><li><p>do while 循环是一种<strong>后测试循环语句</strong>，会先执行一次结构体，执行完后才会去判断入口条件，如果条件为真能够继续下一次循环，如果条件为假跳出循环。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>语法解析：</p><ul><li>do：做什么，后面是每次循环的循环体。</li><li>while：当·····的时候。</li><li>先执行一次循环体，然后当条件表达式为真时可以继续循环。</li></ul></li><li><p><strong>注意</strong>：</p><ul><li>如果循环需要循环变量参与，循环变量必须定义在循环外面，否则会被重置。</li><li>循环变量自加的过程需要写在 {} 循环体内部。</li><li>如果将循环变量写在结构体内，i 的初始值每次都会被重置，容易出现死循环。</li><li>变量自加过程写在输出语句前面和后面，结果是不同的。</li><li>do while 循环即便条件第一次测试就为假，也会执行一次结构体。</li><li>至少会执行一次循环体。</li></ul></li></ul><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><ul><li><p>while 循环是一种<strong>前端测试循环语句</strong>，在执行循环体之前都要测试入口条件，条件为真继续执行，条件为假直接跳出循环。</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>语法解析：</p><ul><li>当条件表达式为真时，执行循环体，如果为假，跳出循环。</li></ul></li><li><p>语法解析：</p><ul><li>如果需要循环变量参与，必须定义在循环外部，避免被重置。</li><li>循环变量自加的过程写在循环体内部。</li></ul></li></ul><h3 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h3><ul><li>我已经找到我要的答案了，我不需要进行更多的循环了！</li><li>break 语句的作用可以立即停止当前的 for、do while、while 循环。</li><li>根据一些条件设置 break 位置，直到循环能够执行到 break 语句立即停止执行，跳出循环。</li><li>例如：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//break关键字 用于跳出整一个循环</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是我吃的第'</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">'个包子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意事项：</p><ul><li><p>break 如果没有特殊提示，只能停止自己所在的那一层循环，并不能终止外部循环。</p></li><li><p>如果想停止外层循环，可以给外层循环添加一个标签名 label，在内层循环的 break 关键字后面空格加一个 label 名。</p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 如果想终止外层循环，需要给外层循环添加一个名字</span>outloop <span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 补充打断条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span> outloop<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><ul><li><p>这个答案不是我想要的，赶紧试试下一个吧。</p></li><li><p>遇到 continue 表示当前的一次循环不是我们想要的，会立即停止当前次的循环，立即进入下一次循环。</p></li><li><p>例如：找 1-30 之间，输出不是 5 的倍数的数字。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// continue关键字用于立即跳出本循环，继续下一次循环(本次循环体中continue之后的代码就会少执行一次)</span><span class="token comment" spellcheck="true">// 找 1-30 之间，输出不是 5 的倍数的数字</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是 5 的倍数，不能输出，直接进入下一次循环</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走到这个位置，说明不是 5 的倍数，可以输出</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意事项：</strong></p><ul><li><p>要根据特殊设置 continue 的位置。</p></li><li><p>continue 如果没有特殊指示只能进入自己的下一次循环，不能立即停止外层循环的这一次进入下一次。</p></li><li><p>控制外层循环的方式与 break 一样，都是添加外层的标签名。</p></li><li><p>例如：控制内层循环</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// continue 只能进入自己的循环的下一次</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 补充打断这一次条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例如：控制外层循环</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// continue 只能进入自己的循环的下一次</span>outloop<span class="token punctuation">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 补充打断这一次条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span> outloop<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><h3 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span>   <span class="token function">函数名</span><span class="token punctuation">(</span>形参名<span class="token number">1</span>，形参名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    JavaScript命令行    JavaScript命令行    <span class="token keyword">return</span>  将函数运行结果进行返回  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>JavaScript中，所有函数在声明时，都需要使用function进行修饰。</li><li>JavaScript中，所有函数在声明时，禁止指定函数返回数据类型。</li><li>JavaScript中，所有函数在声明时，形参既不能使用var来修饰也不能使用数据类型修饰。</li><li>JavaScript中，所有函数在声明时，如果有返回值，此时应该通过return进行返回。</li></ol><h3 id="声名方式"><a href="#声名方式" class="headerlink" title="声名方式"></a>声名方式</h3><ul><li><p>标准声名方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数对象名</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    命令<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匿名声名方式</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 函数对象名 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    命令<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><ol><li>浏览器并不会自动调用JavaScript函数。</li><li>可以通过命令行方式来调用Java函数。</li><li>通过绑定在HTML标签上监听事件通知浏览器调用指定函数进行处理。</li></ol><h3 id="function创建时机"><a href="#function创建时机" class="headerlink" title="function创建时机"></a>function创建时机</h3><ul><li>在浏览器加载<script>时共加载两次。<ol><li>第一次：将<script>标签中所有以标准声名的函数对象进行创建。</li><li>第二次：将<script>标签中所有命令按照自上而下顺序来执行。</li></ol></li></ul><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ol><li>JavaScript中，每一个都有arguments属性。</li><li>arguments是一个数组。</li><li>在函数调用时，将实参传入到函数的argumens中，再由arguments将数据传入给函数的形参中。</li><li>arguments属性的存在，可以将JavaScript中函数在调用传递实参与形参来进行隔离，增加函数的灵活性。</li><li>arguments属性只能在函数体内使用，不能在函数体外使用。</li></ol><h4 id="arguments应用"><a href="#arguments应用" class="headerlink" title="arguments应用"></a>arguments应用</h4><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 函数重载</span>    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3<span class="token punctuation">,</span>num4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3 <span class="token operator">+</span> num4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></script></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS学习笔记01&quot;&gt;&lt;a href=&quot;#JS学习笔记01&quot; class=&quot;headerlink&quot; title=&quot;JS学习笔记01&quot;&gt;&lt;/a&gt;JS学习笔记01&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://xrebirth.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://xrebirth.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>EL表达式(04)</title>
    <link href="https://xrebirth.github.io/posts/c928c9ab.html"/>
    <id>https://xrebirth.github.io/posts/c928c9ab.html</id>
    <published>2021-11-28T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>由Java技术开发一个jar包</li><li>作用降低JSP文件开发时Java命令开发强度</li><li>Tomcat服务器本身自带了EL工具包（Tomcat安装地址/lib/el-api.jar）</li></ul><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><ul><li><p>代替响应对象 将Servlet中doGet/doPost的执行结果写入到响应体。</p></li><li><p>JSP文件主要开发步骤：</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%    String value = (String)request.getAttribute("key");%><%=value%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>从指定的作用域对象读取处理结果。</li><li>将得到数据进行类型强转。</li><li>将转换后的数据写入到响应体。</li></ol></li><li><p>以上开发步骤太繁琐，可以使用EL表达式简化开发步骤。</p></li></ul><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-jsp"><code class="language-jsp">${作用域对象别名.共享数据名}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="命令作用"><a href="#命令作用" class="headerlink" title="命令作用"></a>命令作用</h2><ul><li>执行时从指定的【作用域对象】中读取指定【共享数据】的内容并自动的写入到响应体。</li></ul><h2 id="EL表达式作用域对象别名"><a href="#EL表达式作用域对象别名" class="headerlink" title="EL表达式作用域对象别名"></a>EL表达式作用域对象别名</h2><table><thead><tr><th>属性范围(jstl名称)</th><th>EL名称</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>PageScope</td><td></td></tr><tr><td>Request</td><td>RequestScope</td><td>请求作用域</td></tr><tr><td>Session</td><td>SessionScope</td><td>会话作用域</td></tr><tr><td>Application</td><td>ApplicationScope</td><td>全局作用域</td></tr></tbody></table><h2 id="与-运算符"><a href="#与-运算符" class="headerlink" title="**.**与 [ ] 运算符"></a>**.**与 <strong>[ ]</strong> 运算符</h2><ul><li><p>EL 提供 . 和 [ ] 两种运算符来导航数据。下列两者所代表的意思是一样的：</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.user.sex}等于${sessionScope.user["sex"]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>. 和 [ ] 也可以同时混合使用，如下：</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.shoppingCart[0].price}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>以上两者的差异：</p><ul><li>当要存取的属性名称中包含一些特殊字符，如.或–等并非字母或数字的符号，就一定要使用 [ ]</li></ul><pre class="line-numbers language-jsp"><code class="language-jsp"><%--错误写法:因为属性名中含有-/--%>     ${user.My-Name}   <%--正确写法:--%>                     ${user["My-Name"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>我们来考虑下列情况：</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.user[data]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此时，data 是一个变量，假若data的值为”sex”时，那上述的例子等于:</p><pre class="line-numbers language-jsp"><code class="language-jsp">${sessionScope.user.sex}；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>假若data 的值为”name”时，它就等于${sessionScope.user.name}，因此，如果要动态取值时，就可以用上述的方法来做，但无法做到动态取值。</p></li></ul><h2 id="简化版EL表达式"><a href="#简化版EL表达式" class="headerlink" title="简化版EL表达式"></a>简化版EL表达式</h2><h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-jsp"><code class="language-jsp">${作用域对象别名}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><p>由于在EL简化版中没有指定作用域对象别名。所以EL表达式采用”猜测算法”，首先到【pageContext】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【pageCotnext】没有找到共享数据，到【request】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【request】没有找到共享数据，到【session】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【session】没有找到共享数据，到【application】定位共享数据，如果定位成功读取输出并结束执行。</p></li><li><p>如果在【application】没有找到共享数据,此时返回null。</p></li></ul><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><ul><li>增加程序运行时间。</li><li>导致定位数据错误。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>简化版设计之初就是为了从当前页作用域对象读取数据并输出。所以从request，session，application读取数据并输出时应该避免使用简化版。</p><h2 id="EL运算表达式"><a href="#EL运算表达式" class="headerlink" title="EL运算表达式"></a>EL运算表达式</h2><ol><li>EL表达式允许开发人员将读取共享数据进行相关运算之后，再进行输出。</li><li>EL表达式支持运算：<ul><li>数学运算表达式</li><li>关系运算表达式</li><li>逻辑运算表达式</li></ul></li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2029%3A%E6%97%A5%2017%3A%E6%97%B6%2034%3A%E5%88%86EL%E8%BF%90%E7%AE%97%E7%AC%A6.jpg" alt="EL表达式"></p><ol start="3"><li>EL表达式提供了一个用于测试对象是否为空的特殊运算符”empty”，其语法形式为${empty 变量名}，它能判断当前变量(确切的硕，应该是命名空间)是否为空。在以下情况下empty运算符返回true：<ul><li>当前变量不存在(即没有定义)。</li><li>当前变量值为null</li><li>当前变量引用集合(Set、list、Map)类型的对象，并且在当前集合对象中不包含任何元素。</li><li><strong>注意</strong>：empty运算符可以与”!”运算符一起使用。</li></ul></li></ol><h2 id="EL表达式高级类型对象的属性输出"><a href="#EL表达式高级类型对象的属性输出" class="headerlink" title="EL表达式高级类型对象的属性输出"></a>EL表达式高级类型对象的属性输出</h2><h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-jsp"><code class="language-jsp">${作用域对象别名.共享数据名.属性名}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令作用-1"><a href="#命令作用-1" class="headerlink" title="命令作用"></a>命令作用</h3><p>从作用域对象读取到指定的高级类型对象，并将高级类型对象中指定属性内容写入到响应体。</p><h2 id="EL表达式专有异常"><a href="#EL表达式专有异常" class="headerlink" title="EL表达式专有异常"></a>EL表达式专有异常</h2><h3 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h3><p>javax.el.PropertyNotFoundException：类型【xxxx】不存在【属性名】既在某个类中没有找到对应的属性。</p><h3 id="异常原因分析"><a href="#异常原因分析" class="headerlink" title="异常原因分析"></a>异常原因分析</h3><ul><li>EL表达式在读取对象中属性时，通过【反射机制】调用当前属性对应的get方法得到属性的值，如果当前属性没有声明对应get方法，此时EL表达式认为当前<br>  类文件没有这个属性。</li></ul><h2 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在EL表达式中可以直接使用的一组工具对象，用于提供对EL表达式功能扩充。</p><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">param</td><td align="left">将请求参数名称映射到单个字符串参数值(通过调用 ServletRequest.getParameter (String name) 获得)。getParameter (String) 方法返回带有特定名称的参数。表达式 ${param . name}相当于request.getParameter (name)。</td></tr><tr><td align="left">paramValues</td><td align="left">将请求参数名称映射到一个数值数组(通过调用 ServletRequest.getParameter (String name) 获得)。它与 param 隐式对象非常类似，但它检索一个字符串数组而不是单个值。表达式 ${paramvalues. name} 相当于 request.getParamterValues(name)。</td></tr><tr><td align="left">header</td><td align="left">将请求头名称映射到单个字符串头值(通过调用 ServletRequest.getHeader(String name) 获得)。表达式 ${header. name} 相当于 request.getHeader(name)。</td></tr><tr><td align="left">headerValues</td><td align="left">将请求头名称映射到一个数值数组(通过调用ServletRequest.getHeaders(String) 获得)。它与头隐式对象非常类似。表达式 ${headerValues. name} 相当于 request.getHeaderValues(name)。</td></tr><tr><td align="left">cookie</td><td align="left">将 cookie 名称映射到单个 cookie 对象。向服务器发出的客户端请求可以获得一个或多个 cookie。表达式 ${cookie. name .value} 返回带有特定名称的第一个 cookie 值。如果请求包含多个同名的cookie，则应该使用 ${headerValues. name} 表达式。</td></tr><tr><td align="left">initParam</td><td align="left">将上下文初始化参数名称映射到单个值(通过调用 ServletContext.getInitparameter(String name) 获得)。</td></tr></tbody></table><h2 id="EL表达式禁用"><a href="#EL表达式禁用" class="headerlink" title="EL表达式禁用"></a>EL表达式禁用</h2><h3 id="在当前JSP文件中禁用EL表达式"><a href="#在当前JSP文件中禁用EL表达式" class="headerlink" title="在当前JSP文件中禁用EL表达式"></a>在当前JSP文件中禁用EL表达式</h3><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page isELIgnored="true" %> <%--表示是否禁用EL语言,TRUE表示禁止.FALSE表示不禁止--%><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在整个项目中禁用EL表达式"><a href="#在整个项目中禁用EL表达式" class="headerlink" title="在整个项目中禁用EL表达式"></a>在整个项目中禁用EL表达式</h3><pre class="line-numbers language-jsp"><code class="language-jsp"><jsp-config><jsp-property-group><url-pattern>*.jsp</url-pattern><el-ignored>true</el-ignored></jsp-property-group></jsp-config><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON工具包"><a href="#JSON工具包" class="headerlink" title="JSON工具包"></a>JSON工具包</h2><h3 id="JSON工具包创建-对象"><a href="#JSON工具包创建-对象" class="headerlink" title="JSON工具包创建(对象)"></a>JSON工具包创建(对象)</h3><p>Servlet</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 1.得到一个部门类型的对象</span>        Dept dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"浙江省 金华市 金东区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过json工具包中的工具类将部门对象内容转换成JSON格式字符串</span>        JSONObject jsonObject <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.将JS0N格式字符串添加请求作用域对象</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> jsonObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index_02.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP</p><pre class="line-numbers language-jsp"><code class="language-jsp">        function init() {            var deptObj = ${requestScope.key};            document.getElementById("deptNo").value = deptObj.deptNo;            document.getElementById("deptName").value = deptObj.deptName;            document.getElementById("loc").value = deptObj.loc;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON工具包创建-集合"><a href="#JSON工具包创建-集合" class="headerlink" title="JSON工具包创建(集合)"></a>JSON工具包创建(集合)</h3><p>Servlet</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 1.得到一个用户类型的对象</span>        Dept dept01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"浙江省 金华市 金东区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"河南省 开封市 杞县"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"台湾 台东县 延平乡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dept dept04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token string">"海南省 三沙市 南沙群岛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.将用户对象放置到集合中</span>        List deptList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept01<span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept02<span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept03<span class="token punctuation">)</span><span class="token punctuation">;</span>        deptList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept04<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过json工具包中的工具类将集合内容转换成JSON数组格式字符串</span>        JSONArray jsonArray <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>deptList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.将JS0N数组格式字符串添加请求作用域对象</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> jsonArray<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index_03.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP</p><pre class="line-numbers language-jsp"><code class="language-jsp">        function init() {            var jsonArray = ${requestScope.key};            var one = document.getElementById("one");            for (var i = 0; i < jsonArray.length; i++) {                var jsonobj = jsonArray[i];                var trDom = document.createElement("tr");                var tdDom01 = document.createElement("td");                var tdDom02 = document.createElement("td");                var tdDom03 = document.createElement("td");                tdDom01.innerHTML = jsonobj.deptNo;                tdDom02.innerHTML = jsonobj.deptName;                tdDom03.innerHTML = jsonobj.loc;                trDom.appendChild(tdDom01);                trDom.appendChild(tdDom02);                trDom.appendChild(tdDom03);                one.appendChild(trDom);            }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EL表达式&quot;&gt;&lt;a href=&quot;#EL表达式&quot; class=&quot;headerlink&quot; title=&quot;EL表达式&quot;&gt;&lt;/a&gt;EL表达式&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="JavaEE" scheme="https://xrebirth.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JSP(03)</title>
    <link href="https://xrebirth.github.io/posts/382adfc6.html"/>
    <id>https://xrebirth.github.io/posts/382adfc6.html</id>
    <published>2021-11-16T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="JSP规范介绍"><a href="#JSP规范介绍" class="headerlink" title="JSP规范介绍"></a>JSP规范介绍</h2><ul><li>来自于JAVAEE规范中一种。</li><li>JSP规范制定了如何开发JSP文件代替响应对象将处理结果写入到响应体的开发流程。</li><li>JSP规范制定了Http服务器应该如何调用管理JSP文件。</li></ul><h2 id="响应对象存在弊端"><a href="#响应对象存在弊端" class="headerlink" title="响应对象存在弊端"></a>响应对象存在弊端</h2><ul><li>适合将数据量较少的处理结果写入到响应体。</li><li>如果处理结果数量过多，使用响应对象增加开发难度。</li></ul><h2 id="JSP文件优势"><a href="#JSP文件优势" class="headerlink" title="JSP文件优势"></a>JSP文件优势</h2><ul><li>JSP文件在互联网通信过程，是响应对象替代品。</li><li>降低将处理结果写入到响应体的开发工作量降低处理结果维护难度。</li><li>在JSP文件开发时，可以直接将处理结果写入到JSP文件不需要手写out.print()命令，在Http服务器调用JSP文件时，根据JSP规范要求自动的将JSP文件书写的所有内容通过输出流写入到响应体。</li></ul><h2 id="HTML文件与JSP文件区别"><a href="#HTML文件与JSP文件区别" class="headerlink" title="HTML文件与JSP文件区别"></a>HTML文件与JSP文件区别</h2><ul><li><p>作为资源文件类型不同</p><ol><li>HTML文件属于静态资源文件，其相关命令需要在浏览器编译并执行的。</li><li>JSP文件属于动态资源文件，其相关命令需要在服务端编译并执行的。</li></ol></li><li><p>调用形式不同</p><ol><li>如果浏览器访问HTML文件，此时Http服务器直接通过一个输出流。</li><li>将HTML文件中所有的内容写入到响应体。</li><li>如果浏览器访问JSP文件。此时Http服务器根据JSP规范来操作JSP文件编辑—-&gt;编译—–&gt;调用。</li></ol></li></ul><h2 id="JSP文件运算原理"><a href="#JSP文件运算原理" class="headerlink" title="JSP文件运算原理"></a>JSP文件运算原理</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2028%3A%E6%97%A5%2010%3A%E6%97%B6%2031%3A%E5%88%86JSP%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="JSP运行原理"></p><ol><li>Http服务器将JSP文件内容【编辑】为一个Servlet接口实现类（.java）</li><li>Http服务器将Servlet接口实现类【编译】为class文件(.class)</li><li>Http服务器通过Servlet实例对象调用_jspService方法，将jsp文件内容写入到响应体</li><li>Http服务器负责创建这个class的实例对象，这个实例对象就是Servlet实例对象</li></ol><p>JSP实现类存放位置：<br>C:\Users[登录windows系统用户角色名]\AppData\Local\JetBrains\IntelliJIdea[idea版本号]\tomcat[网站工作空间]\work\Catalina\localhost[网站别名]\org\apache\jsp</p><h2 id="JSP隐含对象"><a href="#JSP隐含对象" class="headerlink" title="JSP隐含对象"></a>JSP隐含对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>容器自动创建，在JSP文件中可以直接使用的对象。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>JSP预先创建的这些对象可以简化对HTTP请求、响应信息的访问。</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2028%3A%E6%97%A5%2010%3A%E6%97%B6%2053%3A%E5%88%86JSP%E9%9A%90%E5%90%AB%E5%AF%B9%E8%B1%A1.png" alt="JSP隐含对象"></p><table><thead><tr><th align="center">隐含对象</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">request</td><td align="center">HttpServletRequest</td><td align="center">请求对象</td></tr><tr><td align="center">response</td><td align="center">HttpServletResponse</td><td align="center">响应对象</td></tr><tr><td align="center">out</td><td align="center">JSPWrite</td><td align="center">输出流对象</td></tr><tr><td align="center">session</td><td align="center">HttpSession</td><td align="center">会话作用域对象</td></tr><tr><td align="center">application</td><td align="center">ServletContext</td><td align="center">全局作用域对象</td></tr><tr><td align="center">pagecontext</td><td align="center">PageContext</td><td align="center">JSP页面上下文</td></tr><tr><td align="center">page</td><td align="center">Object</td><td align="center">JSP页面本身</td></tr><tr><td align="center">config</td><td align="center">Servletcontig</td><td align="center">Servlet配置对象</td></tr><tr><td align="center">exception</td><td align="center">Throwable</td><td align="center">异常对象</td></tr></tbody></table><h2 id="HttpJspBase类"><a href="#HttpJspBase类" class="headerlink" title="HttpJspBase类"></a>HttpJspBase类</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2011%3A%E6%9C%88%2028%3A%E6%97%A5%2010%3A%E6%97%B6%2037%3A%E5%88%86HttpJspBase.jpg" alt="HttpJspBase继承关系"></p><ul><li>Tomcat将JSP文件编辑后生成的Java文件，继承与HttpJspBase。通过Apache官方文档查看，其身份是HttpServlet的子类。所以Tomcat将JSP编辑为的文件为一个Servlet接口实现类。</li></ul><h2 id="jspService方法"><a href="#jspService方法" class="headerlink" title="_jspService方法"></a>_jspService方法</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>当一个JSP文件被访问时，Tomcat调用的并不是当前JSP文件。而是JSP文件对应的Servlet接口实现类中_jspService方法。_jspService方法负责将开发人员在JSP文件书写的所有内容写入到响应体中。</p><h3 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h3><ul><li>判断当前请求方式。Jsp文件可以接收的请求方式有POST,GET,HEAD</li><li>声明局部变量。这些局部变量都可以在JSP文件开发时直接使用</li><li>输出部分。这部分执行时将JSP文件内容通过输出流写入到响应体</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token keyword">final</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse response<span class="token punctuation">)</span>      <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherType<span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getDispatcherType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String _jspx_method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Allow"</span><span class="token punctuation">,</span><span class="token string">"GET, HEAD, POST, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>_jspx_method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Allow"</span><span class="token punctuation">,</span><span class="token string">"GET, HEAD, POST, OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_METHOD_NOT_ALLOWED<span class="token punctuation">,</span> <span class="token string">"JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// JSP输出内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h2><h3 id="执行标记"><a href="#执行标记" class="headerlink" title="执行标记"></a>执行标记</h3><h4 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h4><pre class="line-numbers language-jsp"><code class="language-jsp">    <% int a  =10;  %> 声明局部变量    <% boolean flag = 30 >= 40; %>  Java中表达式(数学表达式，关系表达式，逻辑表达式)    <%        if(判断条件){        }else{        }        while(){        }        // 书写控制语句    %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命令作用："><a href="#命令作用：" class="headerlink" title="命令作用："></a>命令作用：</h4><ul><li>通知Http服务器将JSP文件中Java命令与其他普通执行结果进行区分。</li></ul><h3 id="输出标记"><a href="#输出标记" class="headerlink" title="输出标记"></a>输出标记</h3><h4 id="命令格式：-1"><a href="#命令格式：-1" class="headerlink" title="命令格式："></a>命令格式：</h4><pre class="line-numbers language-jsp"><code class="language-jsp"><%=java的变量名%><%=java的表达式%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="命令作用：-1"><a href="#命令作用：-1" class="headerlink" title="命令作用："></a>命令作用：</h4><ul><li>通知Tomcat将输出标记中【变量的值】或则输出标记中【表达式运算结果】写入到响应体。</li></ul><h2 id="Servlet数据共享给JSP常用方法"><a href="#Servlet数据共享给JSP常用方法" class="headerlink" title="Servlet数据共享给JSP常用方法"></a>Servlet数据共享给JSP常用方法</h2><ul><li>JSP文件被访问时，并不是JSP文件在执行。而是对应的Servlet在执行。</li><li>自定义Serlvet接口实现类与JSP文件之间调用关系，等同于两个Servlet之间调用关系。</li><li>自定义Servelt接口实现类与JSP文件之间可以通过重定向方案或则请求转发方案进行调用考虑到运行效率问题，一般采用【请求转发】。</li><li>自定义Servlet接口实现类可以通过请求作用域对象将共享数据交给JSP来输出到响应体。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h1&gt;&lt;h2 id=&quot;JSP规范介绍&quot;&gt;&lt;a href=&quot;#JSP规范介绍&quot; class=&quot;headerlink&quot; title=&quot;JSP规范介绍</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="JavaEE" scheme="https://xrebirth.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>Http网络协议(01)</title>
    <link href="https://xrebirth.github.io/posts/de9cd0ed.html"/>
    <id>https://xrebirth.github.io/posts/de9cd0ed.html</id>
    <published>2021-11-04T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http网络协议"><a href="#Http网络协议" class="headerlink" title="Http网络协议"></a>Http网络协议</h1><h2 id="网络协议包"><a href="#网络协议包" class="headerlink" title="网络协议包"></a>网络协议包</h2><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><p>​    在网络中传递信息都是以【二进制】形式存在的。接收方【浏览器/服务器】在接收信息后，要做第一件事就是将【二进制数据】进行编译【文字，图片，视频，命令】由于传递信息数据量往往比较巨大，导致接收方很难在一组连续二进制得到对应数据比如：浏览器发送一个请求： <a href="http://192.168.100.2:8080/index.html%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E4%BB%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%BD%A2%E5%BC%8F%E5%8F%91%E9%80%81">http://192.168.100.2:8080/index.html这个请求信息以二进制形式发送</a> 01010101010110101010101101010，Http服务器很难从二进制数据得到相关信息。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>网络协议包一组有规律二进制数据，在这组数据存在了固定空间每一个空间专门存放特定信息，这样接收方在接收网络协议包之后就可以到固定空间得到对应信息，网络协议包出现极大降低了接收方对接收二进制数据编译难度。</p><p>例如：【0000（ip地址）0000（端口号）0000（资源文件名）0000】</p><h2 id="常见网络协议"><a href="#常见网络协议" class="headerlink" title="常见网络协议"></a>常见网络协议</h2><ol><li><p>FTP网络协议包</p></li><li><p>Http网络协议包</p></li></ol><h3 id="Http网络协议包："><a href="#Http网络协议包：" class="headerlink" title="Http网络协议包："></a>Http网络协议包：</h3><p>在基于C/S结构下互联网通信过程中，所有在网络中传递信息都是保存在Http网络协议包。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/CS%E6%9E%B6%E6%9E%84%E7%BD%91%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Http网络协议包"></p><h3 id="网络协议包分类："><a href="#网络协议包分类：" class="headerlink" title="网络协议包分类："></a>网络协议包分类：</h3><h4 id="Http请求协议包"><a href="#Http请求协议包" class="headerlink" title="Http请求协议包"></a>Http请求协议包</h4><p>在浏览器准备发送请求时，负责创建一个Http请求协议包，浏览器将请求信息以二进制形式保存在Http请求协议包各个空间，由浏览器负责将Http请求协议包推送到指定服务端计算机。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Http%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE%E5%8C%85%E7%BB%93%E6%9E%84.png" alt="Http请求协议包"></p><h5 id="Http请求协议包内部结构"><a href="#Http请求协议包内部结构" class="headerlink" title="Http请求协议包内部结构"></a>Http请求协议包内部结构</h5><ol><li><p>按照自上而下划分，分为4个空间</p></li><li><p>空间划分：</p><pre class="line-numbers language-http内部空间"><code class="language-http内部空间">              请求行：[                    url:请求地址（http://192.168.100.2:8080/index.html）                    method:请求方式（POST/GET）                 ]                请求头：[                              请求参数信息【GET】                 ]                空白行：[                        没有任何内容，起到隔离作用                 ]                 请求体:[                               请求参数信息【POST】                  ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="Post与Get区别："><a href="#Post与Get区别：" class="headerlink" title="Post与Get区别："></a>Post与Get区别：</h5><ul><li><p>在浏览器回退的时候，GET请求不会重新发送，而POST请求会重新发送。</p></li><li><p>GET 请求会被浏览器主动缓存，而POST不会。</p></li><li><p>GET 的请求参数直接暴露在URL中，相对不隐私、不安全。POST请求的参数放在请求体中，相对隐私、安全。</p></li><li><p>GET 的请求参数会被保存到浏览器的历史记录中，POST 不会。</p></li><li><p>GET 请求参数有大小限制，一般 2KB 左右。POST 理论上没有传递参数没有大小限制，有些后端服务及会有一个大小限制，比如 Tomcat 的大小限制为 2M。</p></li></ul><h4 id="Http响应协议包"><a href="#Http响应协议包" class="headerlink" title="Http响应协议包"></a>Http响应协议包</h4><p>Http服务器在定位到被访问的资源文件之后。负责创建一个Http响应协议包，Http服务器将定位文件内容或则文件命令以二进制形式写入到Http响应协议包各个空间，由Http服务器负责将Http响应协议包推送回发起请求的浏览器上。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Http%E5%93%8D%E5%BA%94%E5%8D%8F%E8%AE%AE%E5%8C%85%E7%BB%93%E6%9E%84.png" alt="Http响应协议包"></p><h5 id="Http响应协议包内部结构"><a href="#Http响应协议包内部结构" class="headerlink" title="Http响应协议包内部结构"></a>Http响应协议包内部结构</h5><ol><li><p>按照自上而下划分，分为4个空间</p></li><li><p>空间划分：</p><pre class="line-numbers language-http内部空间"><code class="language-http内部空间">                    状态行：[                          Http状态码                      ]                     响应头：[                          content-type: 指定浏览器采用对应编译器                          对响应体二进制数据进行解析                      ]                     空白行：[                          没有任何内容，起到隔离作用                      ]                     响应体：[                         可能被访问静态资源文件内容                         可能被访问的静态资源文件命令                         可能被访问的动态资源文件运行结果                          *****都是以二进制形式***                      ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Http网络协议&quot;&gt;&lt;a href=&quot;#Http网络协议&quot; class=&quot;headerlink&quot; title=&quot;Http网络协议&quot;&gt;&lt;/a&gt;Http网络协议&lt;/h1&gt;&lt;h2 id=&quot;网络协议包&quot;&gt;&lt;a href=&quot;#网络协议包&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="JavaEE" scheme="https://xrebirth.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>Servlet(02)</title>
    <link href="https://xrebirth.github.io/posts/ff2de692.html"/>
    <id>https://xrebirth.github.io/posts/ff2de692.html</id>
    <published>2021-11-04T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="初识Servlet"><a href="#初识Servlet" class="headerlink" title="初识Servlet"></a>初识Servlet</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>Servlet 是 JavaEE 规范之一。 规范就是接口</li><li>Servlet 就 JavaWeb 三大组件之一。 三大组件分别是： Servlet 程序、 Filter 过滤器、 Listener 监听</li><li>Servlet 是运行在服务器上的一个 java 小程序， 它可以接收客户端发送过来的请求， 并响应数据给客户端。 </li></ol><h3 id="Servlet规范"><a href="#Servlet规范" class="headerlink" title="Servlet规范"></a>Servlet规范</h3><ul><li>作用：<ol><li>在Servlet规范中，指定【动态资源文件】开发步骤。</li><li>在Servlet规范中，指定Http服务器调用动态资源文件规则。</li><li>在Servlet规范中，指定Http服务器管理动态资源文件实例对象规则。</li></ol></li></ul><h2 id="Servlet基本使用"><a href="#Servlet基本使用" class="headerlink" title="Servlet基本使用"></a>Servlet基本使用</h2><ol><li><p>Servlet接口实现类</p><ul><li><p>Tomcat服务器下lib文件下有一个servlet-api.jar存放的Servlet接口(javax.servlet.Servlet接口)</p></li><li><p>Servlet规范中任务，Http服务器能调用的【动态资源文件】必须是一个Servlet接口实现类</p><p>  例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不是动态文件，Tomcat无权调用</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Tearcher</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 合法动态文件，Tomcat可以调用</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>将Servlet接口实现类信息【注册】到Tomcat服务器</p><p> 【网站】–&gt;【web】–&gt;【WEB-INF】—&gt;web.xml</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>将servlet接口实现类类路径地址交给Tomcat<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>ServletTest01<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>lesson01<span class="token punctuation">.</span>ServletTest01<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>为servlet接口实现类提供一个简短的别名<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>ServletTest01<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span>Test01<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在浏览器向Tomcat索要ServletTest01时的地址：</p><p> <a href="http://localhost:8080/ServletTest01/Test01">http://localhost:8080/ServletTest01/Test01</a></p></li></ol><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ol><li><p>网站中所有的Servlet接口实现类的实例对象，只能由Http服务器负责创建，开发人员不能手动创建Servlet接口实现类的实例对象。</p></li><li><p>在默认的情况下，Http服务器接收到对于当前Servlet接口实现类第一次请求时自动创建这个Servlet接口实现类的实例对象，在手动配置情况下，要求Http服务器在启动时自动创建某个Servlet接口实现类的实例对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>ServletTest03<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明一个变量存储servlet接口实现类类路径<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>lesson01<span class="token punctuation">.</span>ServletTest03<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>以上填写一个大于<span class="token number">0</span>的整数即可<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Http服务器运行期间，一个Servlet接口实现类只能被创建出一个实例对象</p></li><li><p>在Http服务器关闭时刻，自动将网站中所有的Servlet对象进行销毁</p></li></ol><h3 id="HttpServletResponse接口-响应对象"><a href="#HttpServletResponse接口-响应对象" class="headerlink" title="HttpServletResponse接口(响应对象)"></a>HttpServletResponse接口(响应对象)</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li>HttpServletResponse接口来自于Servlet规范中，在Tomcat中存在servlet-api.jar。</li><li>HttpServletResponse接口实现类由Http服务器负责提供。</li><li>HttpServletResponse接口负责将doGet/doPost方法执行结果写入到【响应体】交给浏览器。</li><li>开发人员习惯于将HttpServletResponse接口修饰的对象称为【响应对象】。</li></ul><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ol><li>将执行结果以二进制形式写入到【响应体】</li><li>设置响应头中[content-type]属性值，从而控制浏览器使用对应编译器将响应体二进制数据编译为【文字，图片，视频，命令】。</li><li>设置响应头中【location】属性，将一个请求地址赋值给location，从而控制浏览器向指定服务器发送请求。</li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>getWriter();    获取Tomcat服务器输出流对象(返回PrintWriter对象)</li><li>sendRedirect()：在响应体中添加请求地址</li><li>setContentType()：在响应体中针对相应输出数据指定浏览器采用正确格式输出，及编码格式</li><li>write()方法：通过Tomcat服务器输出流对象为响应体输出二进制数据<br> 注意：一般返回【字符】、【字符串】、【ASCII码】</li><li>print()方法：通过Tomcat服务器输出流对象为响应体输出二进制数据<br> 注意：print方法可以输出任何数据且不会转变成ASCII码，所以大多数使用print方法</li></ol><h3 id="HttpServletRequest接口-请求对象"><a href="#HttpServletRequest接口-请求对象" class="headerlink" title="HttpServletRequest接口(请求对象)"></a>HttpServletRequest接口(请求对象)</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><ul><li>HttpServletRequest接口来自于Servlet规范中，在Tomcat中存在servlet-api.jar。</li><li>HttpServletRequest接口实现类由Http服务器负责提供。</li><li>HttpServletRequest接口负责在doGet/doPost方法运行时读取Http请求协议包中信息。</li><li>HttpServletRequest接口实现了service方法，此方法可以处理get/post请求。</li><li>开发人员习惯于将HttpServletRequest接口修饰的对象称为【请求对象】。</li></ul><h4 id="主要功能-1"><a href="#主要功能-1" class="headerlink" title="主要功能"></a>主要功能</h4><ol><li>可以读取Http请求协议包中【请求行】信息</li><li>可以读取保存在Http请求协议包中【请求头】或则【请求体】中请求参数信息</li><li>可以代替浏览器向Http服务器申请资源文件调用</li></ol><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>getRequestURL()：获取【请求行】中【url】信息</li><li>getMethod()：获取【请求行】中【method】(请求方式)信息</li><li>getRequestURI()：获取【请求行】中uri信息</li><li>setCharacterEncoding：修改请求字符集编码格式</li></ol><blockquote><p>URI：</p><ul><li>资源文件精准定位地址，在请求行中并没有URI这个属性</li><li>实际上是截取的URL中的字符串，这个字符串格式：“/网站名/资源文件名”</li><li>URI用于HTTP服务器对访问的资源文件进行定位</li></ul></blockquote><ol start="4"><li><p>getParameterNames()：获取请求参数名称</p></li><li><p>getParameter()：获取请求参数值</p></li></ol><h3 id="请求对象与响应对象的生命周期"><a href="#请求对象与响应对象的生命周期" class="headerlink" title="请求对象与响应对象的生命周期"></a>请求对象与响应对象的生命周期</h3><p>1.在Http服务器接收到浏览器发送的【Http请求协议包】之后，自动为当前的【Http请求协议包】生成一个【请求对象】和一个【响应对象】。</p><p>2.在Http服务器调用doGet/doPost方法时，负责将【请求对象】和【响应对象】作为实参传递到方法，确保doGet/doPost正确执行。</p><p>3.在Http服务器准备推送Http响应协议包之前，负责将本次请求关联的【请求对象】和【响应对象】销毁。</p><blockquote><p>【请求对象】和【响应对象】生命周期贯穿一次请求的处理过程中【请求对象】和【响应对象】相当于用户在服务端的代言人。</p></blockquote><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="请求对象与响应对象的生命周期"></p><h3 id="欢迎资源文件"><a href="#欢迎资源文件" class="headerlink" title="欢迎资源文件"></a>欢迎资源文件</h3><h4 id="引例："><a href="#引例：" class="headerlink" title="引例："></a>引例：</h4><p>用户发送了一个针对某个网站的【默认请求】时，此时由Http服务器自动从当前网站返回的资源文件。</p><p>例：正常请求(网址)：<a href="https://www.baidu.com:80/index.html">https://www.baidu.com:80/index.html</a><br>        常用请求(网址)：<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><h4 id="Tomcat对于默认欢迎资源文件规则："><a href="#Tomcat对于默认欢迎资源文件规则：" class="headerlink" title="Tomcat对于默认欢迎资源文件规则："></a>Tomcat对于默认欢迎资源文件规则：</h4><ol><li><p>规则位置：Tomcat安装位置/conf/web.xml</p></li><li><p>规则命令：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="设置当前网站的默认欢迎资源文件规则"><a href="#设置当前网站的默认欢迎资源文件规则" class="headerlink" title="设置当前网站的默认欢迎资源文件规则"></a>设置当前网站的默认欢迎资源文件规则</h4><ol><li><p>规则位置：网站/web/WEB-INF/web.xml</p></li><li><p>规则命令：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>login.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>注意</strong>：网站设置自定义默认文件定位规则，此时Tomcat自带定位规则将失效.</p><h4 id="欢迎资源文件运行步骤："><a href="#欢迎资源文件运行步骤：" class="headerlink" title="欢迎资源文件运行步骤："></a>欢迎资源文件运行步骤：</h4><ol><li>Tomcat服务器自上而下查找第一行的资源文件是否存在，如存在则返回。</li><li>如不存在则查找第二个文件，如果第二个不存在则查找下条，直到将配置的资源文件查找完毕。</li><li>如查找完毕都找不到，则Tomcat返回404。</li></ol><h3 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><ol><li>由100—599三位数字组成的一个一串数字为状态码。</li><li>Http服务器在推送响应包之前，根据本次请求处理情况，将Http状态码写入到响应包中【状态行】上。</li><li>如果Http服务器针对本次请求，返回了对应的资源文件，通过Http状态码通知浏览器应该如何处理这个结果。</li><li>如果Http服务器针对本次请求，无法返回对应的资源文件，通过Http状态码向浏览器解释不能提供服务的原因。</li></ol><h4 id="分类-以下为常见状态码"><a href="#分类-以下为常见状态码" class="headerlink" title="分类(以下为常见状态码)"></a>分类(以下为常见状态码)</h4><h5 id="1XX："><a href="#1XX：" class="headerlink" title="1XX："></a>1XX：</h5><p>100：通知浏览器本次返回的资源文件，并不是一个独立的资源文件，需要浏览器在接收响应包之后，继续向Http服务器所要依赖的其他资源文件。</p><h5 id="2XX："><a href="#2XX：" class="headerlink" title="2XX："></a>2XX：</h5><p>200：通知浏览器本次返回的资源文件是一个完整独立资源文件，浏览器在接收到之后不需要所要其他关联文件。</p><h5 id="3XX："><a href="#3XX：" class="headerlink" title="3XX："></a>3XX：</h5><p>302：通知浏览器本次返回的不是一个资源文件内容而是一个资源文件地址，需要浏览器根据这个地址自动发起请求来索要这个资源文件。</p><p>例：response.sendRedirect(“资源文件地址”)写入到响应头中<br>以上行为会让Tomcat服务器将302状态码写入到状态行。</p><h5 id="4XX："><a href="#4XX：" class="headerlink" title="4XX："></a>4XX：</h5><p>404：通知浏览器，由于在服务端没有定位到被访问的资源文件，因此无法提供帮助。</p><p>405：通知浏览器，在服务端已经定位到被访问的资源文件（Servlet），但是这个Servlet对于浏览器采用的请求方式不能处理。</p><p>例如：浏览器是以get方式请求的，而服务器端只写了一个post方式接受请求，就会返回405。</p><h5 id="5XX："><a href="#5XX：" class="headerlink" title="5XX："></a>5XX：</h5><p> 500：通知浏览器，在服务端已经定位到被访问的资源文件（Servlet），这个Servlet可以接收浏览器采用请求方式，但是Servlet在处理请求期间，由于Java异常导致处理失败。</p><h3 id="Servlet之间调用"><a href="#Servlet之间调用" class="headerlink" title="Servlet之间调用"></a>Servlet之间调用</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>某些来自于浏览器发送请求，往往需要服务端中多个Servlet协同处理。但是浏览器一次只能访问一个Servlet，导致用户需要手动通过浏览器发起多次请求才能得到服务。这样增加用户获得服务难度，导致用户放弃访问当前网站。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>无论本次请求涉及到多少个Servlet,用户只需要【手动】通知浏览器发起一次请求即可。</p><h4 id="重定向解决方案"><a href="#重定向解决方案" class="headerlink" title="重定向解决方案"></a>重定向解决方案</h4><h5 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h5><p>服务器端：</p><p>用户第一次通过【手动方式】通知浏览器访问第一个Servlet动态文件。当第一个Servlet工作完毕后，将第二个Servlet地址写入到响应头location属性中，导致Tomcat将302状态码写入到状态行。</p><p>浏览器端：</p><p>在浏览器接收到响应包之后，会读取到302状态。此时浏览器自动根据响应头中location属性地址发起第二次请求，访问第二个Servlet去完成请求中剩余任务。</p><h5 id="实现命令"><a href="#实现命令" class="headerlink" title="实现命令:"></a>实现命令:</h5><ul><li>以上命令是将地址写入到响应包中响应头中location属性中。</li></ul><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h5><p>请求地址</p><p>既可以把当前网站内部的资源文件地址发送给浏览器 （/网站名/资源文件名）也可以把其他网站资源文件地址发送给浏览器(<a href="http://ip地址:端口号/网站名/资源文件名)。">http://ip地址:端口号/网站名/资源文件名)。</a></p><p>请求次数</p><p>浏览器至少发送两次请求，但是只有第一次请求是用户手动发送。后续请求都是浏览器自动发送的。</p><p>请求方式</p><p>重定向解决方案中，通过地址栏通知浏览器发起下一次请求，因此  通过重定向解决方案调用的资源文件接收的请求方式一定是【GET】。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>重定向解决方案需要在浏览器与服务器之间进行多次往返，大量时间消耗在往返次数上，增加用户等待服务时间。</p><h5 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h5><p>因为第二次的Servlet是通过第一个Servlet的响应头location属性发送到浏览器中的，所以当浏览器发送第二次Servlet时候是以网址发送，网址发送都是以Get方式发送请求。</p><h4 id="请求转发解决方案"><a href="#请求转发解决方案" class="headerlink" title="请求转发解决方案"></a>请求转发解决方案</h4><h5 id="工作原理：-1"><a href="#工作原理：-1" class="headerlink" title="工作原理："></a>工作原理：</h5><p>用户第一次通过手动方式要求浏览器访问第一个Servlet。当抵押给Servlet工作完毕后，通过当前的请求对象代替浏览器向Tomcat发送请求，申请调用第二个Servlet。Tomcat在接收到这个请求之后，自动调用第二个Servlet来完成剩余任务。</p><h5 id="实现命令："><a href="#实现命令：" class="headerlink" title="实现命令："></a>实现命令：</h5><ul><li>请求对象代替浏览器向Tomcat发送请求</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.通过当前请求对象生成资源文件申请报告对象</span>RequestDispatcher  report <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/资源文件名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>一定要以<span class="token string">"/"</span>为开头<span class="token comment" spellcheck="true">//2.将报告对象发送给Tomcat</span>report<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>当前请求对象，当前响应对象<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="特征：-1"><a href="#特征：-1" class="headerlink" title="特征："></a>特征：</h5><p>请求地址：<br>只能向Tomcat服务器申请调用当前网站下资源文件地址。</p><p>请求次数：</p><p>在请求转发过程中，浏览器只发送一次请求。</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li><p>无论本次请求涉及到多少个Servlet，用户只需要手动通过浏览器发送一次请求。</p></li><li><p>Servlet之间调用发生在服务端计算机上，节省服务端与浏览器之间往返次数增加处理服务速度。</p></li></ul><h5 id="请求方式：-1"><a href="#请求方式：-1" class="headerlink" title="请求方式："></a>请求方式：</h5><p>在请求转发过程中，浏览器只发送一个了个Http请求协议包。参与本次请求的所有Servlet共享同一个请求协议包，因此这些Servlet接收的请求方式与浏览器发送的请求方式保持一致。</p><h3 id="Servlet数据共享"><a href="#Servlet数据共享" class="headerlink" title="Servlet数据共享"></a>Servlet数据共享</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>当第一个Servlet工作完毕后，将产生的数据交给第二个Servlet来使用。这两者之间的数据传递称之为”数据共享。</p><h4 id="数据共享的方案："><a href="#数据共享的方案：" class="headerlink" title="数据共享的方案："></a>数据共享的方案：</h4><h5 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h5><h6 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h6><ul><li><p>来自于Servlet规范中一个接口。在Tomcat中存在servlet-api.jar，Tomcat服务器负责提供这个接口实现类。</p></li><li><p>如果两个Servlet来自于同一个网站。彼此之间通过网站的ServletContext实例对象实现数据共享。</p></li><li><p>开发人员习惯于将ServletContext对象称为【全局作用域对象】。</p></li></ul><h6 id="工作原理：-2"><a href="#工作原理：-2" class="headerlink" title="工作原理："></a>工作原理：</h6><p>每一个网站都存在一个全局作用域对象。 这个全局作用域对象【相当于】一个Map集合，在这个网站中第一个Servlet可以将一个数据存入到全局作用域对象，当前网站中其他Servlet此时都可以从全局作用域对象得到这个数据进行使用。</p><h6 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h6><ol><li>在Http服务器启动过程中，自动为当前网站在内存中创建一个全局作用域对象。</li><li>在Http服务器运行期间时，一个网站有且只有一个全局作用域对象。</li><li>在Http服务器运行期间，全局作用域对象一直处于存活状态。</li><li>在Http服务器准备关闭时，负责将当前网站中全局作用域对象进行销毁处理。</li></ol><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/ServletContext%E6%8E%A5%E5%8F%A3%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="ServletContext流程图"></p><p><strong>总结</strong>：全局作用域对象生命周期贯穿网站整个运行期间。</p><h6 id="命令实现："><a href="#命令实现：" class="headerlink" title="命令实现："></a>命令实现：</h6><pre class="line-numbers language-java"><code class="language-java"> OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.通过【请求对象】向Tomcat索要当前网站中【全局作用域对象】</span>        ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：一般全局作用域对象名为：application</span>        <span class="token comment" spellcheck="true">//2.将数据添加到全局作用域对象作为【共享数据】</span>        application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>TwoServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.通过【请求对象】向Tomcat索要当前网站中【全局作用域对象】</span>        ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.从全局作用域对象得到指定关键字对应数据</span>        Object 数据 <span class="token operator">=</span>  application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Cookie类"><a href="#Cookie类" class="headerlink" title="Cookie类"></a>Cookie类</h5><h6 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h6><ul><li>Cookie来自于Servlet规范中一个工具类，存在于Tomcat提供servlet-api.jar中。</li><li>如果两个Servlet来自于同一个网站，并且为同一个浏览器/用户提供服务，此时借助于Cookie对象进行数据共享。</li><li>Cookie存放当前用户的私人数据，在共享数据过程中提高对用户的服务质量。</li><li> 在现实生活场景中，Cookie相当于用户在服务端得到【会员卡】</li></ul><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ol><li>cookie相当于一个map集合，但是这个键值对的key与value只能是String。</li><li>键值对中key不能是中文。</li></ol><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><ol><li><p>用户通过浏览器第一次向这个网站发送请求申请Servlet。 Servlet在运行期间创建一个Cookie存储与当前用户相关数据，Servlet工作完毕后，【将Cookie写入到响应头】交还给当前浏览器，浏览器收到响应响应包之后，将cookie存储在浏览器的缓存。</p></li><li><p>一段时间之后，用户通过【同一个浏览器】再次向【myWeb网站】发送请求申请TwoServlet时。【浏览器需要无条件的将myWeb网站之前推送过来的Cookie，写入到请求头】发送过去，此时第二个Servlet在运行时，就可以通过读取请求头中cookie中信息，得到第一个Servlet提供的共享数据。</p></li></ol><h6 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h6><ol><li><p>在默认情况下，Cookie对象存放在浏览器的缓存中。因此只要浏览器关闭，Cookie对象就被销毁掉</p></li><li><p>在手动设置情况下，可以要求浏览器将接收的Cookie存放在客户端计算机上硬盘上，同时需要指定Cookie<br> 在硬盘上存活时间。在存活时间范围内，关闭浏览器关闭客户端计算机，关闭服务器，都不会导致Cookie被销毁。在存活时间到达时，Cookie自动从硬盘上被删除。</p><pre class="line-numbers language-java"><code class="language-java">cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//cookie在硬盘上存活time分钟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/Cooking%E6%B5%81%E7%A8%8B%E5%9B%BE3.jpg" alt="Cooking流程图"></p></li></ol><h6 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h6><p>例：同一个网站 OneServlet 与  TwoServlet 借助于Cookie实现数据共享</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一个Servlet</span>OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个cookie对象，保存共享数据（当前用户数据）</span>        Cookie card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie card1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"efg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.【发卡】将cookie写入到响应头，交给浏览器</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>card1<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>card2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*浏览器/用户    &lt;---    响应包,状态码：【200】                    【cookie: key1=abc; key2=eft】浏览器向网站发送请求访问TwoServlet ---> 请求包 【url:/myWeb/two method:get】                                      请求参数：xxxx                                      Cookie   key1=abc;key2=efg*/</span><span class="token comment" spellcheck="true">// 第二个Servlet     </span>TwoServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse resp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.调用请求对象从请求头得到浏览器返回的Cookie</span>        Cookie  cookieArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.循环遍历数据得到每一个cookie的key 与 value</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie card<span class="token operator">:</span>cookieArray<span class="token punctuation">)</span><span class="token punctuation">{</span>            String key <span class="token operator">=</span>   card<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 读取key  <span class="token string">"key1"</span>            String value <span class="token operator">=</span> card<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取value <span class="token string">"abc"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HttpSession接口"><a href="#HttpSession接口" class="headerlink" title="HttpSession接口"></a>HttpSession接口</h5><h6 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h6><ul><li>HttpSession接口来自于Servlet规范下一个接口。存在于Tomcat中servlet-api.jar，其实现类由Http服务器提供，Tomcat提供实现类存在于servlet-api.jar。</li><li>如果两个Servlet来自于同一个网站，并且为同一个浏览器/用户提供服务，此时 借助于HttpSession对象进行数据共享。</li><li>开发人员习惯于将HttpSession接口修饰对象称为【会话作用域对象】</li></ul><h6 id="HttpSession-与-Cookie-区别：【面试题】"><a href="#HttpSession-与-Cookie-区别：【面试题】" class="headerlink" title="HttpSession 与  Cookie 区别：【面试题】"></a>HttpSession 与  Cookie 区别：【面试题】</h6><ol><li>存储位置：<ul><li> Cookie：存放在客户端计算机（浏览器内存/硬盘）。</li><li>HttpSession：存放在服务端计算机内存。</li></ul></li><li>数据类型：<ul><li>Cookie对象存储共享数据类型只能是String。</li><li>HttpSession对象可以存储任意类型的共享数据Object。</li></ul></li><li>数据数量：<ul><li>一个Cookie对象只能存储一个共享数据。</li><li>HttpSession使用map集合存储共享数据，所以可以存储任意数量共享数据。</li></ul></li><li>参照物：<ul><li> Cookie相当于客户在服务端【会员卡】</li><li>HttpSession相当于客户在服务端【私人保险柜】</li></ul></li></ol><h6 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h6><ol><li><p>用户与HttpSession关联时使用的Cookie只能存放在浏览器缓存中，在浏览器关闭时，意味着用户与他的HttpSession关系被切断。</p></li><li><p>由于Tomcat无法检测浏览器何时关闭，因此在浏览器关闭时并不会导致Tomcat将浏览器关联的HttpSession进行销毁。<br> 为了解决这个问题，Tomcat为每一个HttpSession对象设置【空闲时间】这个空闲时间默认30分钟，如果当前HttpSession对象空闲时间达到30分钟，此时Tomcat认为用户已经放弃了自己的HttpSession，此时Tomcat就会销毁掉这个HttpSession。</p></li><li><p>HttpSession空闲时间手动设置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--当前网站/web/WEB-INF/web.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>minute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--当前网站中每一个session最大空闲时间minute分钟--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h6><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%253A%25E5%25B9%25B4%252011%253A%25E6%259C%2588%252015%253A%25E6%2597%25A5%252015%253A%25E6%2597%25B6%252049%253A%25E5%2588%2586Tomcate%25E6%2595%25B0%25E6%258D%25AE%25E5%2585%25B1%25E4%25BA%25AB%25E6%25B5%2581%25E7%25A8%258B%25E5%259B%25BE-HttpSession%25E5%25AE%259E%25E7%258E%25B0%25E5%258E%259F%25E7%2590%2586%25E5%259B%25BE.jpg" alt="Tomcate数据共享流程图-HttpSession实现原理图"></p><h6 id="命令实现-1"><a href="#命令实现-1" class="headerlink" title="命令实现"></a>命令实现</h6><p>例：同一个网站 OneServlet 与  TwoServlet 借助于Cookie实现数据共享</p><pre class="line-numbers language-java"><code class="language-java">OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.调用请求对象向Tomcat索要当前用户在服务端的私人储物柜</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.将数据添加到用户私人储物柜</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>共享数据<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 浏览器访问/myWeb中TwoServlet</span>TwoServlet<span class="token punctuation">{</span>                      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.调用请求对象向Tomcat索要当前用户在服务端的私人储物柜</span>    HttpSession   session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.从会话作用域对象得到OneServlet提供的共享数据</span>    Object 共享数据 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Http服务器将用户与HttpSession关联起来"><a href="#Http服务器将用户与HttpSession关联起来" class="headerlink" title="Http服务器将用户与HttpSession关联起来"></a>Http服务器将用户与HttpSession关联起来</h6><ol><li><p>getSession()<br> 如果当前用户在服务端已经拥有了自己的私人储物柜，要求tomcat将这个私人储物柜进行返回，如果当前用户在服务端尚未拥有自己的私人储物柜要求Tocmat为当前用户创建一个全新的私人储物柜。</p></li><li><p>getSession(false)<br> 如果当前用户在服务端已经拥有了自己的私人储物柜，要求tomcat将这个私人储物柜进行返回<br> 如果当前用户在服务端尚未拥有自己的私人储物柜，此时Tomcat将返回null。</p></li></ol><p><strong>总结</strong>：以上两种方法第一种更适合登陆成功使用，第二个则用户未登录成功使用。</p><h5 id="HttpServletRequest接口"><a href="#HttpServletRequest接口" class="headerlink" title="HttpServletRequest接口"></a>HttpServletRequest接口</h5><h6 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h6><ul><li><p>在同一个网站中，如果两个Servlet之间通过【请求转发】方式进行调用，彼此之间共享同一个请求协议包。而一个请求协议包只对应一个请求对象，因此servlet之间共享同一个请求对象，此时可以利用这个请求对象在两个Servlet之间实现数据共享。</p></li><li><p>在请求对象实现Servlet之间数据共享功能时，开发人员将请求对象称为【请求作用域对象】</p></li></ul><h6 id="命令实现-2"><a href="#命令实现-2" class="headerlink" title="命令实现"></a>命令实现</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// OneServlet通过请求转发申请调用TwoServlet时，需要给TwoServlet提供共享数据</span>OneServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.将数据添加到【请求作用域对象】中attribute属性</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据类型可以任意类型Object</span>        <span class="token comment" spellcheck="true">//2.向Tomcat申请使用请求转发方式调用TwoServlet</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/two"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>response<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>TwoServlet<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从当前请求对象得到OneServlet写入到共享数据</span>        Object 数据 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ol><li>当请求转发时，只有请求对象有请求作用域对象，而响应对象是没有作用域对象的。</li><li>在多个请求转发时，一般只有最后一个Servletv才会将最后的结果发送给浏览器。</li></ol><h3 id="监听器接口"><a href="#监听器接口" class="headerlink" title="监听器接口"></a>监听器接口</h3><h4 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h4><ul><li>一组来自于Servlet规范下接口，共有8个接口。在Tomcat存在servlet-api.jar包。</li><li>监听器接口需要由开发人员亲自实现，Http服务器提供jar包并没有对应的实现类。</li><li>监听器接口用于监控【作用域对象生命周期变化时刻】以及【作用域对象共享数据变化时刻】。</li></ul><h4 id="作用域对象"><a href="#作用域对象" class="headerlink" title="作用域对象"></a>作用域对象</h4><ul><li><p>在Servlet规范中，认为在服务端内存中可以在某些条件下为两个Servlet之间提供数据共享方案的对象，被称为【作用域对象】。</p></li><li><p>Servlet规范下作用域对象:</p><ol><li>ServletContext：全局作用域对象</li><li>HttpSession：会话作用域对象</li><li>HttpServletRequest：请求作用域对象</li></ol></li></ul><h4 id="监听器接口实现类开发规范"><a href="#监听器接口实现类开发规范" class="headerlink" title="监听器接口实现类开发规范"></a>监听器接口实现类开发规范</h4><ol><li>根据监听的实际情况，选择对应监听器接口进行实现。</li><li>重写监听器接口声明【监听事件处理方法】。</li><li>在web.xml文件将监听器接口实现类注册到Http服务器。</li></ol><h4 id="监听器接口-全局作用域接口"><a href="#监听器接口-全局作用域接口" class="headerlink" title="监听器接口(全局作用域接口)"></a>监听器接口(全局作用域接口)</h4><h5 id="ServletContextListener接口"><a href="#ServletContextListener接口" class="headerlink" title="ServletContextListener接口"></a>ServletContextListener接口</h5><h6 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h6><ul><li>通过这个接口合法的检测全局作用域对象被初始化时刻以及被销毁时刻。</li></ul><h6 id="监听事件处理方法"><a href="#监听事件处理方法" class="headerlink" title="监听事件处理方法"></a>监听事件处理方法</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> contextInitialized（） <span class="token comment" spellcheck="true">// 在全局作用域对象被Http服务器初始化被调用</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 在全局作用域对象被Http服务器销毁时候触发调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="ServletContextAttributeListener接口"><a href="#ServletContextAttributeListener接口" class="headerlink" title="ServletContextAttributeListener接口"></a>ServletContextAttributeListener接口</h5><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><ul><li>通过这个接口合法的检测全局作用域对象共享数据变化时刻。</li></ul><h6 id="监听事件处理方法-1"><a href="#监听事件处理方法-1" class="headerlink" title="监听事件处理方法"></a>监听事件处理方法</h6><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 在全局作用域对象添加共享数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 在全局作用域对象更新共享数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 在全局作用域对象删除共享数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="全局作用域对象共享数据变化时刻"><a href="#全局作用域对象共享数据变化时刻" class="headerlink" title="全局作用域对象共享数据变化时刻"></a>全局作用域对象共享数据变化时刻</h6><pre class="line-numbers language-java"><code class="language-java">ServletContext application <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取全局作用域对象</span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新增共享数据</span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新共享数据                 </span>application<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//删除共享数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤器接口-Filter"><a href="#过滤器接口-Filter" class="headerlink" title="过滤器接口(Filter)"></a>过滤器接口(Filter)</h3><h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><ul><li>来自于Servlet规范下接口，在Tomcat中存在于servlet-api.jar包。</li><li>Filter接口实现类由开发人员负责提供，Http服务器不负责提供。</li><li>Filter接口在Http服务器调用资源文件之前，对Http服务器进行拦截。</li></ul><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ol><li>拦截Http服务器，帮助Http服务器检测当前请求合法性。</li><li>拦截Http服务器，对当前请求进行增强操作。</li></ol><h4 id="Filter接口实现类开发步骤"><a href="#Filter接口实现类开发步骤" class="headerlink" title="Filter接口实现类开发步骤"></a>Filter接口实现类开发步骤</h4><ol><li>创建一个Java类实现Filter接口。</li><li>重写Filter接口中doFilter方法。</li><li>web.xml将过滤器接口实现类注册到Http服务器。</li></ol><h4 id="Filter拦截地址格式"><a href="#Filter拦截地址格式" class="headerlink" title="Filter拦截地址格式"></a>Filter拦截地址格式</h4><h5 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h5><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--1.将过滤器移交给Tomcat--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>filterName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>filter类文件地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2.调用何种资源文件时，需要被当前过滤器拦截--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>filterName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--调用这个资源文件时，过滤器进行拦截--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>将要拦截的资源文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="拦截的资源文件格式"><a href="#拦截的资源文件格式" class="headerlink" title="拦截的资源文件格式"></a>拦截的资源文件格式</h5><ul><li>在调用何种资源文件之前需要调用Filter过滤器进行拦截。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用某一个具体文件之前，来调用Filter拦截--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/imgs/photo.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用某一个文件夹下所有的资源文件之前，来调用Filter拦截--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/img/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用任意文件夹下某种类型文件之前，来调用Filter拦截--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--要求Tomcat在调用网站中任意文件时，来调用Filter拦截--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;初识Servlet&quot;&gt;&lt;a href=&quot;#初识Servlet&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="JavaEE" scheme="https://xrebirth.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JDBC学习笔记(01)</title>
    <link href="https://xrebirth.github.io/posts/27437e40.html"/>
    <id>https://xrebirth.github.io/posts/27437e40.html</id>
    <published>2021-10-30T16:00:00.000Z</published>
    <updated>2021-11-23T12:44:03.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始JDBC"><a href="#初始JDBC" class="headerlink" title="初始JDBC"></a>初始JDBC</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>Java DataBase Connectivity ：Java数据库连接，Java语言操作数据库。官方定义一套操作所有关系型数据库的规则，即接口，各数据库厂商去实现这套接口，提供数据库驱动jar包，可以使用接口编程，真正执行的代码时驱动jar包中的实现类。</p><h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><p>这里演示idea导入jar包：快捷键shift+alt+ctrl+s打开项目结构进行导入：</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/JDBCDemo%E2%80%94%E2%80%9401.png" alt="1"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/JDBCDemo%E2%80%94%E2%80%9402.png" alt="2"></p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/JDBCDemo%E2%80%94%E2%80%9403.png" alt="3"></p><h2 id="JDBC基本使用："><a href="#JDBC基本使用：" class="headerlink" title="JDBC基本使用："></a>JDBC基本使用：</h2><h3 id="DriverManager-驱动管理对象"><a href="#DriverManager-驱动管理对象" class="headerlink" title="DriverManager(驱动管理对象)"></a>DriverManager(驱动管理对象)</h3><p>驱动管理对象：告诉程序该使用哪一个品牌的数据库。(注册驱动)</p><ul><li>数据库连接</li></ul><pre class="line-numbers language-java"><code class="language-java">url<span class="token operator">:</span>指定连接的路径               #语法：jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ip地址（域名）<span class="token operator">:</span>端口号<span class="token operator">/</span>数据库名称               #例子：jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>tb_student               注意：如果连接的是本机mysql服务器，并且端口为<span class="token number">3306</span>，则url简写为：jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>数据库名称       user<span class="token operator">:</span>用户名       password：密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Connection-数据库连接对象"><a href="#Connection-数据库连接对象" class="headerlink" title="Connection(数据库连接对象)"></a>Connection(数据库连接对象)</h3><p>数据库连接对象：用于将数据连接上之后使用的对象。</p><h3 id="Statement-执行sql的对象"><a href="#Statement-执行sql的对象" class="headerlink" title="Statement(执行sql的对象)"></a>Statement(执行sql的对象)</h3><p>执行sql的对象</p><ul><li>boolean execute(String sql) #执行给定的 SQL 语句，该语句可能返回多个结果<br>  可以执行任意的sql，了解即可</li><li>int executeUpdate(String sql)<br>  执行DML（insert ，update ， delete）语句、DDL（create，alter，drop）语句<br>  返回值：影响的行数，通过影响的行数判断DML语句是否执行成功，返回值&gt;0，执行成功，反之失败。</li><li>ResultSet executeQuery(String sql)<br>  执行DQL(select) 语句</li></ul><h3 id="PreparedStatement-执行sql的对象"><a href="#PreparedStatement-执行sql的对象" class="headerlink" title="PreparedStatement(执行sql的对象)"></a>PreparedStatement(执行sql的对象)</h3><p>执行sql的对象（是 Statement的子接口）：此对象是先编译sql后执行sql语句的对象</p><h4 id="SQL注入问题："><a href="#SQL注入问题：" class="headerlink" title="SQL注入问题："></a>SQL注入问题：</h4><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<br>  a:输入用户随便，输入密码：a’ or ‘a’ = ‘a，最后sql编译时候会变成以下sql语句，从而使sql曲解了sql语句的原意。</p><pre class="line-numbers language-mysql"><code class="language-mysql"> select * from user where username = ‘admin’ and password = 'a' or 'a' = 'a'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解决SQL注入问题："><a href="#解决SQL注入问题：" class="headerlink" title="解决SQL注入问题："></a>解决SQL注入问题：</h4><p>使用PrepareStatement对象可以解决sql注入问题，PrepareStatement特点先编译sql语句后执行sql语句，也就是说无论用户输入什么字符都不会参与到sql执行中，从而达到无法sql注入现象。</p><h4 id="使用PreparedStatement对象"><a href="#使用PreparedStatement对象" class="headerlink" title="使用PreparedStatement对象"></a>使用PreparedStatement对象</h4><p>参数可以使用 ? 作为占位符，从而让sql语句先编译，然后，在调用setInt或其他数据类型(调用什么数据类型的方法取决于sql数据中是什么数据类型)</p><pre class="line-numbers language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"update tb_student set sname = ? where cno=101"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为sname在sql中式varchar数据类型所以不可设置其他数据类型方法</span>preparedStatement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResultSet-结果集对象"><a href="#ResultSet-结果集对象" class="headerlink" title="ResultSet(结果集对象)"></a>ResultSet(结果集对象)</h3><p>返回结果集对象</p><ul><li><p>Boolean next()：游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果有数据则返回true，如果没有数据则返回false。       </p></li><li><p>getXXX(参数)：代表数据类型</p><ul><li><p>XXX：表是数据类型（若获取int的则为getInt()，如果是String则是getString，其余的与之类似）</p></li><li><p>参数1：可以按照sql查询出来的列查询(不推荐)</p><pre class="line-numbers language-java"><code class="language-java">sql语句<span class="token operator">:</span> sql语句<span class="token punctuation">(</span>select cno<span class="token punctuation">,</span>cname from tb_student<span class="token punctuation">)</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cno</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>参数2：可以按照sql语句名称(别名)查询(推荐)</p><pre class="line-numbers language-java"><code class="language-java">sql语句<span class="token operator">:</span> sql语句<span class="token punctuation">(</span>select cno<span class="token punctuation">,</span>cname from tb_student<span class="token punctuation">)</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"cno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cno</span>ResultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"cname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指的是cname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>结果集执行顺序：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果有数据，则取数据</span>    <span class="token comment" spellcheck="true">// 以下程序是以列行数获取，注：起始列：1</span>    <span class="token comment" spellcheck="true">/*String cno = rs.getString(1);    String cname = rs.getString(2);    System.out.println(cno + "," + cname);*/</span>    <span class="token comment" spellcheck="true">// 以下程序不是以下标获取以列的名字获取，注：如果select中有别名则以别名获取，没有则以字段名获取</span>    String cno <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"cno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String cname <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"cname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cno <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> cname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>遍历结果集执行顺序</strong>：</p><ol><li>游标向下移动一行，</li><li>判断是否有数据</li><li>如果有数据返回true，获取数据</li><li>如果无数据返回false，循环结束</li></ol></li></ul></li></ul><h3 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h3><p>JDBC中默认默认是自动提交事务。如果需要手动提交事务需要修改。</p><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">void</span> <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将此连接的自动提交模式设置为给定状态。</span> <span class="token comment" spellcheck="true">// 调用该方法，设置参数为false，即开启事务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使所有上一次提交/回滚后进行的更改成为持久更改，并释放此Connection对象当前持有的所有数据库锁。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 取消在当前事务中进行的所有更改，并释放此Connection对象当前持有的所有数据库锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始JDBC&quot;&gt;&lt;a href=&quot;#初始JDBC&quot; class=&quot;headerlink&quot; title=&quot;初始JDBC&quot;&gt;&lt;/a&gt;初始JDBC&lt;/h2&gt;&lt;h3 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>动态代理(01)</title>
    <link href="https://xrebirth.github.io/posts/8f7372e9.html"/>
    <id>https://xrebirth.github.io/posts/8f7372e9.html</id>
    <published>2021-10-30T16:00:00.000Z</published>
    <updated>2022-01-12T10:44:15.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>代理，在我们日常生活之中就有体现，代购，中介，换IP，商家等等，比如有一家美国的大学，可以对全世界招生留学中介(代理 )</p><p>留学中介(代理)：帮助这家美国的学校招生，中介是学校的代理中介是代替学校完成招生功能。</p><h3 id="代理特点："><a href="#代理特点：" class="headerlink" title="代理特点："></a>代理特点：</h3><ol><li>中介和代理他们要做的事情是一致的：招生。</li><li>中介是学校代理，学校是目标。</li><li>家长——–&gt;中介(学校介绍，办理入学手续)——–&gt;美国学校。</li><li>中介是代理，收取费用。</li></ol><h3 id="为什么要找中介？"><a href="#为什么要找中介？" class="headerlink" title="为什么要找中介？"></a>为什么要找中介？</h3><ol><li>中介是专业的，方便。</li><li>家长现在不能自己去找学校，家长没有能力访问学校或美国学校不接收个人来访。</li><li>买东西都是商家卖，商家是某个商品的代理，你个人买东西，肯定不会让你接触到厂家的。</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2020%3A%E6%97%B6%2038%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt="动态代理结构图"></p><h2 id="代理模式作用"><a href="#代理模式作用" class="headerlink" title="代理模式作用"></a>代理模式作用</h2><ol><li>功能增强：在你原有的功能上，增加了额外的功能：新增加的功能，叫做功能增强。</li><li>控制访问：代理类不让你访问目标，例如商家不让用户访问厂家。</li></ol><h2 id="实现代理方式"><a href="#实现代理方式" class="headerlink" title="实现代理方式"></a>实现代理方式</h2><ol><li>静态代理：手动增加代理类，在原有代理类基础上增加功能。</li><li>动态代理：使用JDK反射实现动态添加代理的方法。</li></ol><h2 id="静态代理-1"><a href="#静态代理-1" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>模拟一个用户购买U盘的行为。</p><ul><li>用户：消费者、只能从商家购买商品。</li><li>商家：代理类、代理U盘品牌的商品。</li><li>厂家：目标类。</li><li>三者之间的关系：用户(客户端)—&gt;商家(代理)—&gt;厂家(目标)。</li><li>总结：商家和厂家都是卖某品牌的U盘，他们完成的功能是一致的。</li></ul><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>创建一个接口，定义卖U盘的方法，表示你的厂家和商家做的事情。</li><li>创建厂家类，实现一步骤的接口。</li><li>创建商家，就是代理，也需要实现一步骤中的接口。</li><li>创建客户端类，调用商家的方法买一个U盘。</li></ol><h3 id="静态代理创建"><a href="#静态代理创建" class="headerlink" title="静态代理创建"></a>静态代理创建</h3><h4 id="Package结构："><a href="#Package结构：" class="headerlink" title="Package结构："></a>Package结构：</h4><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2021%3A%E6%97%B6%2015%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86package%E7%BB%93%E6%9E%84.jpg" alt="动态代理package结构"></p><h4 id="实现类："><a href="#实现类：" class="headerlink" title="实现类："></a>实现类：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 购买U盘的方法     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbKingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 厂家的购买方法     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> amount <span class="token operator">*</span> <span class="token number">80.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 商家类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">pinxixi</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UsbKingFactory usbKingFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向厂家发送订单，告诉厂家，我订购了U盘，让厂家发货，并返回报价</span>        <span class="token keyword">float</span> floorPrice <span class="token operator">=</span> usbKingFactory<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在厂家底价的基础上，没件加25元利润</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> amount <span class="token operator">*</span> <span class="token number">25.0f</span> <span class="token operator">+</span> floorPrice<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在调用sell()方法后，增强的功能</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼兮兮给您返回优惠券或红包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 消费者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">shopMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pinxixi pinxixi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pinxixi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> pinxixi<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼兮兮U盘的价格是："</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>优点：<ol><li>实现简单。</li></ol></li><li>缺点：当你的项目，目标类(厂家类)有很多时候，代理类(商家类)也会随之增多。<ol><li>目标类增多、代理类也会随之增多。</li><li>接口中方法修规、增加后，众多的目标类和代理类都需要修改。</li></ol></li></ul><h2 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>使用JDK的反射机制，创建对象的能力，创建的是代理类的的对象，而不用手动创建类文件更不用手动写具体的Java文件，且在程序执行时，调用JDK提供的方法自动创建代理类的对象。换句话说：动态代理是一种创建Java象的能力，让你不用创建代理类(商家类)就能创建代理类对象，除去了中间商。</p><h3 id="静态代理和动态代理对比"><a href="#静态代理和动态代理对比" class="headerlink" title="静态代理和动态代理对比"></a>静态代理和动态代理对比</h3><ul><li>动态代理可以实现低耦合、高内聚，可以在修改、增加接口方法时，不会影响代理类对象。</li><li>代理类数量可以很少，不用创建很多的代理方法。</li></ul><h3 id="动态代理介绍"><a href="#动态代理介绍" class="headerlink" title="动态代理介绍"></a>动态代理介绍</h3><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2021%3A%E6%97%B6%2033%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BB%8B%E7%BB%8D.png" alt="动态代理介绍"></p><ol><li>动态代理是指代理类对象在程序运行时由JVM根据反射机制动态生成的，不需要定义代理类的java源文件。</li><li>动态代理其实就是JDK运行期间动态创建Class字节码并加载到JVM。</li></ol><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="JDK动态代理-理解"><a href="#JDK动态代理-理解" class="headerlink" title="JDK动态代理(理解)"></a>JDK动态代理(理解)</h4><ul><li>使用Java反射包(java.lang.reflect)中的反射包中类和接口实现动态代理的功能，会使用到以下三个类/接口：InvocationHandler、Method、Proxy。</li></ul><h4 id="CGLlB动态代理-了解"><a href="#CGLlB动态代理-了解" class="headerlink" title="CGLlB动态代理(了解)"></a>CGLlB动态代理(了解)</h4><ul><li>CGLlB原理是继承，CGLlB通过继承目标类，创建它的子类，在子类中重写父类中同名的方法，实现功能的修改。因为CGLlB使用的是继承、重写方法，所以要求目标类何方法均不能使用final。CGLlB的要求目标类比较宽松，只要能继承就可以了。CGLlB在很多的框架中使用，比如Mybatis，Spring框架中都有使用。</li><li>InvocationHandler(调用处理器接口)：<ul><li>方法：invoke()抽象方法、需要实现。</li><li>说明：代理对象要执行的功能代码，即代理类要完成的功能就写在invoke()方法中。</li></ul></li><li>Method(类)：表示目标类中所要调用的方法，通过Method可以执行某个目标类中的方法、 JDK会自动提供目标类方法，无需手动指定。<ul><li>方法：invoke(目标类对象，方法的参数)</li><li>说明：<strong>目标类对象：</strong>执行某个目标类中的方法、<strong>方法的参数：</strong>调用目标类方法的参数。</li><li>例如：Object obj = method.invoke(service,”参数”);</li><li>注意：Method.invok()与InvocationHandler接口中invoke()方法是两个方法，只不过是重名，不是一个方法。</li></ul></li><li>Proxy(类)：核心对象，创建代理对象。之前创建对象都是new类的构造方法()，现在可以使用Proxy类的方法，代理new使用。<ul><li>方法(静态方法)：public static Object newProxyInstance(Classloader loader , Class&lt;?&gt;[] interfaces , InvocationHandler h);</li><li>说明：创建代理对象，等同于静态代理中的new UsbKingFactory();</li><li>参数说明：<ol><li><strong>Classloader loader：</strong>a.getCalss().getClassLoader()、目标对象类加载器，负责向内存中加载对象(使用反射获取对象)</li><li><strong>Class&lt;?&gt;[] interfaces：</strong>目标对象实现的接口，也是通过反射要获取的。</li><li><strong>InvocationHandler h：</strong>代理类要完成的功能。</li><li><strong>返回值：</strong>目标类的代理对象。</li></ol></li></ul></li></ul><h3 id="JDK动态代理创建"><a href="#JDK动态代理创建" class="headerlink" title="JDK动态代理创建"></a>JDK动态代理创建</h3><h4 id="目标类实现功能："><a href="#目标类实现功能：" class="headerlink" title="目标类实现功能："></a>目标类实现功能：</h4><ol><li>实现业务逻辑的功能。</li></ol><h4 id="代理类实现功能："><a href="#代理类实现功能：" class="headerlink" title="代理类实现功能："></a>代理类实现功能：</h4><ol><li>调用目标类方法并执行目标方法所有功能。</li><li>基于目标类方法功能调用时，增加功能。</li></ol><h4 id="创建步骤："><a href="#创建步骤：" class="headerlink" title="创建步骤："></a>创建步骤：</h4><ol><li>创建接口，定义目标类要完成的功能。</li><li>床架目标类实现接口。</li><li>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能。<ol><li>调用目标方法。</li><li>增强功能。</li></ol></li><li>使用Proxy；类的静态方法，创建代理对象，并将返回值转为接口类型。</li></ol><p>Package结构：</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/2021%3A%E5%B9%B4%2012%3A%E6%9C%88%207%3A%E6%97%A5%2023%3A%E6%97%B6%2020%3A%E5%88%86%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8C%85%E7%BB%93%E6%9E%84.jpg" alt="动态代理包结构"></p><h4 id="实现类：-1"><a href="#实现类：-1" class="headerlink" title="实现类："></a>实现类：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 购买U盘的方法     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbKingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 厂家的购买方法（目标类）     * @param amount 一次购买U盘的数量     * @return 购买U盘的总价格     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标类中，执行sell目标方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price <span class="token operator">=</span>  amount <span class="token operator">*</span> <span class="token number">80.0f</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态代理类</span><span class="token comment" spellcheck="true">// 必须实现InvocationHandler接口，完成代理类要做的功能</span><span class="token comment" spellcheck="true">// 1.调用目标类中的方法</span><span class="token comment" spellcheck="true">// 2.功能增强啊</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysellHander</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        动态代理：目标代理是活动的，不是固定的，需要传进来，穿的是什么就是给谁创建代理。    */</span>    <span class="token keyword">private</span> Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MysellHander</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 给目标对象赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// == float price = amount * 25.0f + floorPrice;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向厂家发送订单，告诉厂家，我订购了U盘，让厂家发货，并返回报价</span>        Object res  <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行目标类方法</span>        res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// == float floorPrice = usbKingFactory.sell(amount);</span>        <span class="token comment" spellcheck="true">// 在厂家底价的基础上，没件加25元利润</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Float price <span class="token operator">=</span> <span class="token punctuation">(</span>Float<span class="token punctuation">)</span> res<span class="token punctuation">;</span>            price <span class="token operator">=</span> <span class="token number">25.0f</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> price<span class="token punctuation">;</span>            res <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在调用sell()方法后，增强的功能</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拼兮兮给您返回优惠券或红包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加后的价格</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">shopMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建目标对象</span>        UsbSell factory <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.创建InvocationHandler对象</span>        MysellHander handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysellHander</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.创建代理对象</span>        UsbSell proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UsbSell<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.通过代理执行方法</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>动态代理，必须要有接口出现，如果没有，可以使用CGLlB实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
