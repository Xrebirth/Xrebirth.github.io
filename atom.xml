<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小靳同学</title>
  
  <subtitle>是小靳同学啊</subtitle>
  <link href="https://xrebirth.github.io/atom.xml" rel="self"/>
  
  <link href="https://xrebirth.github.io/"/>
  <updated>2021-09-19T08:15:37.309Z</updated>
  <id>https://xrebirth.github.io/</id>
  
  <author>
    <name>小靳同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>包装类型(33)</title>
    <link href="https://xrebirth.github.io/posts/46b5ab92.html"/>
    <id>https://xrebirth.github.io/posts/46b5ab92.html</id>
    <published>2021-09-19T08:08:00.000Z</published>
    <updated>2021-09-19T08:15:37.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h1><h2 id="Java中八种基本数据对应的包装类型"><a href="#Java中八种基本数据对应的包装类型" class="headerlink" title="Java中八种基本数据对应的包装类型"></a>Java中八种基本数据对应的包装类型</h2><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类型</th><th align="center">包装名称</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">java.lang.Byte;</td><td align="center">字节型</td></tr><tr><td align="center">short</td><td align="center">java.lang.short;</td><td align="center">短整型</td></tr><tr><td align="center">long</td><td align="center">java.lang.Long;</td><td align="center">长整型</td></tr><tr><td align="center">int</td><td align="center">java.lang.Integer;</td><td align="center">整形</td></tr><tr><td align="center">float</td><td align="center">java.lang.Float;</td><td align="center">单精度浮点数</td></tr><tr><td align="center">double</td><td align="center">java.lang.Double;</td><td align="center">双精度浮点数</td></tr><tr><td align="center">boolean</td><td align="center">java.lang.Boolean;</td><td align="center">布尔类型</td></tr><tr><td align="center">char</td><td align="center">java.lang.Character;</td><td align="center">字符型</td></tr></tbody></table><h2 id="继承关系结构图："><a href="#继承关系结构图：" class="headerlink" title="继承关系结构图："></a>继承关系结构图：</h2><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="继承关系结构图"></p><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">///需求:规定m1方法可以接收java中任何一种数据类型</span>    <span class="token comment" spellcheck="true">//m1方法如果想接收byte类型的数据,可以将byte类型先包装成java.1ang,Byte;再传递参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里Boolean重写了Object的o.toString()方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用常用的布尔构造函数创建对象</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用java.lang.Boolean;包装类型转换成引用类型</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象类型传到形参中</span>        <span class="token function">m1</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ===> true</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包装类型&quot;&gt;&lt;a href=&quot;#包装类型&quot; class=&quot;headerlink&quot; title=&quot;包装类型&quot;&gt;&lt;/a&gt;包装类型&lt;/h1&gt;&lt;h2 id=&quot;Java中八种基本数据对应的包装类型&quot;&gt;&lt;a href=&quot;#Java中八种基本数据对应的包装类型&quot; class=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>StringBuffer和StringBuilder(32)</title>
    <link href="https://xrebirth.github.io/posts/4aba4abd.html"/>
    <id>https://xrebirth.github.io/posts/4aba4abd.html</id>
    <published>2021-09-19T01:53:00.000Z</published>
    <updated>2021-09-19T08:07:28.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><blockquote><ol><li><p>Java.lang.StringBuffer和Java.lang.StringBuilder是什么？</p><p> 答：是一个字符串缓冲区</p></li><li><p>工作原理</p><p> 预先在内存中申请一块空间,以容纳字符序列,如果预留的空间不够用,则进行自动扩容,以容纳更多字符序列</p></li><li><p>Java.lang.StringBuffer和Java.lang.StringBuilder 和 String最大的区别是什么？</p><p> 答：String是不可变得字符序列,存储字符串常量池中</p><p> ​        StringBuffer底层是一个char数组,但是该char数组是可变的并且可以自动扩容</p></li><li><p>StringBuffer 和 StringBuilder的默认初始化容量是16</p><ul><li>最好在创建 stringBuffer之前,预测 StringBuffer的存储字符数量</li></ul><ul><li><pre><code> 然后再创建 stringBuffer的时候采用指定初始化容量的方式创建StringBuffer</code></pre></li><li><pre><code> 为了减少底层数组的拷贝。提高效率</code></pre></li></ul></li><li><p>在使用字符串拼接时使用String类型会消耗很大内存，可以使用StringBuffer和StringBuilder来进行字符串的拼接</p></li><li><p>StringBuffer和StringBuilder的区别？</p><ul><li><pre><code> stringBuffer是线程安全的。(可以在多线程的环境下使用不会出现问题.)</code></pre></li><li><pre><code> stringBui1der是非线程安全的。(在多线程环境下使用可能出现问题.)</code></pre></li></ul></li></ol></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">            <span class="token comment" spellcheck="true">// 创建字符串缓冲区对象</span>            StringBuffer s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认初始化=16</span>            <span class="token comment" spellcheck="true">// 可以向StringBuffer中追加字符串</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sport"</span><span class="token punctuation">,</span><span class="token string">"PhysicalEducation"</span><span class="token punctuation">,</span><span class="token string">"Sleep"</span><span class="token punctuation">,</span><span class="token string">"Food"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》Sport,PhysicalEducation,Sleep,Food</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="StringBuffer和StringBuilder的区别"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;StringBuffer和StringBuilder&quot;&gt;&lt;a href=&quot;#StringBuffer和StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;StringBuffer和StringBuilder&quot;&gt;&lt;/a&gt;StringBu</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>常用类—String类(31)</title>
    <link href="https://xrebirth.github.io/posts/e67e1481.html"/>
    <id>https://xrebirth.github.io/posts/e67e1481.html</id>
    <published>2021-09-18T11:59:00.000Z</published>
    <updated>2021-09-19T01:52:26.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用类—String类"><a href="#常用类—String类" class="headerlink" title="常用类—String类"></a>常用类—String类</h1><blockquote><p>String类是<strong>不可变</strong>类，也就是说String对象声名后，将<strong>不可修改</strong></p></blockquote><ol><li><p>字符串一旦创建不可再改变，即：”abc”字符一旦创建不可在变成”abcd”<br>  注意：上面说的不可变，是指字符串不可变，但是引用可以重新指向其他字符串。</p></li><li><p>为了提升字符串的访问效率，在程序中使用了“缓存”技术，所以在Java中所有使用”双引号”<br>  括起来的字符串命令都会在”字符串常量池”中创建一份，字符串常量池在方法区中被存储。</p></li><li><p>使用String的时候我们应该注意的问题：尽量不要做字符串频繁的拼接操作，因为字符串一且创建不可改变，只要频繁拼接，就会在字符串常量池中创建大量的字符串对象，给垃圾回收带来问题。</p><p> 示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        String a1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String a2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上判断==>true，但是字符类型不推荐以上判断因为遇到以下判断就不是true了；</span>        String a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token operator">==</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上方法==>false，因为一旦创建对象后，引用对象地址指向了不同的内存地址所以不存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals()方法判断==>"</span><span class="token operator">+</span>a3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串常量池</span>        String b1<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>        String b2<span class="token operator">=</span><span class="token string">"cba"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// b1首先会去字符串常量池中搜索是否存在abc，然后如果没有会在字符常量符中存储</span>        <span class="token comment" spellcheck="true">// b2首先会去字符串常量池中搜索是否存在abc，因为存在所以直接提取使用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token operator">+</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一般不推荐以上方法，因为字符串连接会大大降低字符串的"缓存"技术，因为因为字符串           // 一且创建不可改变，只要频繁拼接，就会在字符串常量池中创建大量的字符串对象，给垃</span>        <span class="token comment" spellcheck="true">//圾回收带来问题。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以下代码会创建几个对象：</p><pre class="line-numbers language-java"><code class="language-java">    String b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   答：以上对象总共创建了三个对象，<strong>方法区字符串常用池：1个；堆内存: 2个</strong></p></li><li><p>String构造方法</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 字符串常用构造方法</span>        <span class="token comment" spellcheck="true">// 1.</span>        String a1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.</span>        String a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将字符类型转换成阿斯克码值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>abcd</span>        <span class="token comment" spellcheck="true">// 4.</span>        String a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>bc</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'国'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String a5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.</span>        String a6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a6<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串常用方法</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// String常用方法</span>        <span class="token comment" spellcheck="true">// 1. charAt(int index) 返回指定索引处的 char值。</span>        String q1 <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> q2 <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 中</span>        <span class="token comment" spellcheck="true">// 2. endsWith(String suffix) 测试此字符串是否以指定的后缀结尾。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ClassStringTest04.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> false</span>        <span class="token comment" spellcheck="true">// 3. indexOf(String str) 返回指定子字符串第一次出现的字符串中的索引。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abcJava"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 3</span>        <span class="token comment" spellcheck="true">// 4. equalsIgnoreCase(String anotherString) 将此String与另一个String比较，忽略了大小写。 如果两个字符串具有相同的长度并且两个字符串中的相应字符等于忽略大小写，则认为它们是相等的忽略大小写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 true</span>        <span class="token comment" spellcheck="true">// 5.  getBytes(String charsetName) 使用命名的字符集将此 String编码为字节序列，将结果存储到新的字节数组中。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q4 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q4<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回阿斯克码值：97 98 99 100</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 6. indexOf(int ch) 返回指定字符第一次出现的字符串中的索引。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.ClassTest.java"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 0</span>        <span class="token comment" spellcheck="true">// 7. lastIndexOf(int ch, int fromIndex) 返回指定字符最后一次出现的字符串中的索引，从指定的索引开始向后搜索。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.ClassTest.java"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 15</span>        <span class="token comment" spellcheck="true">// 8.  length() 返回此字符串的长度。</span>        <span class="token comment" spellcheck="true">// 注意：数组的length是属性，而字符类型的length()是方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"qwr"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==>3</span>        <span class="token comment" spellcheck="true">// 9. replaceAll(String regex, String replacement) 将给定替换的给定 regular expression匹配的此字符串的每个子字符串替换。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java.Class.Test.Animal.java"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"qwe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> qwe.Class.Test.Animal.qwe</span>        <span class="token comment" spellcheck="true">// 10. split(String regex, int limit)</span>        String myTime <span class="token operator">=</span> <span class="token string">"2002,03,09"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> myTime2 <span class="token operator">=</span> myTime<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myTime2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myTime2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2002 03 09</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 11. startsWith(String prefix) 测试此字符串是否以指定的前缀开头。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"/abc/efg/hij/"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 true</span>        <span class="token comment" spellcheck="true">// 12.  substring(int beginIndex) 返回一个字符串，该字符串是此字符串的子字符串。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc//efg/hij/"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">/</span>efg<span class="token operator">/</span>hij<span class="token operator">/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc//efg/hij/"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">></span> efg        <span class="token comment" spellcheck="true">//13. toCharArray() 将此字符串转换为新的字符数组。</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c2 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ==> abcd</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 14. toUpperCase() 使用默认语言环境的规则将此 String所有字符转换为大写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ==> ABC</span>        <span class="token comment" spellcheck="true">// 15. toLowerCase() 使用默认语言环境的规则将此 String所有字符转换为小写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ==> abc</span>        <span class="token comment" spellcheck="true">// 16.  trim() 返回一个字符串，其值为此字符串，删除了所有前导和尾随空格，其中space被定义为其代码点小于或等于 'U+0020' （空格字符）的任何字符。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"    a   b   c     "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 17. valueOf(Object obj) 返回 Object参数的字符串表示形式。</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// java.lang.Object@3b6eb2ec内存地址</span>        Object o2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以下输出会不会报空指针异常？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会,因为并不是直接调用 tostring方法, string. valueof( Object)这个方法对空值进行处理了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==》 null</span>        <span class="token comment" spellcheck="true">// System.out.println(o2.toString()); // 会出现空指针异常：NullPointerException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用类—String类&quot;&gt;&lt;a href=&quot;#常用类—String类&quot; class=&quot;headerlink&quot; title=&quot;常用类—String类&quot;&gt;&lt;/a&gt;常用类—String类&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;String类是&lt;strong&gt;不可变&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Arrays工具集(30)</title>
    <link href="https://xrebirth.github.io/posts/5e6fc76a.html"/>
    <id>https://xrebirth.github.io/posts/5e6fc76a.html</id>
    <published>2021-09-18T10:55:00.000Z</published>
    <updated>2021-09-18T11:59:38.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arrays工具集"><a href="#Arrays工具集" class="headerlink" title="Arrays工具集"></a>Arrays工具集</h1><blockquote><ul><li>Arrays是cun公司提供的一个工具集</li><li>该工具主要针对的是数组的操作</li><li>例如：排序/二分等…</li></ul></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二分查找</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12的下标为："</span><span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Arrays工具集&quot;&gt;&lt;a href=&quot;#Arrays工具集&quot; class=&quot;headerlink&quot; title=&quot;Arrays工具集&quot;&gt;&lt;/a&gt;Arrays工具集&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Arrays是cun公司提供的一个工具集&lt;/l</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数组的常用算法(29)</title>
    <link href="https://xrebirth.github.io/posts/6298d4a8.html"/>
    <id>https://xrebirth.github.io/posts/6298d4a8.html</id>
    <published>2021-09-18T09:39:00.000Z</published>
    <updated>2021-09-18T11:59:46.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组的常用算法"><a href="#数组的常用算法" class="headerlink" title="数组的常用算法"></a>数组的常用算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 冒泡排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> a2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                a2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分法查找-折半查找"><a href="#二分法查找-折半查找" class="headerlink" title="二分法查找(折半查找)"></a>二分法查找(折半查找)</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开始下标</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束下标</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>begin<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 中间下标</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> destElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>                begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组的常用算法&quot;&gt;&lt;a href=&quot;#数组的常用算法&quot; class=&quot;headerlink&quot; title=&quot;数组的常用算法&quot;&gt;&lt;/a&gt;数组的常用算法&lt;/h1&gt;&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>二维数组(28)</title>
    <link href="https://xrebirth.github.io/posts/a17b6fcd.html"/>
    <id>https://xrebirth.github.io/posts/a17b6fcd.html</id>
    <published>2021-09-15T04:38:00.000Z</published>
    <updated>2021-09-15T05:12:11.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><ul><li><p>创建静态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历二维数组及二维数组的length的用法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的第一个一维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的第一个一维数组中的元素</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二维数组中的一维数组中的第一个元素为："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取第一个二维数组中的最后一个一维数组中的最后一个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个二维数组中的最后一个一维数组中的最后一个元素为："</span><span class="token operator">+</span>a1<span class="token punctuation">[</span>a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a1<span class="token punctuation">[</span>a1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"```````````````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token comment" spellcheck="true">// 以下循环控制的是纵向</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以下循环控制的是横向</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每次循环循环没个二维数组中的一维数组的每个元素</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历完一维数组后换行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li><p>创建动态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种创建一个动态数组方法：</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上创建的动态数组的意思是：每个二维数组最多创建二个一维数组</span>        <span class="token comment" spellcheck="true">//                         每个一维数组最多创建四个元素</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"```````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种创建一个动态数组方法：</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二维数组&quot;&gt;&lt;a href=&quot;#二维数组&quot; class=&quot;headerlink&quot; title=&quot;二维数组&quot;&gt;&lt;/a&gt;二维数组&lt;/h1&gt;&lt;h2 id=&quot;静态数组&quot;&gt;&lt;a href=&quot;#静态数组&quot; class=&quot;headerlink&quot; title=&quot;静态数组&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>一维数组(27)</title>
    <link href="https://xrebirth.github.io/posts/a49053be.html"/>
    <id>https://xrebirth.github.io/posts/a49053be.html</id>
    <published>2021-09-14T08:37:00.000Z</published>
    <updated>2021-09-15T05:11:22.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><p>​    数组中存储元素的类型是统一的，每一个元素在内存中所占的空间大小是相同的，知道数组的首元素的内存地址，要查找的元素只知道下标就可以快速的计算出偏移量，通过首元素内存地址加上偏移量快速计算出要查找元素的内存地址，通过内存地址快速定位该元素，所以数组查找元素的效率较高随机的对数组进行增删元素，当增加的元素的时候，为了保证数组中元素在空间存储上是有序的，所以被添加元素位置后面的所有元素都要向后移动删除元素也是，后面所有的元素要向前移动。所以数组的增删元素的效率很低</p><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><ul><li>创建静态数组语法：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 声名一个int类型的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span>，<span class="token number">200</span>，<span class="token number">300</span>，<span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个boolean类型的数组</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">true</span>，<span class="token boolean">false</span>，<span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个String类型的数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> a3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"qqq"</span>，<span class="token string">"www"</span>，<span class="token string">"eee"</span>，<span class="token string">"rrr"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个byte类型的数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个char类型的数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span>，<span class="token string">'b'</span>，<span class="token string">'c'</span>，<span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个object类型的数组</span>        Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a6 <span class="token operator">=</span> <span class="token punctuation">{</span>o1，o2，o3，o4<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>遍历数组及数组的length的用法：</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span>，<span class="token number">4</span>，<span class="token number">3</span>，<span class="token number">2</span>，<span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组length的用法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中第一个元素为："</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>in<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中最后一个元素为："</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>in<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组的修改：</span>        in<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"````````````````````"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组：</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>in<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组的元素依次为:"</span> <span class="token operator">+</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li>动态初始化一维数组，会先在堆内存中分配这个数组，并且数组中每一个元素都采用默认值。</li></ul><table><thead><tr><th align="center">数据类型</th><th align="center">数据类型</th><th align="center">数据类型</th><th>数据类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">short</td><td align="center">int</td><td>long</td><td align="center">0</td></tr><tr><td align="center">float</td><td align="center">double</td><td align="center"></td><td></td><td align="center">0.0</td></tr><tr><td align="center">boolean</td><td align="center"></td><td align="center"></td><td></td><td align="center">false</td></tr><tr><td align="center">引用类型</td><td align="center"></td><td align="center"></td><td></td><td align="center">null</td></tr></tbody></table><ul><li><p>创建动态数组语法：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 动态声明一个int类型的数组，最多可以存储i个元素</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 赋值 例如上面声名i个则最多可以创建i个元素</span>        a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建对象动态数组：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建对象动态数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// a2[i].toString();</span>            <span class="token comment" spellcheck="true">// Exception in thread "main" java.lang.NullPointerException</span>            <span class="token comment" spellcheck="true">// 空指针异常</span>            Object o <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 使用a2[i].toString();与System.out.println(o);抛出异常的区别：             * 1.使用a2[i].toString();抛出空指针异常             * 2.System.out.println(o);直接抛出null是因为println()底层代码中有一个             * return (obj == null) ? "null" : obj.eoString();             * 所以使用第二种方法不会抛出Error             */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>什么时候使用动态初始化，什么时候使用静态初始化?</p><ol><li>无论是动态初始化还是静态初始化，最终的内存分布都是一样的。</li><li>如果在创建数组的时候，知道数组中应该存储什么数据，这个时候当然采用静态初始化方式，如果在创建数组的时候，无法预测到数组中存储什么数据，只是先开辟空间，则使用动态初始化方式。</li></ol></li><li><p>数组的拷贝</p><p>  语法：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>数据源<span class="token punctuation">,</span>源数组的开始下标<span class="token punctuation">,</span>目标数组<span class="token punctuation">,</span>目标数组的开始下标<span class="token punctuation">,</span>拷贝长度<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数据源是指拷贝的数据源，目标数组是指的是拷贝的指定数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.arraycopy(数据源,源数组的开始下标,目标数组,目标数组的开始下标,拷贝长度);</span>        <span class="token comment" spellcheck="true">// 数据源是指拷贝的数据源，目标数组是指的是拷贝的指定数组</span>         System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>dest<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;&gt;&lt;/a&gt;一维数组&lt;/h1&gt;&lt;p&gt;​    数组中存储元素的类型是统一的，每一个元素在内存中所占的空间大小是相同的，知道数组的首元素的内存地址，要查找的元素只</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>异常-方法的覆盖(26)</title>
    <link href="https://xrebirth.github.io/posts/4cf7d7a5.html"/>
    <id>https://xrebirth.github.io/posts/4cf7d7a5.html</id>
    <published>2021-09-14T07:37:00.000Z</published>
    <updated>2021-09-14T23:19:58.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常-方法的覆盖"><a href="#异常-方法的覆盖" class="headerlink" title="异常-方法的覆盖"></a>异常-方法的覆盖</h1><blockquote><p>重写的方法不能比父类重写的方法更宽泛。</p></blockquote><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法一(错误方法)</span><span class="token comment" spellcheck="true">/*public class ErrorTest06 {    public void m1() throws FileNotFoundException {        System.out.println("父类方法");    }}class a extends ErrorTest06 {    public void m1() throws IOException {        System.out.println("子类方法");    }    public static void main(String[] args) {        public static void main(String[] args) {            try {                m1();            }catch (FileNotFoundException e) {                e.printStackTrace();            }        }        //        // java: javase2.day02.javareview02.a中的m1()无法覆盖javase2.day02.javareview02.ErrorTest06中的m1()        // 被覆盖的方法未抛出java.io.IOException        //    }}*/</span><span class="token comment" spellcheck="true">// 方法二(正确方法)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token keyword">extends</span> <span class="token class-name">ErrorTest06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异常-方法的覆盖&quot;&gt;&lt;a href=&quot;#异常-方法的覆盖&quot; class=&quot;headerlink&quot; title=&quot;异常-方法的覆盖&quot;&gt;&lt;/a&gt;异常-方法的覆盖&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;重写的方法不能比父类重写的方法更宽泛。&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>自定义异常(25)</title>
    <link href="https://xrebirth.github.io/posts/842032b.html"/>
    <id>https://xrebirth.github.io/posts/842032b.html</id>
    <published>2021-09-14T01:31:00.000Z</published>
    <updated>2021-09-14T07:33:38.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>自定义异常通常继承于 Exception或 RuntimeException,到底继承那个应该看具体情况来定。</p><ol><li><p>编译时异常,直接继承 Exception。</p><blockquote><p> (Exception)编译时异常：</p><ul><li>程序正确，但因为外在的环境条件不满足引发。例如：用户错误及I/O问题—-程序试图打开一个并不存在的远程Socket端口。</li><li>这不是程序本身的逻辑错误，而很可能是远程机器名字错误(用户拼写错误)。对商用软件系统，程序开发者必须考虑并处理这个问题。</li><li>Java编译器强制要求处理这类异常，如果不捕获这类异常，程序将不能被编译。</li></ul></blockquote></li><li><p>运行时异常,直接继承 RuntimeException。</p></li></ol><blockquote><p>(RuntimeException)运行时异常：</p><ul><li> 这意味着程序存在bug，如数组越界，0被除，入参不满足规范…..这类异常需要更改程序来避免，Java编译器强制要求处理这类异常。</li></ul></blockquote><p>实例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest05</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 顾客相关的业务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalNameException  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 完成注册</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建异常对象</span>            IllegalNameException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalNameException</span><span class="token punctuation">(</span><span class="token string">"用户名位数不能少于7位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 手动抛出异常对象</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalNameException</span><span class="token punctuation">(</span><span class="token string">"用户名位数不能少于7位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            throw new IllegalNameException("用户名位数不能少于7位");</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 代码如果执行到这里，则用户名是合法的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册成功！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ErrorTest05Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟注册</span>        <span class="token comment" spellcheck="true">// 假如用户提供用户名如下</span>        String userName <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册</span>        ErrorTest05 s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorTest05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalNameException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IllegalNameException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 编译时异常</span><span class="token comment" spellcheck="true">//class IllegalNameException extends RuntimeException { // 运行时异常</span>    <span class="token comment" spellcheck="true">// 定义异常一般提供两个构造方法</span>    <span class="token keyword">public</span> <span class="token function">IllegalNameException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">IllegalNameException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义异常&quot;&gt;&lt;a href=&quot;#自定义异常&quot; class=&quot;headerlink&quot; title=&quot;自定义异常&quot;&gt;&lt;/a&gt;自定义异常&lt;/h1&gt;&lt;p&gt;自定义异常通常继承于 Exception或 RuntimeException,到底继承那个应该看具体情况来定。&lt;/p</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>final、 finalize和 finally(24)</title>
    <link href="https://xrebirth.github.io/posts/27802474.html"/>
    <id>https://xrebirth.github.io/posts/27802474.html</id>
    <published>2021-09-14T01:09:00.000Z</published>
    <updated>2021-09-14T01:29:44.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="final、-finalize和-finally区别"><a href="#final、-finalize和-finally区别" class="headerlink" title="final、 finalize和 finally区别"></a>final、 finalize和 finally区别</h1><h2 id="final：java中的关键字，修饰符。"><a href="#final：java中的关键字，修饰符。" class="headerlink" title="final：java中的关键字，修饰符。"></a>final：java中的关键字，修饰符。</h2><p>用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</p><h2 id="finalize：java的一种异常处理机制。"><a href="#finalize：java的一种异常处理机制。" class="headerlink" title="finalize：java的一种异常处理机制。"></a>finalize：java的一种异常处理机制。</h2><p>finalize()是在对象内存回收前被调用一次异常处理语句，属于异常处理语句结构的一部分，表示总是执行。</p><h2 id="finally：中的一个方法名。"><a href="#finally：中的一个方法名。" class="headerlink" title="finally：中的一个方法名。"></a>finally：中的一个方法名。</h2><p>Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;final、-finalize和-finally区别&quot;&gt;&lt;a href=&quot;#final、-finalize和-finally区别&quot; class=&quot;headerlink&quot; title=&quot;final、 finalize和 finally区别&quot;&gt;&lt;/a&gt;final、 f</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>文档中的is-a、is-like-a、has-a(22)</title>
    <link href="https://xrebirth.github.io/posts/3c26ee52.html"/>
    <id>https://xrebirth.github.io/posts/3c26ee52.html</id>
    <published>2021-09-13T08:57:03.000Z</published>
    <updated>2021-09-14T01:10:07.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档中的is-a、is-like-a、has-a"><a href="#文档中的is-a、is-like-a、has-a" class="headerlink" title="文档中的is-a、is-like-a、has-a"></a>文档中的is-a、is-like-a、has-a</h1><h2 id="is-a"><a href="#is-a" class="headerlink" title="is-a"></a>is-a</h2><ul><li>指的是类与类之间的继承关系</li></ul><h2 id="is-like-a"><a href="#is-like-a" class="headerlink" title="is-like-a"></a>is-like-a</h2><ul><li>指的是接口与类之间的泛化关系(实现关系)</li></ul><h2 id="has-a"><a href="#has-a" class="headerlink" title="has-a"></a>has-a</h2><ul><li>指的是类与变量/方法之间的关联关系</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文档中的is-a、is-like-a、has-a&quot;&gt;&lt;a href=&quot;#文档中的is-a、is-like-a、has-a&quot; class=&quot;headerlink&quot; title=&quot;文档中的is-a、is-like-a、has-a&quot;&gt;&lt;/a&gt;文档中的is-a、is-li</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Error异常信息(23)</title>
    <link href="https://xrebirth.github.io/posts/72d577b3.html"/>
    <id>https://xrebirth.github.io/posts/72d577b3.html</id>
    <published>2021-09-13T08:57:03.000Z</published>
    <updated>2021-09-14T01:10:17.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Error异常信息"><a href="#Error异常信息" class="headerlink" title="Error异常信息"></a>Error异常信息</h1><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理"></p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><ol><li><p>作用：如果在构造方法声明位置上使用 throws(向上抛)，则谁被调用需要使用throws或者try catch。</p></li><li><p>注意：throws只能往上报但是不能解决根本问题</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 异常     * throws 和 try catch     * throws：     * 1.如果在构造方法声明位置上使用 throws(向上抛)则谁调用它谁就要解决这个问题或者继续往上抛出才可以运行，     * 2.严格意义上来说throws不能够解决error报错，throws只能网上报但是不能够解决根本问题     * try catch：     * 1.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C://txt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * FileInputstream构造方法声明位置上使用 throws(向上抛)        * java: 未报告的异常错误java.io.FileNotFoundException; 必须对其进行捕获或声明以便抛出        */</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以继续往下执行~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        * 在程序运行过程中发生了 FilNotFoundException类型的异常        * JVM为我们创建了一个FilNotFoundException类型的对象        * 该对象中携带以下的信息。        * 负责将该对象的信息打印到控制台并且JVM停掉了程序的运行        *   Exception in thread "main" java.io.FileNotFoundException: C:\txt.txt (系统找不到指定的文件。)            at java.base/java.io.FileInputStream.open0(Native Method)            at java.base/java.io.FileInputStream.open(FileInputStream.java:219)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:157)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:112)            at javase2.day02.javareview02.ErrorTest01.m3(ErrorTest01.java:23)            at javase2.day02.javareview02.ErrorTest01.m2(ErrorTest01.java:20)            at javase2.day02.javareview02.ErrorTest01.m1(ErrorTest01.java:17)            at javase2.day02.javareview02.ErrorTest01.main(ErrorTest01.java:30)        */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h2><ol><li><p>catch可以写多个,但是必须从上到下,从小到大捕捉，不然会报异常。</p></li><li><p>如果在try语句块中首次出现异常则在try语句块中后面语句不在执行。</p></li><li><p>catch的参数变量中的Object的toString方法重写了，不是一个存储地址，而是一个字符串。</p></li><li><p>语法：</p></li></ol><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">try</span> <span class="token punctuation">{</span>      可能出现异常的代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>      处理异常代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>      处理异常代码<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//       情况一.</span>        <span class="token comment" spellcheck="true">/*try {            FileInputStream fis = new FileInputStream("abc");            // 以上FileInputStreamerror属于FileNotFoundException错误            fis.read();            // 以上fis.read()属于IOException错误            // 因为FileNotFoundException属于IOException的子类            // 如果解决一个问题则会报错：            // java: 未报告的异常错误java.io.IOException; 必须对其进行捕获或声明以便抛出        } catch (FileNotFoundException e) {            System.out.println("执行1111");        } catch (IOException e) {            System.out.println("执行2222");        }*/</span><span class="token comment" spellcheck="true">//       情况二.</span>        <span class="token comment" spellcheck="true">/*try {            FileInputStream fis = new FileInputStream("abc");            // 以上FileInputStreamerror属于FileNotFoundException错误            // 注意：FileNotFoundException属于IOException的子类            fis.read();            // 以上fis.read()属于IOException错误        } catch (IOException e) {            System.out.println("执行2222");        } catch (FileNotFoundException e) {            System.out.println("执行1111");        }*/</span>        <span class="token comment" spellcheck="true">/*         * 报错：java: 已捕获到异常错误java.io.FileNotFoundException         * catch只能从小(子类)到大(父类)处理异常         * 如果从大(父类)到小(子类)会报错         * */</span><span class="token comment" spellcheck="true">//       情况三.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在try语句块中首次出现异常则在try语句块中后面语句不在执行~</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行2222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * 报错：java: 已捕获到异常错误java.io.FileNotFoundException         * catch只能从小(子类)到大(父类)处理异常         * 如果从大(父类)到小(子类)会报错         * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="throws与try-catch区别："><a href="#throws与try-catch区别：" class="headerlink" title="throws与try catch区别："></a>throws与try catch区别：</h2><ol><li>（throws）实际例子：小王是公司小职员因操作不当让公司赔了100W，则小王给项目经理报，而项目经理给部门经理报，部门经理给董事长报，董事长宣布公司破产。其中：部门经理知道后将此事一直未的到解决直到报给董事长（JVM）就相当于直接报给JVM虚拟机停止运行。</li><li>（try catch）实际例子：小王是公司小职员因操作不当让公司赔了100W，则小王给项目经理报，而项目经理知道后给部门经理报，部门经理知道后将此事解决了，则不需要往上级报了只需要继续工作即可。其中：部门经理知道后将此事解决就是try catch</li></ol><h2 id="getMessage-与-printStackTrace-方法"><a href="#getMessage-与-printStackTrace-方法" class="headerlink" title="getMessage() 与 printStackTrace()方法"></a>getMessage() 与 printStackTrace()方法</h2><ol><li><p>取得异常描述信息：getMessage()</p></li><li><p>取得异常的堆栈信息(<strong>比较适合于程序调试阶段</strong>)：printStackTrace()</p></li><li><p>代码示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"c://txt.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            * java.io.FileNotFoundException: c:\txt.txt (系统找不到指定的文件。)            at java.base/java.io.FileInputStream.open0(Native Method)            at java.base/java.io.FileInputStream.open(FileInputStream.java:219)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:157)            at java.base/java.io.FileInputStream.&lt;init>(FileInputStream.java:112)            at javase2.day02.javareview02.ErrorTest03.main(ErrorTest03.java:10)            * */</span>            <span class="token comment" spellcheck="true">//以下输出的是上面printStackTrace错误信息的一部分</span>            String s <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c:\txt.txt (系统找不到指定的文件。)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Wrold！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="finllay语句块"><a href="#finllay语句块" class="headerlink" title="finllay语句块"></a>finllay语句块</h2><ol><li><p>finally语句块可以直接和try语句块联用。try… finally…</p></li><li><p>try…catch…finally…也可以</p></li><li><p>在finally语句块中的代码是一定会执行的</p></li><li><p>在实际开发应用场景：finally语句块是一定会执行的,所以通常在程序中为了保证某资源一定会释放，所以一般在finally语句块中释放资源。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 情况一</span>        <span class="token comment" spellcheck="true">/*try {            System.out.println("执行结果1~~");            return;        }finally {            System.out.println("执行结果2~~");        }*/</span>        <span class="token comment" spellcheck="true">/*         * 以上程序的执行顺序：         * 1. 先执行try语句块中的System         * 2. 在执行finally语句块中的System         * 3. 最后执行try语句块中的return结束main方法         * 注意：一旦出现return则该方法自动关闭，除特殊情况如：finally语句块         */</span>        <span class="token comment" spellcheck="true">// 情况二</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*以上程序的执行顺序：         * 1. 初始化i变量         * 2. 执行try语句中的i = 10 并将i变量存储给temp变量         * 3. return temp变量         * 4. 执行finally中的i++         */</span>        <span class="token comment" spellcheck="true">/*            int i = 0;            try{                i = 10;                int temp = i;                return temp;            }finally {                i++;            }        */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Error异常信息&quot;&gt;&lt;a href=&quot;#Error异常信息&quot; class=&quot;headerlink&quot; title=&quot;Error异常信息&quot;&gt;&lt;/a&gt;Error异常信息&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://xuanxuanimages.oss-cn-be</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>致自己的一封信</title>
    <link href="https://xrebirth.github.io/posts/b585e161.html"/>
    <id>https://xrebirth.github.io/posts/b585e161.html</id>
    <published>2021-08-24T12:39:00.000Z</published>
    <updated>2021-08-24T12:44:30.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="致自己的一封信"><a href="#致自己的一封信" class="headerlink" title="致自己的一封信"></a>致自己的一封信</h2><p>亲爱的：</p><p>你好！    </p><p>​      时光飞逝，转眼间，自己已即将步入大二了，即将成为一名临近毕业的大学生，想想上一次还在憧憬大学的美好生活而现在已经过了一半，二年后的现在的你非常感谢二年前的你，因为你在二年前的对编程的坚持不懈，对编程的不放弃，在高中后，对编程充满热爱的你，如愿以偿上到自己所热爱的专业：软件工程，所以再次，在这里，感谢你一直以来的坚持不懈！所以决定给在给自己迷茫、焦虑、找不到生活与学习方向时写一封信，谨此激励自己，不管如何，这里还是有些话想对你说：</p><ol><li><p>关于学业👨‍🎓</p><p>两年前你以一个极差的成绩进入到一所自己失望的大学，但是庆幸的是你痛下决心要接本，在这里想告诉你的是不要回头，坚持往前走，哪怕前路生无可恋这也是当初你自己选的路，都是成年人了要学会承担自己做的每个决定，这一路你可以哭、可以奔溃、但是绝不能回头。不论人生的任何时候，你都要一直努力和自律。不要因为一时的努力而感动了自己，这个世界上不缺乏努力的人，努力是生活的常态而不是一时的兴起。努力学习和自律成就更好的自己，在大学期间拿到更多的证书，得到更多的实习机会，成为更优秀的自己，不必太过于在意他人的目光，希望你要学会<strong>忍受孤独，因为能登上山顶的人很少</strong>。“努力奔跑是为了追上那个曾经被寄予厚望的自己。”<strong>愿你的成熟不是被迫，学着笑而不语，学着承认不相信，学着接受不尽人意。</strong>我知道，你是个急性子，但请慢慢来，不着急。</p></li><li><p>关于家人👨‍👧‍👦<br> 你一定要孝敬你的父母。因为有他们的存在你才有了现在的生活，他们辛勤的付出，只为你能拥有快乐幸福。不论身处何地都要与他们经常联系，与他们沟通交流，多多关心他们。不要等到在未来的一天，他们苍颜白发，你才想起他们的好，希望你永远的理解他们，他们把最好的都给我们，我也应当全力付出对他们好，他们和我血浓于水，所以一定要好好对待他们，可能有时候与父母会有一些分歧，但请你一定不要像以前那样不耐烦，学会体会他们对你爱的表达方式。</p></li><li><p>关于爱情👩‍❤‍👨</p><p> 知道你遇到几次挫败的爱情，但你要始终相信只是因为你没有遇到动心的女生。世界这么大，爱情之事就是可遇不可求。愿你经历过人间桑桑最后觉得世间一定会有一个值得自己去呵护爱护的女孩子，要知道任何一个优秀的人从来不缺优秀的追随者，这个时代不乏有许多优秀的女孩子，只是自己还没遇到而已，所以要努力、要优秀、要不负众望。</p></li><li><p>关于生活🌃</p><p> 我知道你一直是一个会照顾自己的人，但在这里还是要啰嗦几句：</p><p> <strong>作息</strong>：希望你在以后的日子里能够少熬夜，保持每天都在晚上11:00之前睡觉（除非特殊情况），一个好的睡眠不仅可以有效的解决你整个人的精神状态，还能提高自己学习的专注力。</p><p> <strong>生活</strong>：你Get到了一些技能，比如拿到了驾照，同时也开始记账，这在一定程度上还是帮助你节省了一些不必要的开支。也开始尝试着每天制定学习计划，这样让你以后学习中能够有明确地目标。</p><p> <strong>饮食</strong>：俗话说身体是革命的本钱，所以所有的基础都是在照顾好自己的基础上，我知道你是一个不喜欢吃早饭的人，但是在以后日子希望你能吃早饭，因为你不可以这么自私，你已经长大了，要知道以后父母还是需要你的，所以即使不为别人也要替自己父母想想，不要让他们担心你。</p><p> <strong>运动</strong>：知道你一直以来都是一个千年老宅男，但是有时候还是要出去运动运动，因为一个人的学习与事业是否成功的前提都是要有一个好的身体，所以即使自己在忙也要出去适当的运动运动。</p></li><li><p>关于兴趣爱好方面👨‍💻</p><p>编程：从高中时候你就对编程一发不可收拾，我知道你不仅对编程是热爱更是以后要从事的相关IT行业，所以，一定要对自己要求严格些，不能像以前那样毛毛躁躁，什么    HTML、JavaScript、Java都懂一点点基本的，你要开始学会静下心来从熟练一门语言再到另一门语言，我知道你一直以来都羡慕互联网大佬们所做的项目，但请你相信只要你坚持下来他们有的你也一定可以！！！</p><p>绘画、设计：一直以来你的绘画与设计都是背编程所耽误，主要原因是专接本以及编程事情比较多的原因，你一直没能静下心来好好绘画和设计、希望等你上岸后能慢慢拾起你的爱好。</p></li><li><p>关于性格🎯</p><p>一直以来你也算比较了解自己，曾经也问了很多人你这个人怎样？这个问题，所以二十多年来也相对来说比较了解自己在这里不妨我说一说：</p><p>做事太急躁，总想着快速到达自己想要的高度，但是有些事情不是你着急所有的就一下能完成，所以做事的时候多思考一步，分类汇总，然后把做事的标准明确好，确保每天都能把自己设定好的目标完成。</p><p>说话有时候不过脑子这个缺点其实你一直未曾改变，在这里引用一句《小窗幽记·集醒篇》所记的”多读两句书，少说一句话，读得两行书，说得几句话。“所以少说话，多读书才是你现在主要做的事情。</p><p>做成点作品太容易自傲：可以理解你现在的年纪太急于炫耀，但是还是时刻要谨记：天外有天人外有人，学会自谦。比你优秀的大佬多多了，所以时刻牢记。</p><p>打开某个软件打算做一件事经常性被其他事务所吸引，时刻提醒自己当前在做什么别轻易分心。</p><p>在做事情没有做完之前，一定不要轻易张扬出去。因为一旦没有成功，不但事情没有完成，还会让自己的同学和朋友取笑！所以时刻谨记先行，其言而后从之~~</p></li></ol><p>​      愿你在最无趣无力的日子仍对世界保持好奇，撑不住了就去睡一觉。等等再说，世界很大，随时都会绽放奇迹。生活无需向任何人知会，就把坏心情强加给我们，然后又自作主张的收起，抛给我们一天彩虹或阴云。但也教会我们认清一些无法辨明的人事，不再坚持和固执。宽宥人生，迷茫和努力的时间，考量了我们承受与隐忍的能力，生命也因此变得厚重。这也许就是“经历”的意义所在。只是错误的命题再怎么证明也不会对！</p><p>​      最后，愿你奋力拼搏，去感受世间百态，愿你内心平静而强大，活的恣意潇洒；愿你在这鲜活而张扬的年纪，坦言不枉此生。切记一点：不忘初心，方得始终。不觉写了这么多，希望你别把”它们“变成空话，未来是什么样的就交给未来的自己回答吧，但别忘了自己最初的梦想。</p><p>祝：</p><p>一生久安，岁月无扰！</p><p>2021年08月24日</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;致自己的一封信&quot;&gt;&lt;a href=&quot;#致自己的一封信&quot; class=&quot;headerlink&quot; title=&quot;致自己的一封信&quot;&gt;&lt;/a&gt;致自己的一封信&lt;/h2&gt;&lt;p&gt;亲爱的：&lt;/p&gt;
&lt;p&gt;你好！    &lt;/p&gt;
&lt;p&gt;​      时光飞逝，转眼间，自己已即将步入</summary>
      
    
    
    
    <category term="日常学习/生活" scheme="https://xrebirth.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="小记" scheme="https://xrebirth.github.io/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>解决git push 443超时</title>
    <link href="https://xrebirth.github.io/posts/6204da2e.html"/>
    <id>https://xrebirth.github.io/posts/6204da2e.html</id>
    <published>2021-06-23T09:15:05.000Z</published>
    <updated>2021-06-23T10:23:06.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决git-push-pull-clone操作时的443错误-GitHub无法访问问题"><a href="#解决git-push-pull-clone操作时的443错误-GitHub无法访问问题" class="headerlink" title="解决git push/pull/clone操作时的443错误/GitHub无法访问问题"></a>解决git push/pull/clone操作时的443错误/GitHub无法访问问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近从学校回到家打算使用家里的台式机来学习，但是下载完<code>Git</code>时候，使用git push发现总是等待长时间之后会返回Failed to connect to github.com port 443: Operation timed out错误，然后全程懵逼，不管git push/pull还是git clone都是全程超时(一脸懵逼)</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>经过这两天的搜索终于从网上搜索到几种办法，在这里记录下，同时也分享给需要的小伙伴：</p><h3 id="情况一："><a href="#情况一：" class="headerlink" title="情况一："></a>情况一：</h3><p>这种情况是自己没有代理(科学上网)，可以使用UsbEAm Hosts Editor这款软件修改DNS地址选择最低的延迟从而达到可以访问GITHUB的目的(前提是<strong>Git没有设置代理！！！Git没有设置代理！！！Git没有设置代理！！！重要事情说三遍</strong>~ . ~，如果设置代理用下面命令行取消Git代理即可)</p><p>UsbEAm Hosts Editor<a href="https://www.dogfight360.com/blog/475/">下载地址</a></p><p>【附使用教程】UsbEAm Hosts Editor<a href="https://jingyan.baidu.com/article/eae07827e9bef65eec5485fc.html">使用教程</a></p><p>使用教程和以上教程类似，只需要选择Github即可，选择低延迟的DNS</p><p>修改完毕使用CMD命令 ipconfig /flushdns 刷新下本地DNS缓存数据 （需要管理员权限）</p><h3 id="情况二："><a href="#情况二：" class="headerlink" title="情况二："></a>情况二：</h3><p>这种情况与上面情况类似，但是不需要UsbEAm Hosts Editor软件,但是需要手动修改DNS</p><p><a href="https://juejin.cn/post/6844904193170341896">参考文档</a></p><h3 id="情况三："><a href="#情况三：" class="headerlink" title="情况三："></a>情况三：</h3><p>这种情况是自己有代理(科学上网)自己可以查询下本机的代理端口(不知道自己代理端口的建议谷歌搜索教程这里不再叙述了)，然后给Git设置代理端口如下命令：</p><blockquote><p>设置Git全局代理</p></blockquote><p>以下是设置socks端口命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global http.proxy 'socks5://127.0.0.1:1080' // 1080替换成自己本机socks的端口名git config --global https.proxy 'socks5://127.0.0.1:1080' // 1080替换成自己本机socks的端口名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是设置http/s端口命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global http.proxy 'http://127.0.0.1:1080' // 1080替换成自己本机http的端口名git config --global https.proxy 'http://127.0.0.1:1080' // 1080替换成自己本机https的端口名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是删除全局代理命令</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global --unset http.proxygit config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下是查看全局是否设置代理(如果没设置则不显示)</p><pre class="line-numbers language-Git"><code class="language-Git">git config --global --get http.proxygit config --global --get https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="总结：以上三种情况结合自身而定，有时候git-push-pull-clone不上去有可能是网络问题，可以试试换下网络是否可以使用。"><a href="#总结：以上三种情况结合自身而定，有时候git-push-pull-clone不上去有可能是网络问题，可以试试换下网络是否可以使用。" class="headerlink" title="总结：以上三种情况结合自身而定，有时候git push/pull/clone不上去有可能是网络问题，可以试试换下网络是否可以使用。"></a>总结：以上三种情况结合自身而定，有时候git push/pull/clone不上去有可能是网络问题，可以试试换下网络是否可以使用。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决git-push-pull-clone操作时的443错误-GitHub无法访问问题&quot;&gt;&lt;a href=&quot;#解决git-push-pull-clone操作时的443错误-GitHub无法访问问题&quot; class=&quot;headerlink&quot; title=&quot;解决git </summary>
      
    
    
    
    <category term="git" scheme="https://xrebirth.github.io/categories/git/"/>
    
    
    <category term="git问题" scheme="https://xrebirth.github.io/tags/git%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>大二上学期目标</title>
    <link href="https://xrebirth.github.io/posts/86c777df.html"/>
    <id>https://xrebirth.github.io/posts/86c777df.html</id>
    <published>2021-06-19T13:30:10.000Z</published>
    <updated>2021-09-09T12:42:09.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大二上学期目标🏳️‍🌈"><a href="#大二上学期目标🏳️‍🌈" class="headerlink" title="大二上学期目标🏳️‍🌈"></a>大二上学期目标🏳️‍🌈</h1><h3 id="一-专业知识📘"><a href="#一-专业知识📘" class="headerlink" title="一. 专业知识📘"></a>一. 专业知识📘</h3><ol><li>JavaSE基础(147节课每天学5节课，30天学完) (9月份学完)</li><li>MySQL数据库 (9月份学完)<ul><li>Mysql</li><li>jdbc：Java语言连接数据库。（使用java语言对数据库中数据进行增删改查等操作。）</li></ul></li><li>Web前端  (10月份学完)<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>JavaWeb(后端)  (11月份学完)<ul><li>Servlet</li><li>JSP</li></ul></li><li>Web进阶  (11月份学完)<ul><li>AJAX（发送一步请求的一个技术）</li><li>JQuery（是一个JavaScript语言的高级框架） </li></ul></li><li>javaweb项目实战 (12月份学完)<ul><li>基于Servlet + JSP + MySQL + JDBC + HTML + CSS + JavaScript + JQuery + AJAX能做一个Web项目。 </li><li>停下脚步整理以前的学习资料</li></ul></li></ol><h3 id="二-专业知识📘"><a href="#二-专业知识📘" class="headerlink" title="二. 专业知识📘"></a>二. 专业知识📘</h3><ol><li><p>数学</p><ul><li><p>高数暑假班(线上班)(9月22日之前学完)</p></li><li><p>日常刷题</p></li><li><p>尚学：周六日上课</p></li></ul></li><li><p>英语：</p><ol><li><p>词汇：(每天必背)</p><ul><li>高中背完复习</li><li>日常单词20个/天</li></ul></li><li><p>语法：(待定)</p><ul><li><p>尚学：周六日上课</p></li><li><p>线上有课就学(看情况学)</p></li></ul></li></ol></li><li><p>微机原理与接口（含汇编语言）(10)</p><ul><li>学暑假班微机原理课程</li></ul></li><li><p>C语言(待定)</p><ol><li> C 语言程序的结构</li><li> 数据类型及其运算</li><li> 顺序结构程序设计</li><li> 选择结构程序设计</li><li> 循环结构程序设计</li><li> 数组</li><li> 函数</li><li> 预处理命令4</li><li> 指针</li><li> 结构体与共用体</li><li> 位运算</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大二上学期目标🏳️‍🌈&quot;&gt;&lt;a href=&quot;#大二上学期目标🏳️‍🌈&quot; class=&quot;headerlink&quot; title=&quot;大二上学期目标🏳️‍🌈&quot;&gt;&lt;/a&gt;大二上学期目标🏳️‍🌈&lt;/h1&gt;&lt;h3 id=&quot;一-专业知识📘&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    <category term="日常学习/生活" scheme="https://xrebirth.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="小记" scheme="https://xrebirth.github.io/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>未来目标</title>
    <link href="https://xrebirth.github.io/posts/8f42d094.html"/>
    <id>https://xrebirth.github.io/posts/8f42d094.html</id>
    <published>2021-06-19T13:20:00.000Z</published>
    <updated>2021-09-09T04:55:19.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><h2 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h2><h3 id="Javase基础"><a href="#Javase基础" class="headerlink" title="Javase基础"></a>Javase基础</h3><h3 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h3><ul><li>Mysql</li><li>jdbc：Java语言连接数据库。（使用java语言对数据库中数据进行增删改查等操作。）</li></ul><h3 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h3><ul><li>HTML5</li><li>CSS3</li><li>JavaScript</li></ul><h3 id="JavaWeb-后端"><a href="#JavaWeb-后端" class="headerlink" title="JavaWeb(后端)"></a>JavaWeb(后端)</h3><p>BS结构，我们主要进行的是S端，S端是Server端（服务器端），服务器端可以是C语言，可以是PHP，当然也可以是Java。目前Java居多，占大部分！</p><ul><li>JavaSE</li><li>Servlet</li><li>JSP</li></ul><h3 id="Web进阶"><a href="#Web进阶" class="headerlink" title="Web进阶"></a>Web进阶</h3><ul><li>AJAX（发送一步请求的一个技术）</li><li>JQuery（是一个JavaScript语言的高级框架） </li></ul><h3 id="javaweb项目实战"><a href="#javaweb项目实战" class="headerlink" title="javaweb项目实战"></a>javaweb项目实战</h3><ul><li>基于Servlet + JSP + MySQL + JDBC + HTML + CSS + JavaScript + JQuery + AJAX能做一个Web项目。 </li><li>停下脚步整理以前的学习资料</li></ul><h3 id="SSM三大框架（额外可选学SSH）"><a href="#SSM三大框架（额外可选学SSH）" class="headerlink" title="SSM三大框架（额外可选学SSH）"></a>SSM三大框架（额外可选学SSH）</h3><ul><li>Spring + SpringMVC + MyBatis</li><li>建议的学习顺序：先学习MyBatis，再学习Spring，最后学习SpringMVC。</li><li>如果自己还有多余的时间，大家可以选学以下SSH：Spring + Struts2 + Hibernate</li><li>建议SSH的学习顺序：Hibernate、Spring、Struts2 </li></ul><h3 id="互联网分布式"><a href="#互联网分布式" class="headerlink" title="互联网分布式"></a>互联网分布式</h3><ul><li>Dubbo</li><li>MQ</li><li>redis</li><li>zookeeper</li><li>fastDFS</li><li>Nginx</li><li>SpringBoot</li><li>SpringCloud</li><li>…..等</li></ul><h3 id="分布式项目实战"><a href="#分布式项目实战" class="headerlink" title="分布式项目实战"></a>分布式项目实战</h3><ul><li>最好能有一个商业级的项目对以上内容有一个练习。实战操作。 </li><li>停下来开始实战练习</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;h2 id=&quot;Java类&quot;&gt;&lt;a href=&quot;#Java类&quot; class=&quot;headerlink&quot; title=&quot;Java类&quot;&gt;</summary>
      
    
    
    
    <category term="日常学习/生活" scheme="https://xrebirth.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="小记" scheme="https://xrebirth.github.io/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>类和类之间的关系(21)</title>
    <link href="https://xrebirth.github.io/posts/83141a13.html"/>
    <id>https://xrebirth.github.io/posts/83141a13.html</id>
    <published>2021-06-13T13:37:03.000Z</published>
    <updated>2021-09-14T01:09:35.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-类与类之间的关系"><a href="#Java-类与类之间的关系" class="headerlink" title="Java 类与类之间的关系"></a>Java 类与类之间的关系</h1><h2 id="一、继承关系"><a href="#一、继承关系" class="headerlink" title="一、继承关系"></a>一、继承关系</h2><p><strong>继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。</strong> 在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="继承关系"></p><h2 id="二、实现关系"><a href="#二、实现关系" class="headerlink" title="二、实现关系"></a>二、实现关系</h2><p><strong>实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。</strong> 在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png" alt="实现关系"></p><h2 id="三、依赖关系"><a href="#三、依赖关系" class="headerlink" title="三、依赖关系"></a>三、依赖关系</h2><p><strong>简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。</strong> 比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，为类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p><h2 id="四、关联关系"><a href="#四、关联关系" class="headerlink" title="四、关联关系"></a>四、关联关系</h2><p>关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。<strong>表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</strong> 在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="关联关系"></p><h2 id="五、聚合关系"><a href="#五、聚合关系" class="headerlink" title="五、聚合关系"></a>五、聚合关系</h2><p><strong>聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</strong> 比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="聚合关系"></p><h2 id="六、组合关系"><a href="#六、组合关系" class="headerlink" title="六、组合关系"></a>六、组合关系</h2><p><strong>组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，</strong> 比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。</p><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png" alt="组合关系"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-类与类之间的关系&quot;&gt;&lt;a href=&quot;#Java-类与类之间的关系&quot; class=&quot;headerlink&quot; title=&quot;Java 类与类之间的关系&quot;&gt;&lt;/a&gt;Java 类与类之间的关系&lt;/h1&gt;&lt;h2 id=&quot;一、继承关系&quot;&gt;&lt;a href=&quot;#一、继</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>内部类总结(20)</title>
    <link href="https://xrebirth.github.io/posts/d76d1ee1.html"/>
    <id>https://xrebirth.github.io/posts/d76d1ee1.html</id>
    <published>2021-06-13T06:51:39.000Z</published>
    <updated>2021-06-13T13:52:35.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内部类总结"><a href="#内部类总结" class="headerlink" title="内部类总结"></a>内部类总结</h1><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ol><li><p>概述：</p><ul><li>静态内部类可以等同看作静态方法/变量</li></ul></li><li><p>作用：</p><ul><li>静态内部类可以访问它的外部类中的私有属性和方法</li></ul></li><li><p>总结:</p><ul><li>静态内部类里面可以直接访问外部类的静态数据，但<strong>无法</strong>直接访问成员变量及方法</li><li>静态内部类可以添加修饰符public、protected、缺省</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name <span class="token operator">=</span> <span class="token string">"我是一个成员变量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String a1 <span class="token operator">=</span> <span class="token string">"我是一个静态常量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声名一个静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">static1</span><span class="token punctuation">{</span>        String c<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态内部类里面的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态内部类里面的成员方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态变量</span>            <span class="token comment" spellcheck="true">// System.out.println(name);   // 成员变量编译报错 --------> java: 无法从静态上下文中引用非静态 变量 name</span>            <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>            <span class="token comment" spellcheck="true">// sum(1,2); // 成员方法编译报错 --------> java: 无法从静态上下文中引用非静态 方法 sum(int,int)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StaticClass<span class="token punctuation">.</span>static1<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>        <span class="token comment" spellcheck="true">// StaticClass.static1.c2();   // 静态方法 --------> java: 无法从静态上下文中引用非静态 方法 c2()</span>        StaticClass<span class="token punctuation">.</span>static1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态内部类方法测试</span>        <span class="token comment" spellcheck="true">// 创建静态内部类</span>        StaticClass<span class="token punctuation">.</span>static1 e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticClass<span class="token punctuation">.</span>static1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>概述：</p><ul><li>成员内部类可以等同看作成员方法/变量</li></ul><p>作用：</p><ul><li>成员内部类可以访问它的外部类中的私有属性和方法</li></ul><p>总结：</p><ul><li>成员内部类可以直接访问外部类的所有属性和方法</li><li>成员内部类<strong>不可以有静态声名</strong>(包括所有含有static的关键字)</li><li>成员内部类可以添加修饰符public、protected、缺省</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MembersClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name <span class="token operator">=</span> <span class="token string">"我是一个成员变量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String a1 <span class="token operator">=</span> <span class="token string">"我是一个静态常量"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声名一个成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">static1</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// public static int num = 10; // 静态变量编译报错： ---> 'static' 仅允许在常量变量声明中使用</span>        String c<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>        <span class="token comment" spellcheck="true">// 成员方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个成员内部类的成员方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态变量</span>            <span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 静态方法</span>            <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 成员方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建外部类对象</span>        MembersClass e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembersClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MembersClass<span class="token punctuation">.</span>static1 e2 <span class="token operator">=</span> e1<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">static1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 测试</span>        e2<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"这是一个成员内部类的成员变量"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        e2<span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>作用：</p><ul><li>局部内部类的使用保证全局方法和变量不会被污染从而运行出错</li></ul><p>总结：</p><ul><li>局部内部类只在当前方法中有效</li><li>在JDK8及以上版本中，可以不使用final修饰，但是也不可以二次赋值，如果局部变量被内部类访问，那么该局部变量相当于自动使用了final修饰</li><li>局部内部类中不能定义 static 成员</li><li>局部内部类中还可以包含内部类，但是这些内部类也不能使用访问控制修饰符（public、private 和 protected）和 static 修饰符修饰</li><li>在局部内部类中可以访问外部类的所有成员</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalClass</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">11000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声名一个局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">b1</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 外部方法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 外部方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// a = 100; // 编译报错 ----> java: 从内部类引用的本地变量必须是最终变量或实际上的最终变量</span>        b1 local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        local<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LocalClass localClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localClass<span class="token punctuation">.</span><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>概述：</p><ul><li>匿名内部类：其实就是一个匿名子类对象</li><li>格式：new 父类or接口（）{子类内容}</li></ul><p>总结：</p><ul><li>匿名内部类优点：可以少定义一个类</li></ul><ul><li>匿名内部类缺点：无法重复利用</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i</span><span class="token punctuation">(</span>a1 a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一种方法：调用a2接口</span>        <span class="token function">i</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二种方法：调用m1方法,可以使用匿名内部类</span>        <span class="token function">i</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接口</span><span class="token keyword">interface</span> <span class="token class-name">a1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种方法：实现a1接口</span><span class="token keyword">class</span> <span class="token class-name">a2</span> <span class="token keyword">implements</span> <span class="token class-name">a1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内部类总结&quot;&gt;&lt;a href=&quot;#内部类总结&quot; class=&quot;headerlink&quot; title=&quot;内部类总结&quot;&gt;&lt;/a&gt;内部类总结&lt;/h1&gt;&lt;h2 id=&quot;静态内部类&quot;&gt;&lt;a href=&quot;#静态内部类&quot; class=&quot;headerlink&quot; title=&quot;静态内</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Object中方法(19)</title>
    <link href="https://xrebirth.github.io/posts/8fa6bab.html"/>
    <id>https://xrebirth.github.io/posts/8fa6bab.html</id>
    <published>2021-06-12T15:13:10.000Z</published>
    <updated>2021-06-13T13:52:26.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object中方法"><a href="#Object中方法" class="headerlink" title="Object中方法"></a>Object中方法</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><ul><li>object中自带方法有(详见文档)</li></ul><p><img src="https://xuanxuanimages.oss-cn-beijing.aliyuncs.com/img/ObjectLang.png" alt="Object方法"></p><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><ol><li><p>返回该对象的字符串表示</p></li><li><p>有时候有的项目SUN公司给的方法不满足于项目需求所以需要重写SUN公司中的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToString</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">ToString</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写SUN公司中的Object.lang中的toString的方法</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"toStrimg"</span> <span class="token operator">+</span> <span class="token string">"[name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">",age： "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">class</span> <span class="token class-name">ToStringTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ToString toString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToString</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-->toStrimg[name: 小王,age： 30]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="equals-Object-obj-方法"><a href="#equals-Object-obj-方法" class="headerlink" title="equals(Object obj)方法"></a>equals(Object obj)方法</h2><ol><li><p>指示其他某个对象是否与此对象“相等”。</p></li><li><p>object中的equals方法比较的是内存地址，而在现实的业务逻辑当中,不应该比较内存地址,应该比较内容，所以 Object中的 equals方法也要重写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Equals</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个身份证号</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个姓名</span>    <span class="token comment" spellcheck="true">// constructor</span>    <span class="token keyword">public</span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Equals equals1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Equals equals2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Equals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>equals1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>equals2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符串之间的比较</span>        String a1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1 <span class="token operator">==</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果使用“==”比较字符串返回  ---》 false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// equals方法在Object中比较的是两个内存地址是否相同</span>        <span class="token comment" spellcheck="true">// 但是在String中的equals在String中比较的是内容是否相同(String继承自Object)，</span>        <span class="token comment" spellcheck="true">// 说明String重写了父类(Object)中的equals方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前对象和要比较的对象的内存地址相同，则说明这两个对象是相同的（值也是相同的）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 因为形参中创建的Object中不含有id这个成员变量所以需要父(Object) -----> 子(Equals)向下转型</span>        <span class="token comment" spellcheck="true">// Equals默认继承于Object对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Equals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果这个对象属于Equals这个类</span>            Equals s <span class="token operator">=</span> <span class="token punctuation">(</span>Equals<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> s<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// s.name == this.name (关于字符串类型比较的不是内存地址而是字符串是否相同)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h2><ol><li><p>System.gc() 运行垃圾回收器。</p></li><li><p>finalize()当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalize</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写Object中的finalize方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建要给finalize方法</span>        <span class="token comment" spellcheck="true">// Finalize p = this;</span>        <span class="token comment" spellcheck="true">// 注意: 运行GC不一定回收可以将当前地址引用给其他堆内存中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"垃圾即将被回收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Finalize finalize1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        finalize1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：程序猿只能”建议“GC回收垃圾</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h2><ol><li><p>返回该对象的哈希码值。支持此方法是为了提高哈希表</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashCode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashCode hashCode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回一个哈希值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCode1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Object中方法&quot;&gt;&lt;a href=&quot;#Object中方法&quot; class=&quot;headerlink&quot; title=&quot;Object中方法&quot;&gt;&lt;/a&gt;Object中方法&lt;/h1&gt;&lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Java" scheme="https://xrebirth.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://xrebirth.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据库构成(01)</title>
    <link href="https://xrebirth.github.io/posts/54faa8bc.html"/>
    <id>https://xrebirth.github.io/posts/54faa8bc.html</id>
    <published>2021-06-07T16:00:00.000Z</published>
    <updated>2021-06-09T15:27:27.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1节：数据库构成"><a href="#第1节：数据库构成" class="headerlink" title="第1节：数据库构成"></a>第1节：数据库构成</h1><ol><li><p>系统数据库<br> 系统数据库是指MySQL安装配置完成之后，系统自动创建的一些数据库。</p><blockquote><p>以下四种都是系统数据库：</p><ol><li>information_schema：主要存储系统中一些数据库对象信息，包括用户信息、字符集信息和分区信息等…</li><li>mysql：主要存储账户信息、权限信息、存储过程和时区信息等…</li><li>performance_schema：主要用于收集数据库服务器性能参数。</li><li>sys：该库通过视图的形式把<strong>information_schema</strong>和<strong>performance_schema</strong>结合起来，查询出更容易理解的数据，帮助DBA快速获取数据库系统的各种数据库的对象信息，使DBA和开发人员能够快速定位性能瓶颈。</li></ol></blockquote></li><li><p>用户数据库<br> 用户数据库是根据用户根据实际需求手动创建的数据库。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1节：数据库构成&quot;&gt;&lt;a href=&quot;#第1节：数据库构成&quot; class=&quot;headerlink&quot; title=&quot;第1节：数据库构成&quot;&gt;&lt;/a&gt;第1节：数据库构成&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;系统数据库&lt;br&gt; 系统数据库是指MySQL安装配置完成之后，系统</summary>
      
    
    
    
    <category term="MySQL" scheme="https://xrebirth.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://xrebirth.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
